
;change
;
;fix
;	LOAD:	####	ADD
;	LOAD:	####	DEL
;
;	LOAD:	move part of check '['
;
;	change LOAD

;
;	EAX type
;

#EAX	EQU	40H
#EBX	EQU	41H
#ECX	EQU	42H
#EDX	EQU	43H

#ESI	EQU	44H
#EDI	EQU	45H

;
IS_EDI:
	CMP	BYTE [FLG.A],0
	JE	IS_EDI.N

	CMP	BYTE [LOADED_REGISTER_EDI],0
	JE	IS_EDI.N
	CMP	EAX,[REGISTER_EDI]
	JNE	IS_EDI.N

	JMP	MAKE_ZR

IS_EDI.N:
	JMP	MAKE_NZ

;
STORE_REGISTER:
	CMP	BYTE [FLG.A],0
	JE	STORE_REGISTER.R

	CMP	DWORD [REGISTER_EDI],0
	JE	STORE_REGISTER.R
	CMP	BYTE [LOADED_REGISTER_EDI],0
	JE	STORE_REGISTER.R

	MOV	EBX,[REGISTER_EDI]
	CALL	PRINT_VAR_EDI
	;MOV	BYTE [LOADED_REGISTER_EDI],0

STORE_REGISTER.R:
	RET

;
LOAD_REGISTER:
	CMP	BYTE [FLG.A],0
	JE	LOAD_REGISTER.R

	CMP	DWORD [REGISTER_EDI],0
	JE	LOAD_REGISTER.R
	CMP	BYTE [LOADED_REGISTER_EDI],0FFH
	JE	LOAD_REGISTER.R

	MOV	EBX,[REGISTER_EDI]

	;CALL	LOAD_VAR
	;CALL	PRINT
	;DB	'	MOV	EDI,EBX',0DH,0AH,'$'
	CALL	PRINT_EDI_VAR

	MOV	BYTE [LOADED_REGISTER_EDI],0FFH
LOAD_REGISTER.R:
	RET

;
;
;

PUSH_BX:
	CALL	IS_L
	JE	PRINT_PUSH_EBX

	CMP	EAX,0004H
	JE	PRINT_PUSH_EBX
	CMP	EAX,0084H
	JE	PRINT_PUSH_EBX

	JMP	PRINT_PUSH_BX

;
;
;

POP_AX:
	CALL	IS_L
	JE	PRINT_POP_EAX

	CMP	EAX,0004H
	JE	PRINT_POP_EAX
	CMP	EAX,0084H
	JE	PRINT_POP_EAX

	JMP	PRINT_POP_AX



PRINT_PUSH_BX:
	CALL	PRINT
	DB	'	PUSH	!BX',0DH,0AH,'$'
	RET

PRINT_PUSH_EBX:
	CALL	PRINT
	DB	'	PUSH	EBX',0DH,0AH,'$'
	RET

PRINT_POP_BX:
	CALL	PRINT
	DB	'	POP	!BX',0DH,0AH,'$'
	RET

PRINT_POP_EBX:
	CALL	PRINT
	DB	'	POP	EBX',0DH,0AH,'$'
	RET

PRINT_POP_AX:
	CALL	PRINT
	DB	'	POP	!AX',0DH,0AH,'$'
	RET

PRINT_POP_EAX:
	CALL	PRINT
	DB	'	POP	EAX',0DH,0AH,'$'
	RET

PRINT_POP_SI:
	CALL	PRINT
	DB	'	POP	!SI',0DH,0AH,'$'
	RET
;
;
;

;TO_INT:
;	RET
;
;	CMP	CX,0001H
;	JE	CHAR_TO_INT
;	CMP	CX,0081H
;	JE	CHAR_TO_INT
;	RET
;
;CHAR_TO_INT:
;	CALL	PRINT
;	DB	'	MOV	BH,0',0DH,0AH,'$'
;	MOV	CX,0082H
;	RET

;
;
;

MK_2TERM:
	CMP	BYTE [ADRS_L],0
	JNE	ERR_TYPE

	;	mov	eax,esp
	;	call	disp_ax
	;	mov	eax,esp
	;	mov	eax,[eax]
	;	call	disp_ax

	PUSH	ESI
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,2*10H

		CMP	BYTE [FLG.Z],0
		JE	MK_2TERM.ZE
		MOV	AL,'('
		CALL	OUTC
		CALL	MK_REF_L
		MOV	AL,')'
		CALL	OUTC
		MOV	AL,'('
		CALL	OUTC
		CALL	MK_REF_R
		MOV	AL,')'
		CALL	OUTC
		JMP	MK_2TERM.R
MK_2TERM.ZE:

	CALL	IS_OPT
	JE	MK_2TERM.OPT

MK_2TERM.NOPT:
	CALL	MK_REF_R
	;CALL	TO_INT
	MOV	[EBP-2*2],ECX

		JMP	MK_2TERM.ORIG1

	MOV	EAX,[LEVEL_EAX]
	PUSH	EAX
	OR	EAX,EAX
	JE	MK_2TERM.03
	CALL	PRINT
	DB	'	PUSH	EAX',0DH,0AH,'$'
	MOV	EBX,[STACK]
	MOV	DWORD [EBX],#EAX
	ADD	DWORD [STACKP],4
MK_2TERM.03:
	CALL	PRINT
	DB	'	MOV	EAX,EBX',0DH,0AH,'$'
	INC	DWORD [LEVEL_EAX]
	JMP	MK_2TERM.04

MK_2TERM.ORIG1:
	MOV	EAX,ECX
	CALL	PUSH_BX

MK_2TERM.04:
	CALL	MK_REF_L
	;CALL	TO_INT
	MOV	[EBP-2*4],ECX

		JMP	MK_2TERM.ORIG2

	DEC	DWORD [LEVEL_EAX]
	POP	EAX
	OR	EAX,EAX
	JE	MK_2TERM.05

;	CALL	PRINT
;	DB	'	POP	EAX',0DH,0AH,'$'
	JMP	MK_2TERM.05

MK_2TERM.ORIG2:
	MOV	EAX,[EBP-2*2]
	CALL	POP_AX
MK_2TERM.05:

MK_2TERM.NOPT.10:
		MOV	ECX,[EBP-2*4]	;if << or >> then type=l-type
		MOV	EAX,[ESI+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'<<'
		JE	MK_2TERM.20
		CMP	AX,'>>'
		JE	MK_2TERM.20

		MOV	EAX,[EBP-2*4]	;ptr-ptr :int
		SBB	EAX,100H
		SBB	CL,CL
		MOV	EAX,[EBP-2*2]
		SBB	EAX,100H
		SBB	CH,CH
		CMP	CX,0
		JNE	MK_2TERM.09

		MOV	ECX,[TYPE_INT]
		JMP	MK_2TERM.R

MK_2TERM.09:
	MOV	ECX,[EBP-2*4]
	MOV	EDX,[EBP-2*2]
	CALL	TYPEOF2
	JMP	MK_2TERM.20


MK_2TERM.20:

MK_2TERM.R:
	ADD	ESP,2*10H
	POP	EBP
	POP	ESI

	;	mov	eax,esp
	;	call	disp_ax
	;	mov	eax,esp
	;	mov	eax,[eax]
	;	call	disp_ax

	RET

;

MK_2TERM.OPT:
	CALL	IS_NAME_R
	JE	MK_2TERM.OPT.10

	CALL	IS_NAME_L
	JE	MK_2TERM.OPT.20

	CALL	IS_NUM_R
	JNE	MK_2TERM.NOPT

	CALL	MK_REF_L
	MOV	[EBP-2*4],ECX
	;CALL	TO_INT
	PUSH	ECX

	CALL	GET_NUM_R
	CALL	PRINT
	DB	'	MOV	!AX,%D',0DH,0AH,'$'
	MOV	EAX,[ESI+NODE3]
	MOV	EAX,[EAX+NODE2]
	MOV	[EBP-2*2],EAX

	POP	ECX
		JMP	MK_2TERM.NOPT.10
	JMP	MK_2TERM.R

MK_2TERM.OPT.10:
	CALL	MK_REF_L
	MOV	[EBP-2*4],ECX
	CALL	PRINT
	DB	'	MOV	EAX,EBX',0DH,0AH,'$'

	CALL	MK_REF_R	;name
	MOV	[EBP-2*2],ECX
	CALL	PRINT
	DB	'	XCHG	EAX,EBX',0DH,0AH,'$'

	JMP	MK_2TERM.NOPT.10

MK_2TERM.OPT.20:
	CALL	MK_REF_R
	MOV	[EBP-2*2],ECX
	CALL	PRINT
	DB	'	MOV	EAX,EBX',0DH,0AH,'$'

	CALL	MK_REF_L	;name
	MOV	[EBP-2*4],ECX

	JMP	MK_2TERM.NOPT.10


;	ECX:l
;	EDX:r
TYPEOF2:
	CMP	ECX,100H
	SBB	AH,AH
	CMP	EDX,100H
	SBB	AL,AL
	CMP	AX,0
	JE	TYPEOF2.PNTPNT

	CMP	ECX,100H
	JNB	TYPEOF2.L

	CMP	EDX,100H
	JNB	TYPEOF2.R

	;for in case sizeof(long)!=sizeof(short or char)

		CMP	ECX,00C4H
		JE	TYPEOF2.F

		MOV	EAX,ECX
		CALL	PROMOTED_TYPE
		MOV	ECX,EAX

		PUSH	EDX
		MOV	EAX,EDX
		CALL	PROMOTED_TYPE
		MOV	EDX,EAX

	CMP	ECX,0004H
	JE	TYPEOF2.10
	CMP	ECX,0084H
	JE	TYPEOF2.10
	MOV	ECX,EDX	;[EBP-2*4]	;??
TYPEOF2.10:

	MOV	EAX,ECX	;[EBP-2*2]
	AND	EAX,EDX	;[EBP-2*4]
	AND	EAX,0080H

	AND	ECX,0FH;7FH
	OR	ECX,EAX

	POP	EDX
TYPEOF2.20:

TYPEOF2.RET:
	RET

TYPEOF2.PNTPNT:
	MOV	ECX,[TYPE_INT]
	RET

TYPEOF2.R:
	MOV	ECX,EDX
TYPEOF2.L:
	RET
TYPEOF2.F:
	MOV	ECX,00C4H
	RET
;
;	(CX)DX
;
;	no need to check type DX!
;

CAST_CX_DX:
		CMP	ECX,0001H
		JE	CAST_CX_DX.UC#
		CMP	ECX,0081H
		JE	CAST_CX_DX.C#
		CMP	ECX,0002H
		JE	CAST_CX_DX.US#
		CMP	ECX,0082H
		JE	CAST_CX_DX.S#

		;CMP	ECX,0004H
		;JE	CAST_CX_DX.UL#
		;CMP	ECX,0084H
		;JE	CAST_CX_DX.L#

		CMP	ECX,00C4H
		JE	CAST_CX_DX.F#

	;	MOV	EDX,ECX	;to change list below EDX->ECX

	CMP	EDX,0001H
	JE	CAST_CX_DX.UC
	CMP	EDX,0081H
	JE	CAST_CX_DX.C

	CMP	EDX,0004H
	JE	CAST_CX_DX.1
	CMP	EDX,0084H
	JE	CAST_CX_DX.1

	CALL	IS_L
	JNE	CAST_CX_DX.E

CAST_CX_DX.1:
		CMP	EDX,00C4H
		JE	CAST_CX_DX.FTOL
	CMP	EDX,0002H
	JE	CAST_CX_DX.US
	CMP	EDX,0082H
	JE	CAST_CX_DX.S

	JMP	CAST_CX_DX.E

CAST_CX_DX.FTOL:
		TEST	EDX,80H
		JE	CAST_CX.DX.FTOUL

	CALL	PRINT
	DB	'	call	ftol_',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX.DX.FTOUL:
	CALL	PRINT
	DB	'	call	ftoul_',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.UC:
	CALL	TOI
	CALL	PRINT
	DB	'	MOVZX	!BX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.C:
	CALL	TOI
	CALL	PRINT
	DB	'	MOVSX	!BX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.US:
	CALL	TOI
	CALL	PRINT
	DB	'	MOVZX	EBX,BX',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.S:
	CALL	TOI
	CALL	PRINT
	DB	'	MOVSX	EBX,BX',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

;CAST_CX_DX.UL:
;
;CAST_CX_DX.L:
;	CMP	EDX,00C4H
;	JE	CAST_CX_DX.FTOL
;	JMP	CAST_CX_DX.1

CAST_CX_DX.F:
	CMP	EDX,00C4H
	JE	CAST_CX_DX.E

		TEST	EDX,80H
		JE	CAST_CX_DX.ULTOF
	CALL	PRINT
	DB	'	call	ltof_',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.ULTOF:
	CALL	PRINT
	DB	'	call	ultof_',0DH,0AH,'$'
	JMP	CAST_CX_DX.E


	CMP	ECX,0001H
	JE	CAST_CX_DX.UCHAR
	CMP	ECX,0081H
	JE	CAST_CX_DX.CHAR

	CMP	ECX,0002H
	JE	CAST_CX_DX.USHORT
	CMP	ECX,0082H
	JE	CAST_CX_DX.SHORT

	CMP	ECX,0004H
	JE	CAST_CX_DX.ULONG
	CMP	ECX,0084H
	JE	CAST_CX_DX.LONG

	JMP	CAST_CX_DX.E	;(pnt)EDX
;
CAST_CX_DX.UC#:
	JMP	CAST_CX_DX.UC

CAST_CX_DX.C#:
	JMP	CAST_CX_DX.C
;
CAST_CX_DX.US#:
	JMP	CAST_CX_DX.US

CAST_CX_DX.S#:
	JMP	CAST_CX_DX.S

;CAST_CX_DX.UL#:
;	JMP	CAST_CX_DX.UL
;CAST_CX_DX.L#:
;	JMP	CAST_CX_DX.L

CAST_CX_DX.F#:
	JMP	CAST_CX_DX.F
;
TOI:
	CMP	EDX,00C4H
	JNE	TOI.R
	CALL	PRINT
	DB	'	call	ftol_',0DH,0AH,'$'
TOI.R:
	RET
;
;
;

CAST_CX_DX.UCHAR:
	JMP	CAST_CX_DX.E

CAST_CX_DX.CHAR:
	JMP	CAST_CX_DX.E

;
;
;

CAST_CX_DX.USHORT:
	CMP	EDX,0001H
	JE	CAST_USHORT_UCHAR
	CMP	EDX,0081H
	JE	CAST_USHORT_CHAR
	JMP	CAST_CX_DX.E

CAST_USHORT_UCHAR:

CAST_USHORT_CHAR:
	CALL	PRINT
	DB	'	MOVZX	BX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E



;	(int)DX

CAST_CX_DX.SHORT:
	CMP	EDX,0001H
	JE	CAST_SHORT_UCHAR
	CMP	EDX,0081H
	JE	CAST_SHORT_CHAR
	JMP	CAST_CX_DX.E

CAST_SHORT_UCHAR:
	CALL	PRINT
	DB	'	MOVSX	BX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_SHORT_CHAR:
	CALL	PRINT
	DB	'	MOVZX	BX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

;
;
;

CAST_CX_DX.ULONG:
	CMP	EDX,0001H
	JE	CAST_CX_DX.ULONG.CHAR
	CMP	EDX,0004H
	JE	CAST_CX_DX.E
	CMP	EDX,0084H
	JE	CAST_CX_DX.E
	CALL	IS_L
	JE	CAST_CX_DX.E

	CALL	PRINT
	DB	'	MOVZX	EBX,BX',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.ULONG.CHAR:
	CALL	PRINT
	DB	'	MOVZX	EBX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

;	(long)DX

CAST_CX_DX.LONG:
	CMP	EDX,0001H
	JE	CAST_CX_DX.LONG.UCHAR
	CMP	EDX,0081H
	JE	CAST_CX_DX.LONG.CHAR
	CMP	EDX,0004H
	JE	CAST_CX_DX.E
	CMP	EDX,0084H
	JE	CAST_CX_DX.E
	CMP	EDX,0082H
	JE	CAST_CX_DX.MOVSX_EBX_BX
	CMP	EDX,0002H
	JE	CAST_CX_DX.MOVZX_EBX_BX
	CALL	IS_L
	JE	CAST_CX_DX.E

	CALL	PRINT
	DB	'	MOVSX	EBX,BX',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.LONG.UCHAR:
	CALL	PRINT
	DB	'	MOVZX	EBX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.LONG.CHAR:
	CALL	PRINT
	DB	'	MOVSX	EBX,BL',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.MOVZX_EBX_BX:
	CALL	PRINT
	DB	'	MOVZX	EBX,BX',0DH,0AH,'$'
	JMP	CAST_CX_DX.E

CAST_CX_DX.MOVSX_EBX_BX:
	CALL	PRINT
	DB	'	MOVSX	EBX,BX',0DH,0AH,'$'
	JMP	CAST_CX_DX.E
CAST_CX_DX.E:
	RET


;
;	ecx:loaded type
;
LOAD_PNT:

	CMP	ECX,100H
	JB	LOAD_PNT.05

	MOV	EAX,[ECX+NODE1]
	MOV	AX,[EAX]

		CMP	AX,'bt'+8080H
		JE	LOAD_PNT.BT

	CMP	AX,'['
	JE	LOAD_PNT.R2
	CMP	AX,'{'
	JE	LOAD_PNT.R2

LOAD_PNT.05:
	CMP	ECX,0001H
	JE	LOAD_PNT.UCHAR
	CMP	ECX,0081H
	JE	LOAD_PNT.CHAR

	CMP	ECX,0002H
	JE	LOAD_PNT.USHORT	;PRINT_BX_PNT
	CMP	ECX,0082H
	JE	LOAD_PNT.SHORT	;PRINT_BX_PNT

	CMP	ECX,0004H
	JE	PRINT_EBX_PNT
	CMP	ECX,0084H
	JE	PRINT_EBX_PNT

		CMP	ECX,00C4H
		JE	PRINT_EBX_PNT

	CALL	IS_L
	JE	PRINT_EBX_PNT
	JMP	PRINT_BX_PNT

LOAD_PNT.PROMOTE:
	CALL	PROMOTE
	JMP	LOAD_PNT.R

LOAD_PNT.R2:
	MOV	EBX,[USE_OFFSET]
	OR	EBX,EBX
	JE	LOAD_PNT.R

	CALL	PRINT
	DB	'	ADD	EBX,%L',0DH,0AH,'$'

LOAD_PNT.R:
	RET
;
;LOAD_PNT.BT:
;	MOV	EBX,[ECX+NODE3]	;bit offset
;
;	PUSH	EBX
;
;	CALL	PRINT
;	DB	'	MOV	EBX,[E'
;LOAD_REG.BT:
;	DB	'BX]',0DH,0AH
;	DB	'	SHR	EBX,%L',0DH,0AH
;	DB	'	AND	EBX,1',0DH,0AH,'$'
;
;	POP	EBX
;	MOV	ECX,[TYPE_UINT]
;	RET
;
LOAD_PNT.BT:
	MOV	EBX,[ECX+NODE3]	;bit offset

	PUSH	EBX

	CALL	PRINT
	DB	'	MOV	EBX,[E'
	DB	'$'

	PUSHAD
	MOV	EBX,LOAD_REG.BT
	CALL	PUT_STRZ
	POPAD

	CALL	PRINT
	DB	']',0DH,0AH
	DB	'	SHR	EBX,%L',0DH,0AH
	DB	'	AND	EBX,1',0DH,0AH,'$'

	POP	EBX
	MOV	ECX,[TYPE_UINT]
	RET




LOAD_PNT.UCHAR:
	;CALL	PRINT_UC_PNT
	;MOV	ECX,[TYPE_UINT]
	;JMP	LOAD_PNT.PROMOTE
LOAD_PNT.CHAR:
	;CALL	PRINT_SC_PNT
	;MOV	ECX,[TYPE_INT]
	;JMP	LOAD_PNT.PROMOTE

	CALL	PRINT_BL_PNT
	JMP	LOAD_PNT.PROMOTE

LOAD_PNT.USHORT:
	;CALL	PRINT_US_PNT
	;MOV	ECX,[TYPE_UINT]
	;JMP	LOAD_PNT.PROMOTE

LOAD_PNT.SHORT:
	;CALL	PRINT_SS_PNT
	;MOV	ECX,[TYPE_INT]
	;JMP	LOAD_PNT.PROMOTE

	CALL	PRINT_BX_PNT
	JMP	LOAD_PNT.PROMOTE

;
;	ECX type
;	>EAX sign 00/80
;

SIGN_BIT:
	MOV	EAX,0000H
	CMP	ECX,100H
	JNB	SIGN_BIT.PNT

	MOV	EAX,ECX
	AND	EAX,0080H

	CLC
	RET

SIGN_BIT.PNT:
	STC
	RET



;
;	BX:node
;

LOAD_VAR:
	MOV	ECX,[EBX+NODE2]

	CMP	ECX,0001H
	JE	LOAD_VAR.UCHAR
	CMP	ECX,0081H
	JE	LOAD_VAR.CHAR

	CMP	ECX,0002H
	JE	LOAD_VAR.USHORT
	CMP	ECX,0082H
	JE	LOAD_VAR.SHORT

	CMP	ECX,0004H
	JE	LOAD_VAR.ULONG	;PRINT_EBX_VAR
	CMP	ECX,0084H
	JE	LOAD_VAR.LONG	;PRINT_EBX_VAR

		CMP	ECX,00C4H
		JE	LOAD_VAR.FLOAT	;PRINT_EBX_VAR

	CALL	IS_L
	JE	LOAD_VAR.PNT	;PRINT_EBX_VAR

	CALL	PRINT_BX_VAR
	RET

LOAD_VAR.PROMOTE:
	CALL	PROMOTE
	RET

LOAD_VAR.UCHAR:
LOAD_VAR.CHAR:
	CALL	PRINT_BL_VAR
	JMP	LOAD_VAR.PROMOTE

LOAD_VAR.USHORT:
LOAD_VAR.SHORT:
	CALL	PRINT_BX_VAR
	JMP	LOAD_VAR.PROMOTE

LOAD_VAR.PNT:
LOAD_VAR.FLOAT:
LOAD_VAR.ULONG:
LOAD_VAR.LONG:
		CMP	BYTE [FLG.Z],0
		JE	LOAD_VAR.D

		PUSH	EBX
		CALL	PRINT
		DB	'(d %n)','$'
		RET

LOAD_VAR.D:
	CMP	BYTE [FLG.A],0
	;JNE	LOAD_VAR.REG
	JNE	LOAD_VAR.REG#
	JMP	PRINT_EBX_VAR

LOAD_VAR.REG#:
	CMP	EBX,[REGISTER_EDI]
	JE	LOAD_VAR.REG#2

	CALL	PRINT_EBX_VAR
	RET

LOAD_VAR.REG#2:
	CMP	BYTE [LOADED_REGISTER_EDI],0
	JNE	LOAD_VAR.REG2

	MOV	BYTE [LOADED_REGISTER_EDI],0FFH
	PUSH	EBX
	CALL	PRINT_EBX_VAR
	POP	EBX
	;CALL	PRINT
	;DB	'	MOV	EDI,EBX',0DH,0AH,'$'
	RET


LOAD_VAR.REG:
	CMP	EBX,[REGISTER_EDI]
	JE	LOAD_VAR.REG2

	PUSH	EBX
	CALL	PRINT_EBX_VAR
	POP	EBX

	MOV	[REGISTER_EDI],EBX

	CALL	PRINT
	DB	'	MOV	EDI,EBX',0DH,0AH,'$'
	RET

LOAD_VAR.REG2:
	CALL	PRINT
	DB	'	MOV	EBX,EDI',0DH,0AH,'$'
	RET



;
;	EBX:node
;

STORE_VAR:
	MOV	EAX,[EBX+NODE2]
	CMP	EAX,0001H
	JE	PRINT_VAR_BL
	CMP	EAX,0081H
	JE	PRINT_VAR_BL

	CMP	EAX,0002H
	JE	PRINT_VAR_BX
	CMP	EAX,0082H
	JE	PRINT_VAR_BX

	CMP	EAX,0004H
	JE	PRINT_VAR_EBX
	CMP	EAX,0084H
	JE	PRINT_VAR_EBX

		CMP	EAX,00C4H
		JE	PRINT_VAR_EBX

	CALL	IS_L
	JE	PRINT_VAR_EBX

	JMP	PRINT_VAR_BX

;
;
;
STORE_SI:
	MOV	AX,'SI'
	MOV	[STORE_REG],AX
		MOV	[STORE_REG.BT1],AX
		MOV	[STORE_REG.BT2],AX
	CALL	STORE
	MOV	AX,'BX'
	MOV	[STORE_REG],AX
		MOV	[STORE_REG.BT1],AX
		MOV	[STORE_REG.BT2],AX
	RET


;
;	ECX:node pnt to type
;

STORE:
	CMP	ECX,100H
	JB	ERR_TYPE

	MOV	ECX,[ECX+NODE2]

		CMP	ECX,100H
		JB	STORE.NBT
		MOV	EAX,[ECX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'bt'+8080H
		JE	STORE.BT
STORE.NBT:
	CMP	ECX,0001H
	JE	STORE.B
	CMP	ECX,0081H
	JE	STORE.B
	CMP	ECX,0002H
	JE	STORE.W
	CMP	ECX,0082H
	JE	STORE.W

	CMP	ECX,0004H
	JE	STORE.L
	CMP	ECX,0084H
	JE	STORE.L

		CMP	ECX,00C4H
		JE	STORE.L

	CALL	IS_L
	JE	STORE.L

	JMP	STORE.W

STORE.B:
	CALL	PRINT_PNT_BL
	JMP	STORE.R

STORE.L:
	CALL	PRINT_PNT_EBX
	JMP	STORE.R

STORE.W:
	CALL	PRINT_PNT_BX
	JMP	STORE.R

;STORE.BT:
;	CALL	PRINT
;	DB	'	PUSH	EBX',0DH,0AH,'$'
;
;	MOV	EBX,[ECX+NODE3]	;bit offset
;	PUSH	EBX
;
;	CALL	PRINT
;	DB	'	AND	EBX,1',0DH,0AH
;	DB	'	SHL	EBX,%L',0DH,0AH,'$'
;
;	POP	EBX
;	MOV	ECX,EBX
;	MOV	EBX,1
;	SHL	EBX,CL
;	NOT	EBX
;
;	CALL	PRINT
;	DB	'	MOV	EAX,[E'
;STORE_REG.BT1:
;	DB	'SI]',0DH,0AH
;	DB	'	AND	EAX,%L',0DH,0AH
;	DB	'	OR	EAX,EBX',0DH,0AH
;	DB	'	MOV	[E'
;STORE_REG.BT2:
;	DB	'SI],EAX',0DH,0AH,'$'
;
;	CALL	PRINT
;	DB	'	POP	EBX',0DH,0AH,'$'
;
;	JMP	STORE.R
;
;STORE.R:
;	RET

STORE.BT:
	CALL	PRINT
	DB	'	PUSH	EBX',0DH,0AH,'$'

	MOV	EBX,[ECX+NODE3]	;bit offset
	PUSH	EBX

	CALL	PRINT
	DB	'	AND	EBX,1',0DH,0AH
	DB	'	SHL	EBX,%L',0DH,0AH,'$'

	POP	EBX
	MOV	ECX,EBX
	MOV	EBX,1
	SHL	EBX,CL
	NOT	EBX

	CALL	PRINT
	DB	'	MOV	EAX,[E'
	DB	'$'

	PUSHAD
	MOV	EBX,STORE_REG.BT1
	CALL	PUT_STRZ
	POPAD

	CALL	PRINT
	DB	']',0DH,0AH
	DB	'	AND	EAX,%L',0DH,0AH
	DB	'	OR	EAX,EBX',0DH,0AH
	DB	'	MOV	[E'
	DB	'$'

	PUSHAD
	MOV	EBX,STORE_REG.BT2
	CALL	PUT_STRZ
	POPAD

	CALL	PRINT
	DB	'],EAX',0DH,0AH,'$'

	CALL	PRINT
	DB	'	POP	EBX',0DH,0AH,'$'

	JMP	STORE.R

STORE.R:
	RET


;
;
;
LOAD_SI:
	MOV	AX,'SI'
	MOV	[LOAD_REG],AX
	MOV	[LOAD_XREG],AX
		MOV	[LOAD_REG.BT],AX
	CALL	LOAD
	MOV	AX,'BX'
	MOV	[LOAD_REG],AX
	MOV	[LOAD_XREG],AX
		MOV	[LOAD_REG.BT],AX
	RET

;
;	ECX:node pnt to type
;
LOAD:
	CMP	ECX,100H
	JB	LOAD.R

	MOV	EBX,[ECX+NODE1]

	MOV	ECX,[ECX+NODE2]

		jmp	LOAD_PNT	;test

	CMP	ECX,0001H
	JE	LOAD.UCHAR
	CMP	ECX,0081H
	JE	LOAD.CHAR

	CMP	ECX,0002H
	JE	LOAD.USHORT
	CMP	ECX,0082H
	JE	LOAD.SHORT

	CMP	ECX,0004H
	JE	LOAD.LONG
	CMP	ECX,0084H
	JE	LOAD.LONG

		CMP	ECX,00C4H
		JE	LOAD.LONG

		mov	ebx,[ecx+NODE1]
		mov	ax,[ebx]
		cmp	ax,'['
		je	load.PAR

	CALL	IS_L
	JE	LOAD.ULONG

	JMP	LOAD.USHORT

LOAD.PROMOTE:
	CALL	PROMOTE

LOAD.PAR:

LOAD.R:
	RET

;

LOAD.UCHAR:
	;CALL	PRINT_UC_PNT
	;MOV	ECX,[TYPE_UINT]
	;JMP	LOAD.R
LOAD.CHAR:
	;CALL	PRINT_SC_PNT
	;MOV	ECX,[TYPE_INT]
	;JMP	LOAD.R

	CALL	PRINT_BL_PNT
	JMP	LOAD.PROMOTE

LOAD.USHORT:
	;CALL	PRINT_US_PNT
	;MOV	ECX,[TYPE_UINT]
	;JMP	LOAD.R

LOAD.SHORT:
	;CALL	PRINT_SS_PNT
	;MOV	ECX,[TYPE_INT]
	;JMP	LOAD.R


	CALL	PRINT_BX_PNT
	JMP	LOAD.PROMOTE


LOAD.ULONG:
LOAD.LONG:
	CALL	PRINT_EBX_PNT

	JMP	LOAD.R

;
;
;

CHK2:
	PUSH	ESI
	PUSH	EBX

	PUSH	ESI
	MOV	ESI,[ESI+NODE2]
	CALL	CHK1
	MOV	AH,AL
	POP	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	CHK1

	POP	EBX
	POP	ESI
	RET

;
;	>AL:(10H:number)/(40H:var)/(80H:others)
;

CHK1:
	MOV	EBX,[ESI+NODE1]
	MOV	BX,[EBX]
	CMP	BX,'.'
	JE	CHK1.E0
	CMP	BX,'['
	JE	CHK1.D0
	CMP	BX,'""'
	JE	CHK1.C0
	MOV	AL,BL
	CALL	IS_NUMBER
	JE	CHK1.10

	MOV	AL,BL
	CALL	IS_CCHR_F
	JE	CHK1.40
	JMP	CHK1.80

CHK1.40:
	MOV	AL,40H
	RET

CHK1.80:
	MOV	AL,80H
	RET

CHK1.10:
	MOV	AL,10H
	RET

CHK1.C0:
	MOV	AL,0C0H
	RET
CHK1.D0:
	MOV	AL,0D0H
	RET

CHK1.E0:
	MOV	AL,0E0H
	RET
;
;
;
PRINT_VAR_BL:
	MOV	EAX,STR_BL
	JMP	PRINT_VAR_REG

PRINT_VAR_BX:
	MOV	EAX,STR_BX
	JMP	PRINT_VAR_REG

PRINT_VAR_EDI:
	MOV	EAX,STR_EDI
	JMP	PRINT_VAR_REG
PRINT_VAR_EBX:
	MOV	EAX,STR_EBX
	JMP	PRINT_VAR_REG

PRINT_VAR_AX:
	MOV	EAX,STR_AX
	JMP	PRINT_VAR_REG

;	EBX name node
PRINT_VAR_REG:
	MOV	[REG_NAME],EAX

	PUSH	EBX
	CALL	PRINT
	DB	'	MOV	[%n],%r','$'
	CALL	PUT_CNAME
	CALL	PUT_CRLF

	RET

PRINT_PNT_BL:
	MOV	EAX,STR_BL
	JMP	PRINT_PNT_REG
PRINT_PNT_BX:
	MOV	EAX,STR_BX
	JMP	PRINT_PNT_REG
PRINT_PNT_EBX:
	MOV	EAX,STR_EBX
	JMP	PRINT_PNT_REG
;
;
;
PRINT_UC_PNT:
	MOV	EAX,STR_EBX
	MOV	DL,'Z'
	MOV	EBX,STR_BYTE

	JMP	PRINT_XREG_PNT
PRINT_SC_PNT:
	MOV	EAX,STR_EBX
	MOV	DL,'S'
	MOV	EBX,STR_BYTE

	JMP	PRINT_XREG_PNT
PRINT_US_PNT:
	MOV	EAX,STR_EBX
	MOV	DL,'Z'
	MOV	EBX,STR_WORD

	JMP	PRINT_XREG_PNT
PRINT_SS_PNT:
	MOV	EAX,STR_EBX
	MOV	DL,'S'
	MOV	EBX,STR_WORD

	JMP	PRINT_XREG_PNT


;PRINT_XREG_PNT:
;	PUSH	DWORD [PRINT_ARG]
;
;	MOV	[REG_NAME],EAX
;	MOV	[PRINT_ARG],EBX
;	MOV	[LOAD_XREG.V],DL
;	CALL	PRINT
;	DB	'	MOV'
;LOAD_XREG.V:
;	DB	'SX	%r,%0 [!'
;LOAD_XREG:
;	DB	'BX$'
;
;		CMP	DWORD [USE_OFFSET],0
;		JE	LOAD_XREG.10
;
;		PUSH	EBX
;		MOV	EBX,[USE_OFFSET]
;		CALL	PRINT
;		DB	'+%L$'
;		POP	EBX
;
PRINT_XREG_PNT:
	PUSH	DWORD [PRINT_ARG]

	MOV	[REG_NAME],EAX
	MOV	[PRINT_ARG],EBX
	MOV	[LOAD_XREG.V],DL
	CALL	PRINT
	DB	'	MOV'
	DB	'$'

	PUSHAD
	MOV	EBX,LOAD_XREG.V
	CALL	PUT_STRZ
	POPAD

	CALL	PRINT
	DB	'	%r,%0 [!'
	DB	'$'

	PUSHAD
	MOV	EBX,LOAD_XREG
	CALL	PUT_STRZ
	POPAD

		CMP	DWORD [USE_OFFSET],0
		JE	LOAD_XREG.10

		PUSH	EBX
		MOV	EBX,[USE_OFFSET]
		CALL	PRINT
		DB	'+%L$'
		POP	EBX

LOAD_XREG.10:
	CALL	PRINT
	DB	']',0DH,0AH,'$'

	POP	DWORD [PRINT_ARG]
	RET





;
;
;
PRINT_BL_PNT:
	MOV	EAX,STR_BL
	JMP	PRINT_REG_PNT
PRINT_BX_PNT:
	MOV	EAX,STR_BX
	JMP	PRINT_REG_PNT
PRINT_EBX_PNT:
	MOV	EAX,STR_EBX
	JMP	PRINT_REG_PNT
;
;
;
PRINT_BL_VAR:
	MOV	EAX,STR_BL
	JMP	PRINT_REG_VAR

PRINT_BX_VAR:
	MOV	EAX,STR_BX
	JMP	PRINT_REG_VAR

PRINT_EDI_VAR:
	MOV	EAX,STR_EDI
	JMP	PRINT_REG_VAR

PRINT_EBX_VAR:
	MOV	EAX,STR_EBX
	JMP	PRINT_REG_VAR

PRINT_AX_VAR:
	MOV	EAX,STR_AX
	JMP	PRINT_REG_VAR

;PRINT_REG_PNT:
;	MOV	[REG_NAME],EAX
;	CALL	PRINT
;	DB	'	MOV	%r,[!'
;LOAD_REG:
;	DB	'BX$'
;
;		CMP	DWORD [USE_OFFSET],0
;		JE	LOAD_REG.10
;
;		PUSH	EBX
;		MOV	EBX,[USE_OFFSET]
;		CALL	PRINT
;		DB	'+%L$'
;		POP	EBX
;
;LOAD_REG.10:
;	CALL	PRINT
;	DB	']',0DH,0AH,'$'
;	RET

PRINT_REG_PNT:
	MOV	[REG_NAME],EAX
	CALL	PRINT
	DB	'	MOV	%r,[!'
	DB	'$'

	PUSHAD
	MOV	EBX,LOAD_REG
	CALL	PUT_STRZ
	POPAD

		CMP	DWORD [USE_OFFSET],0
		JE	LOAD_REG.10

		PUSH	EBX
		MOV	EBX,[USE_OFFSET]
		CALL	PRINT
		DB	'+%L$'
		POP	EBX

LOAD_REG.10:
	CALL	PRINT
	DB	']',0DH,0AH,'$'
	RET





;PRINT_PNT_REG:
;	MOV	[REG_NAME],EAX
;	CALL	PRINT
;	DB	'	MOV	[!'
;STORE_REG:
;	DB	'SI],%r',0DH,0AH,'$'
;	RET

PRINT_PNT_REG:
	MOV	[REG_NAME],EAX
	CALL	PRINT
	DB	'	MOV	[!'
	DB	'$'

	PUSHAD
	MOV	EBX,STORE_REG
	CALL	PUT_STRZ
	POPAD

	CALL	PRINT
	DB	'],%r',0DH,0AH,'$'
	RET



PRINT_REG_VAR:
	MOV	[REG_NAME],EAX

	push	ebx
	call	print
	db	'	MOV	%r,[%n]','$'
	CALL	PUT_CNAME
	CALL	PUT_CRLF

	ret

;
;
;

;
;
;

PRINT_CRLF:
	CALL	PRINT
	DB	0DH,0AH,'$'
	RET



