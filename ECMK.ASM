



;
OUTC:
	CMP	BYTE [FLG.Z],0
	JE	OUTC.R

	PUSHAD
	CALL	PUTCHR
	POPAD
OUTC.R:
	RET



;



;
;PRINT_CRLF:
PUT_CRLF:
	CALL	PRINT
	DB	0DH,0AH,'$'
	RET

;
PUT_CNAME:
	CMP	BYTE [FLG.N],0
	JE	PUT_CNAME.R

	PUSH	EBX
	CALL	PRINT
	DB	';%s','$'

PUT_CNAME.R:
	RET




;
CHECKT:
	PUSH	ESI
	MOV	EDI,CHECKT_WORK
	PUSH	EDI
	CALL	CHECKT2
	XOR	EAX,EAX
	STOSW
	POP	EDI
	POP	ESI
	RET

CHECKT2:
	DEC	EDX
	JS	CHECKT.ZERO

	CMP	ESI,100H
	JB	CHECKT.SCALAR

	MOV	EAX,[ESI+NODE1]
	MOV	AX,[EAX]
	CALL	IS_NUMBER
	JE	CHECKT.NUM
	CALL	IS_CCHR_F
	JE	CHECKT.NAME
	CMP	AX,'='
	JE	CHECKT.BIN

	XOR	EAX,EAX
	STOSW
	RET

CHECKT.NUM:
	MOV	AX,'00'
	STOSW
	RET

CHECKT.NAME:
	MOV	AX,'__'
	STOSW
	RET

CHECKT.BIN:
	STOSW

	PUSH	ESI
	PUSH	EDX
	MOV	ESI,[ESI+NODE2]
	CALL	CHECKT2
	POP	EDX
	POP	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	CHECKT2
	RET

CHECKT.SCALAR:
	MOV	AX,'SS'
	STOSW
	RET

CHECKT.ZERO:
	MOV	AX,'##'
	STOSW
	RET
;
;


MK_ADRS_L:
	MOV	BYTE [ADRS_L],1
	JMP	MK_L

MK_REF_L:
	PUSH	ESI
	MOV	ESI,[ESI+NODE2]
	CALL	MK_REF
	POP	ESI
	RET

MK_REF_R:
	PUSH	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	MK_REF
	POP	ESI
	RET

MK_L:
	PUSH	ESI
	MOV	ESI,[ESI+NODE2]
	CALL	MK
	POP	ESI
	RET

MK_R:
	PUSH	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	MK
	POP	ESI
	RET

;
;	ecx:1/2/4 size
;

MK_CONST:
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]

	CMP	AX,'()'
	JE	MK_CONST.CAST

	CMP	AX,'+'
	JE	MK_CONST.PLUS
;	CMP	AX,'-'
;	JE	MK_CONST.MINUS

	CMP	AX,'&'
	JE	MK_CONST.ADR

	CMP	AX,'00'
	JE	MK_CONST.NO
	CMP	AX,'""'
	JE	MK_CONST.DQ

	CALL	IS_CCHR_F
	JE	MK_CONST.SYM

MK_CONST.SYM:
	PUSH	ESI
	CALL	PRINT
	DB	'%n$'

	RET

MK_CONST.CAST:
	PUSH	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	MK_CONST
	POP	ESI
	RET

;MK_CONST.MINUS:
MK_CONST.PLUS:
	MOV	EBX,ESI
	JMP	MK_CONST.ADR.ADD


MK_CONST.ADR:
	MOV	EBX,[ESI+NODE2]
	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CALL	IS_CCHR_F
	JE	MK_CONST.ADR.SYM

	CMP	AX,'+'		;for &struct,&ptr
	JE	MK_CONST.ADR.ADD

	CMP	AX,'*'
	JNE	ERR_TYPE
	MOV	EBX,[EBX+NODE2]
	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'+'
	JE	MK_CONST.ADR.ADD

	JMP	ERR_TYPE

MK_CONST.ADR.SYM:
	PUSH	EBX
	CALL	PRINT
	DB	'%n$'

	RET

MK_CONST.ADR.ADD:
	PUSH	EBX

	;	MOV	EBX,[EBX+NODE2]
	;	MOV	EAX,[EBX+NODE1]
	;	MOV	AX,[EAX]
	;	CMP	AX,'*'
	;	JNE	MK_CONST.ADR.ADD.10
	;	MOV	EBX,[EBX+NODE2]
;MK_CONST.ADR.ADD.10:

	MOV	EBX,[EBX+NODE2]
	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CALL	IS_CCHR_F
	JNE	ERR_TYPE

	PUSH	EBX
	CALL	PRINT
	DB	'%n+$'

	POP	EBX
	MOV	EBX,[EBX+NODE3]
	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'00'
	JE	MK_CONST.ADR.ADD.NO

	JMP	ERR_TYPE

MK_CONST.ADR.ADD.NO:
	MOV	EBX,[EBX+NODE4]
	CALL	PRINT
	DB	'%D$'

	RET

MK_CONST.NO:
	MOV	EBX,[ESI+NODE4]

	cmp	ecx,1
	je	mk_const.b
	cmp	ecx,81h
	je	mk_const.b
	cmp	ecx,2
	je	mk_const.w
	cmp	ecx,82h
	je	mk_const.w
	jmp	mk_const.l

mk_const.b:
	call	print
	db	'%B$'
	ret

mk_const.w:
	call	print
	db	'%D$'
	ret

mk_const.l:
		CMP	DWORD [ESI+NODE2],ECX
		JE	MK_CONST.L.20

		CMP	ECX,00C4H
		JNE	MK_CONST.L.20

		OR	EBX,EBX		;int 0 == float 0.0
		JE	MK_CONST.L.20

		CMP	DWORD [ESI+NODE2],100H	;(float)pnt
		JNB	ERR_TYPE

		TEST	ECX,80H
		JE	MK_CONST.L.10

		PUSH	EBX
		CALL	_LTOF
		ADD	ESP,4
		JMP	MK_CONST.L.11
MK_CONST.L.10:
		PUSH	EBX
		CALL	_ULTOF
		ADD	ESP,4
MK_CONST.L.11:
		JMP	MK_CONST.L.20

		JMP	ERR_TYPE

MK_CONST.L.20:
	call	print
	db	'%L$'
	ret

MK_CONST.DQ:
	mov	eax,[type_int]
	and	eax,7fh
	cmp	eax,ecx
;	jne	mk_const.err

	PUSH	ESI
	CALL	PRINT
	;DB	'_%d','$'
		DB	'_%m','$'

	RET

mk_const.err:
	call	disp_con
	db	'err_mk_const$'

	jmp	err_type

;
;
;

MK_REF:
	MOV	BYTE [ADRS_L],0
	JMP	MK

;



;

MK0_REF:
	MOV	BYTE [ADRS_L],0
	JMP	MK0

MK0:
	CALL	IS_OPT
	JNE	MK

	CMP	ESI,100H
	JB	MK

	MOV	BYTE [FLG.MK0],0FFH
	MOV	EAX,[ESI+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'++'
	JE	MK_INC
	CMP	AX,'--'
	JE	MK_DEC
	CMP	AX,'1+'
	JE	MK_INC
	CMP	AX,'1-'
	JE	MK_DEC

	MOV	BYTE [FLG.MK0],0

	JMP	MK

;
;	SI:adrs
;

MK:
;	pushad
;
;	pushad
;	call	disp
;	db	'mk$'
;	popad
;	mov	eax,esi
;	call	disp_ax
;	CALL	LIST_WORD_EXP
;	CALL	LIST_WORD_GLOBAL

;	mov	ebx,[esi+NODE1]
;	mov	al,[ebx]
;	call	putchr_con
;	mov	al,[ebx+1]
;	call	putchr_con
;	mov	al,[ebx+2]
;	call	putchr_con
;
;	popad
;	ret

	CMP	ESI,100H
	JB	MK.E

	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]

;	CMP	AX,'!'
;	JE	MK_NOT

	CMP	AX,'~~'
	JE	MK_MINUS
	CMP	AX,'~'
	JE	MK_NOT
	CMP	AX,'.'
	JE	MK_DOT
	CMP	AX,'()'
	JE	MK_CAST
	CMP	AX,'1+'
	JE	MK_PREINC
	CMP	AX,'1-'
	JE	MK_PREDEC
	CMP	AX,'&'
	JE	MK_ADR
	CMP	AX,'?'
	JE	MK_SEL
	CMP	AX,'**'
	JE	MK_MUL
	CMP	AX,'/'
	JE	MK_DIV
	CMP	AX,'%'
	JE	MK_MOD
	CMP	AX,'&2'
	JE	MK_AND
	CMP	AX,'|'
	JE	MK_OR
	CMP	AX,'^'
	JE	MK_XOR
	CMP	AX,','
	JE	MK_COMMA
	CMP	AX,'""'
	JE	MK_DQ
	CMP	AX,'+'
	JE	MK_ADD
	CMP	AX,'-'
	JE	MK_SUB
	CMP	AX,'<<'
	JE	MK_SHL
	CMP	AX,'>>'
	JE	MK_SHR

	CMP	AX,'+='
	MOV	EBX,PR_ADD_TBL
	JE	MK_LET
	CMP	AX,'-='
	MOV	EBX,PR_SUB_TBL
	JE	MK_LET
	CMP	AX,'*='
	MOV	EBX,PR_MUL_TBL
	JE	MK_LET
	CMP	AX,'/='
	MOV	EBX,PR_DIV_TBL
	JE	MK_LET
	CMP	AX,'%='
	MOV	EBX,PR_MOD_TBL
	JE	MK_LET
	CMP	AX,'|='
	MOV	EBX,PR_OR_TBL
	JE	MK_LET
	CMP	AX,'&='
	MOV	EBX,PR_AND_TBL
	JE	MK_LET
	CMP	AX,'^='
	MOV	EBX,PR_XOR_TBL
	JE	MK_LET
	CMP	AX,'r='
	MOV	EBX,PR_SHR_TBL
	JE	MK_LET
	CMP	AX,'l='
	MOV	EBX,PR_SHL_TBL
	JE	MK_LET

	CMP	AX,'={'
	JE	MK_LET.STRUCT

	CMP	AX,'='
	MOV	EBX,PR_LET_TBL
	JE	MK_LET

	CMP	AX,'++'
	JE	MK_INC
	CMP	AX,'--'
	JE	MK_DEC

	CMP	AX,'*'
	JE	MK_PNT
	CMP	AX,'('
	JE	MK_FNC
;	CMP	AX,'['
;	JE	MK_ARY
	CMP	AX,'00'
	JE	MK_NUM
	CALL	IS_CCHR_F
	JE	MK_VAR
MK.E:
;	RET

	PUSHAD
	PUSH	EAX
	CALL	PUTCHR_CON
	POP	EAX
	MOV	AL,AH
	CALL	PUTCHR_CON
	POPAD
	CALL	DISP_SI_CX

	CALL	DISP_CON
	DB	'?',0DH,0AH,'$'
	JMP	ERR_SYNTAX
	RET

;
;
;
MK_MINUS:
	CMP	BYTE [ADRS_L],0
	JNE	ERR_TYPE

	CALL	MK_REF_L

	MOV	EBX,PR_MINUS_TBL
	CALL	MK_TBL
	RET

PR_MINUS_TBL:
	DD	PR_MINUS.W,PR_MINUS.W
	DD	PR_MINUS.L,PR_MINUS.L
	DD	PR_MINUS.F


;

MK_NOT:
	CMP	BYTE [ADRS_L],0
	JNE	ERR_TYPE

	CALL	MK_REF_L

	MOV	EBX,PR_NOT_TBL
	CALL	MK_TBL
	RET

PR_NOT_TBL:
	DD	PR_NOT.W,PR_NOT.W
	DD	PR_NOT.L,PR_NOT.L
	DD	PR_NOT.F
PR_NOT.W:
	DB	'	NOT	BX',0DH,0AH,0
PR_NOT.L:
	DB	'	NOT	EBX',0DH,0AH,0
PR_NOT.F:
	DB	0

;
;
;
MK_CAST:
	CMP	BYTE [ADRS_L],0
	JNE	ERR_TYPE

	CALL	MK_R		;REF_R
	MOV	EDX,ECX
	MOV	ECX,[ESI+NODE2]

		CALL	CAST_CX_DX	;#

		CMP	ECX,100H
		JNB	MK_CAST.10

			CMP	ECX,00C4H
			JE	MK_CAST.10

		CMP	ECX,0001H
		JE	MK_CAST.20
		CMP	ECX,0081H
		JE	MK_CAST.20
		CMP	ECX,0002H
		JE	MK_CAST.20
		CMP	ECX,0082H
		JE	MK_CAST.20

MK_CAST.10:
	RET

MK_CAST.20:
	AND	ECX,80H
	OR	ECX,0004H
	RET

;
;
;

MK_COMMA:
	CMP	BYTE [ADRS_L],0
	JNE	ERR_TYPE

	CALL	MK_REF_L
	CALL	MK_REF_R
	RET

;

MK_DOT:
	MOV	AL,[ADRS_L]
	PUSH	EAX

	CMP	AL,1
	JA	ERR_TYPE

		CMP	DWORD [ESI+NODE4],1
		JE	MK_DOT.CL

	CALL	MK_REF_L

	MOV	BYTE [ADRS_L],0

	MOV	EBX,[ECX+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'{'
	JNE	ERR_TYPE

	MOV	ECX,[ESI+NODE3]

	MOV	EBX,[ECX+NODE7]
		OR	EBX,EBX
		JE	MK_DOT#0

		POP	EAX
		PUSH	EAX
		OR	AL,AL
		JNE	MK_DOT.05

		CALL	IS_OPT10
		JNE	MK_DOT.05
		MOV	[USE_OFFSET],EBX
		JMP	MK_DOT.20
MK_DOT.05:
	CALL	PRINT
	DB	'	ADD	!BX,%D','$'	;0DH,0AH,'$'

MK_DOT.10:
		;MOV	EBX,ECX
		;CALL	PUT_CNAME
		CALL	PUT_CRLF
MK_DOT.20:
	POP	EAX
	OR	AL,AL
	JNE	MK_DOT.R	;if &

	MOV	ECX,[ECX+NODE2]
	CALL	LOAD_PNT

MK_DOT.R:
	MOV	DWORD [USE_OFFSET],0
	RET

MK_DOT#0:
	CALL	PRINT
	DB	'	;ADD	!BX,0','$'	;0DH,0AH,'$'

		JMP	MK_DOT.10
	RET

MK_DOT.CL:
	POP	EAX

	PUSH	ESI
;	MOV	ESI,[ESI+NODE3]
;	MOV	ESI,[ESI+NODE2]
;	CALL	MK
	POP	ESI

	PUSH	ESI

	MOV	EBX,[ESI+NODE2]
		MOV	ESI,[EBX+NODE1]
		PUSH	ESI
		CALL	CUT_POST_ESI
		PUSH	EAX
	PUSH	EBX
	CALL	PRINT
	DB	'	lea	ebx,%s@@','$'
		POP	EAX
		POP	ESI
		CALL	ADD_POST_ESI

	POP	ESI
	PUSH	ESI

	MOV	EBX,[ESI+NODE3]
		MOV	ESI,[EBX+NODE1]
		PUSH	ESI
		CALL	CUT_POST_ESI
		PUSH	EAX
	PUSH	EBX
	CALL	PRINT
	DB	'%s',0DH,0AH,'$'
		POP	EAX
		POP	ESI
		CALL	ADD_POST_ESI

	POP	ESI

	MOV	ECX,[ESI+NODE3]
	MOV	ECX,[ECX+NODE2]

	RET

;
;
;

MK_PREINC:
	MOV	ECX,STR_ADD
	MOV	EBX,STR_INC
	JMP	MK_PREINCDEC

MK_PREDEC:
	MOV	ECX,STR_SUB
	MOV	EBX,STR_DEC
	JMP	MK_PREINCDEC

;
;
;

MK_INC:
	MOV	ECX,STR_ADD
	MOV	EBX,STR_INC
	JMP	MK_INCDEC

MK_DEC:
	MOV	ECX,STR_SUB
	MOV	EBX,STR_DEC
	JMP	MK_INCDEC

;

MK_PREINCDEC:
	PUSH	EDX
	MOV	EDX,MK_PREINCDEC_TBL
	CALL	MK_INCDEC_SUB
	POP	EDX
	RET

;

MK_INCDEC:
	PUSH	EDX
	MOV	EDX,MK_INCDEC_TBL
	CALL	MK_INCDEC_SUB
	POP	EDX
	RET

;
;
;

MK_INCDEC_SUB:
	CALL	IS_OPT
	JE	MK_INCDEC.OPT

MK_INCDEC.NOPT:
	MOV	EAX,ECX

	PUSH	DWORD [PRINT_ARG]
	PUSH	DWORD [PRINT_ARG+NODE1]

	PUSH	EDX

	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [FLG.MK0]
	MOV	BYTE [FLG.MK0],0

		MOV	EAX,[ESI+NODE2]
		CALL	IS_EDI
		JNE	MK_INCDEC.RGN
		MOV	ECX,[ESI+NODE2]
		JMP	MK_INCDEC.RGE

MK_INCDEC.RGN:
	CALL	MK_ADRS_L
MK_INCDEC.RGE:

	POP	DWORD [FLG.MK0]
	POP	EBX
	POP	EAX

	MOV	[PRINT_ARG],EAX
	MOV	[PRINT_ARG+NODE1],EBX

	MOV	ECX,[ECX+NODE2]

	MOV	EBX,1
	CMP	ECX,0001H
	JE	MK_INCDEC_SUB.B
	CMP	ECX,0081H
	JE	MK_INCDEC_SUB.B
	CMP	ECX,0002H
	JE	MK_INCDEC_SUB.W
	CMP	ECX,0082H
	JE	MK_INCDEC_SUB.W
	CMP	ECX,0004H
	JE	MK_INCDEC_SUB.L
	CMP	ECX,0084H
	JE	MK_INCDEC_SUB.L

		CMP	ECX,00C4H
		JE	MK_INCDEC_SUB.F

		MOV	EDX,1
		MOV	EAX,[ESI+NODE3]
		OR	EAX,EAX
		JE	MK_PREINCDEC.12

		MOV	EDX,[EAX+NODE4]	;no
		JMP	MK_PREINCDEC.12

MK_PREINCDEC.12:
	MOV	EBX,EDX

	call	is_l
	je	mk_incdec_SUB.l


MK_INCDEC_SUB.W:
	MOV	EAX,4
	JMP	MK_INCDEC_SUB.E

MK_INCDEC_SUB.B:
	MOV	EAX,0
	JMP	MK_INCDEC_SUB.E

MK_INCDEC_SUB.L:
	MOV	EAX,8
	JMP	MK_INCDEC_SUB.E

MK_INCDEC_SUB.F:
	MOV	EAX,12
	JMP	MK_INCDEC_SUB.E


MK_INCDEC_SUB.E:
	POP	EDX
	ADD	EDX,EAX
	CALL	[EDX]

	POP	DWORD [PRINT_ARG+NODE1]
	POP	DWORD [PRINT_ARG]

	RET

;
MK_PREINCDEC_TBL:
	DD	MK_PREINCDEC.B
	DD	MK_PREINCDEC.W
	DD	MK_PREINCDEC.L
	DD	MK_PREINCDEC.F
MK_INCDEC_TBL:
	DD	MK_INCDEC.B
	DD	MK_INCDEC.W
	DD	MK_INCDEC.L
	DD	MK_INCDEC.F

;

MK_PREINCDEC.W:
	CALL	PRINT
	DB	'	%0	WORD [!BX],%D',0DH,0AH
	DB	'	MOV	BX,[!BX]',0DH,0AH,'$'
	CALL	PROMOTE
	JMP	MK_INCDEC.R

MK_PREINCDEC.B:
	CALL	PRINT
	DB	'	%0	BYTE [!BX],%D',0DH,0AH
	DB	'	MOV	BL,[!BX]',0DH,0AH,'$'
	CALL	PROMOTE
	JMP	MK_INCDEC.R
	RET

MK_PREINCDEC.L:
		MOV	EAX,[ESI+NODE2]
		CALL	IS_EDI
		JNE	MK_PREINCDEC.L.RGE

		CALL	PRINT
		DB	'	%0	EDI,%D',0DH,0AH
		DB	'	MOV	EBX,EDI',0DH,0AH,'$'
		CALL	PROMOTE
		JMP	MK_INCDEC.R

MK_PREINCDEC.L.RGE:
	CALL	PRINT
	DB	'	%0	DWORD [!BX],%D',0DH,0AH
	DB	'	MOV	EBX,[!BX]',0DH,0AH,'$'
	CALL	PROMOTE
	JMP	MK_INCDEC.R
	RET

MK_PREINCDEC.F:
	CALL	PRINT
	DB	'	call	fpre%0_',0DH,0AH,'$'
	JMP	MK_INCDEC.R
	RET
;

MK_INCDEC.W:
	CALL	PRINT
	DB	'	MOV	AX,[!BX]',0DH,0AH
	DB	'	%0	WORD [!BX],%D',0DH,0AH
	DB	'	MOV	BX,AX',0DH,0AH,'$'
	CALL	PROMOTE
	JMP	MK_INCDEC.R

MK_INCDEC.B:
	CALL	PRINT
	DB	'	MOV	AL,[!BX]',0DH,0AH
	DB	'	%0	BYTE [!BX],%D',0DH,0AH
	DB	'	MOV	BL,AL',0DH,0AH,'$'
	CALL	PROMOTE
	JMP	MK_INCDEC.R

MK_INCDEC.L:
		MOV	EAX,[ESI+NODE2]
		CALL	IS_EDI
		JNE	MK_INCDEC.L.RGN

		CALL	PRINT
		DB	'	MOV	EBX,EDI',0DH,0AH
		DB	'	%0	EDI,%D',0DH,0AH,'$'
		CALL	PROMOTE
		JMP	MK_INCDEC.R

MK_INCDEC.L.RGN:
	CMP	BYTE [FLG.MK0],0
	JNE	MK_INCDEC.L0

	CALL	PRINT
	DB	'	MOV	EAX,[!BX]',0DH,0AH
	DB	'	%0	DWORD [!BX],%D',0DH,0AH
	DB	'	MOV	EBX,EAX',0DH,0AH,'$'
	CALL	PROMOTE
	JMP	MK_INCDEC.R

MK_INCDEC.L0:
	CALL	PRINT
	DB	'	%0	DWORD [!BX],%D',0DH,0AH,'$'
	JMP	MK_INCDEC.R

MK_INCDEC.F:
	CALL	PRINT
	DB	'	call	fpost%0_',0DH,0AH,'$'
	JMP	MK_INCDEC.R

MK_INCDEC.R:
	MOV	BYTE [FLG.MK0],0
	RET

;
MK_INCDEC.OPT:
	CMP	BYTE [FLG.MK0],0
	JE	MK_INCDEC.NOPT

	MOV	EAX,[ESI+NODE2]
	MOV	EAX,[EAX+NODE1]
	MOV	AX,[EAX]
	CALL	IS_CCHR_F
	JNE	MK_INCDEC.NOPT

	MOV	EAX,[ESI+NODE2]
	MOV	EAX,[EAX+NODE2]
	CMP	EAX,100H
	JNB	MK_INCDEC.NOPT
	CMP	EAX,00C4H
	JE	MK_INCDEC.NOPT

	CMP	BYTE [ADRS_L],0
	JNE	ERR_TYPE

	PUSH	DWORD [PRINT_ARG]
	MOV	[PRINT_ARG],EBX

	PUSH	EAX
	CALL	PRINT
	DB	'	%0	$'
	POP	EAX
	CALL	PRINT_VTYPE

	PUSH	DWORD [ESI+NODE2]
	CALL	PRINT
	DB	'[%n]',0DH,0AH,'$'

	MOV	BYTE [ADRS_L],0

	POP	DWORD [PRINT_ARG]

	MOV	ECX,[ESI+NODE2]
	MOV	ECX,[ECX+NODE2]

	MOV	BYTE [FLG.MK0],0
	RET

;
PRINT_VTYPE:
	CMP	EAX,100H
	JNB	PRINT_VTYPE.10
	AND	EAX,0FH
	CMP	EAX,1
	JE	PRINT_VTYPE.B
	CMP	EAX,2
	JE	PRINT_VTYPE.W
	CMP	EAX,4
	JE	PRINT_VTYPE.D

PRINT_VTYPE.B:
	CALL	PRINT
	DB	'BYTE $'
	JMP	PRINT_VTYPE.R

PRINT_VTYPE.W:
	CALL	PRINT
	DB	'WORD $'
	JMP	PRINT_VTYPE.R

PRINT_VTYPE.D:
	CALL	PRINT
	DB	'DWORD $'
	JMP	PRINT_VTYPE.R

PRINT_VTYPE.10:
	CALL	PRINT
	DB	'DWORD ','$'

PRINT_VTYPE.R:
	RET

;	in 386 mode
;	X unsigned short -> unsigned int
;	O -> int

;	ECX type
;	>EDX promoted type (int/uint/ptr)

PROMOTE:
	CMP	ECX,100H
	JNB	PROMOTE.R

		CMP	ECX,00C4H
		JE	PROMOTE.R

	CMP	ECX,0004H
	JE	PROMOTE.R
	CMP	ECX,0084H
	JE	PROMOTE.R

		CALL	IS_L		;%%%EC13
		JNE	PROMOTE.05
		CMP	ECX,0001H
		JE	PROMOTE.UC
		CMP	ECX,0002H
		JE	PROMOTE.US
PROMOTE.05:
	MOV	EDX,ECX
	CALL	SIGN_BIT
	MOV	ECX,[TYPE_UINT]
	OR	ECX,EAX
PROMOTE.CAST:
	CALL	CAST_CX_DX
	JMP	PROMOTE.R

PROMOTE.UC:
PROMOTE.US:
	MOV	EDX,ECX
	MOV	ECX,[TYPE_INT]
	JMP	PROMOTE.CAST

PROMOTE.R:
	RET


;
;
;

MK_SEL:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,2*10H

	CALL	MAKE_LABEL
	MOV	[EBP+W1],EBX
	CALL	MAKE_LABEL
	MOV	[EBP+W2],EBX

	MOV	EBX,[EBP+W1]
	PUSH	ESI
	MOV	ESI,[ESI+NODE2]

	PUSH	DWORD [IF.REV]
	PUSH	DWORD [IF.NOT]
	MOV	EDX,0
	CALL	_IF.MAKE
	POP	DWORD [IF.NOT]
	POP	DWORD [IF.REV]

	POP	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	MK_REF_L
		PUSH	ECX

	MOV	EBX,[EBP+W2]
	CALL	JMP_LABEL

	MOV	EBX,[EBP+W1]
	CALL	PRINT_LABEL

	CALL	MK_REF_R

	PUSH	ECX
	MOV	EBX,[EBP+W2]
	CALL	PRINT_LABEL
	POP	ECX

	;	MOV	ECX,[ESI+NODE4]	;&&&
		MOV	EDX,ECX
		POP	ECX
		CALL	TYPEOF2

	MOV	ESP,EBP
	POP	EBP
	RET

;

MK_SHL:
	CALL	IS_OPT20
	JE	MK_SHL.OPT
MK_SHL.NOPT:

	CALL	MK_2TERM

	MOV	EBX,PR_SHL_TBL
	CALL	MK_TBL
	RET

;
MK_SHL.OPT:
	CALL	IS_NUM_R
	JNE	MK_SHL.NOPT

	CALL	MK_REF_L

	CALL	GET_NUM_R
	PUSH	EBX
	MOV	EBX,PR_SHL_TBL_OPT
	CALL	MK_TBL
	POP	EBX

	CALL	PRINT
	DB	'%D',0DH,0AH,'$'
	RET
;

MK_SHR:
	CALL	IS_OPT20
	JE	MK_SHR.OPT
MK_SHR.NOPT:

	CALL	MK_2TERM

	MOV	EBX,PR_SHR_TBL
	CALL	MK_TBL
	RET

;

MK_SHR.OPT:
	CALL	IS_NUM_R
	JNE	MK_SHR.NOPT

	CALL	MK_REF_L

	CALL	GET_NUM_R
	PUSH	EBX
	MOV	EBX,PR_SHR_TBL_OPT
	CALL	MK_TBL
	POP	EBX

	CALL	PRINT
	DB	'%D',0DH,0AH,'$'
	RET


	CMP	ECX,0002H
	JE	MK_SHR.OPT.UINT
	CMP	ECX,0082H
	JE	MK_SHR.OPT.INT
;	JMP	MK_SHR.NOPT

MK_SHR.OPT.UINT:
	CALL	PRINT
	DB	'	SHR	BX,%D',0DH,0AH,'$'
	RET

MK_SHR.OPT.INT:
	CALL	PRINT
	DB	'	SAR	BX,%D',0DH,0AH,'$'
	RET
;
;
;

MK_OR:
	MOV	EAX,WORD_OR
	CALL	OPT_X_N
MK_OR.NOPT:
	CALL	MK_2TERM

	MOV	EBX,PR_OR_TBL
	CALL	MK_TBL
	RET

;

MK_AND:
	MOV	EAX,WORD_AND
	CALL	OPT_X_N

MK_AND.NOPT:
	CALL	MK_2TERM

	MOV	EBX,PR_AND_TBL
	CALL	MK_TBL
	RET

;
;	? op no
;	(add,sub,and,or,xor)
;
;	EAX WORD_ADD/SUB/AND/OR/XOR

;	add/sub/or/xor ?,0 ->cut
;	and ?,0 ->not cut

OPT_X_N:
	CALL	IS_OPT4
	JNE	OPT_X_N.NOPT

	PUSH	EAX
	CALL	IS_NUM_R
	POP	EAX
	JNE	OPT_X_N.NOPT

		PUSH	EAX
		MOV	EAX,[ESI+NODE3]
		MOV	EAX,[ESI+NODE2]
		CMP	EAX,00C4H
		POP	EAX
		JE	OPT_X_N.NOPT

	POP	EBX		;discard ret.adrs

	PUSH	EAX
	CALL	MK_REF_L
	POP	EAX
	PUSH	DWORD [PRINT_ARG]
	MOV	[PRINT_ARG],EAX

	CALL	GET_NUM_R

	CMP	ECX,0002H
	JE	OPT_X_N.I
	CMP	ECX,0082H
	JE	OPT_X_N.I
	CMP	ECX,0004H
	JE	OPT_X_N.L
	CMP	ECX,0084H
	JE	OPT_X_N.L

	CALL	IS_L
	JE	OPT_X_N.L

OPT_X_N.I:
	CALL	PRINT
	DB	'	%0	BX,%D',0DH,0AH,'$'
	JMP	OPT_X_N.E

OPT_X_N.L:
		CMP	EBX,0
		JNE	OPT_X_N#0E
		CMP	DWORD [PRINT_ARG],WORD_AND
		JE	OPT_X_N#0E
		JMP	OPT_X_N.E

OPT_X_N#0E:
		CMP	DWORD [PRINT_ARG],WORD_ADD
		JNE	OPT_X_N.ADDE
		CMP	EBX,1
		JNE	OPT_X_N.ADDE

		CALL	PRINT
		DB	'	INC	EBX',0DH,0AH,'$'
		JMP	OPT_X_N.E

OPT_X_N.ADDE:
		CMP	DWORD [PRINT_ARG],WORD_SUB
		JNE	OPT_X_N.SUBE
		CMP	EBX,1
		JNE	OPT_X_N.SUBE

		CALL	PRINT
		DB	'	DEC	EBX',0DH,0AH,'$'
		JMP	OPT_X_N.E

OPT_X_N.SUBE:
	CALL	PRINT
	DB	'	%0	EBX,%D',0DH,0AH,'$'

OPT_X_N.E:
	POP	DWORD [PRINT_ARG]

	MOV	EDX,[ESI+NODE3]
	MOV	EDX,[EDX+NODE2]
	CALL	TYPEOF2
	RET

OPT_X_N.NOPT:
	RET

;

MK_XOR:
	MOV	EAX,WORD_XOR
	CALL	OPT_X_N

MK_XOR.NOPT:
	CALL	MK_2TERM

	MOV	EBX,PR_XOR_TBL
	CALL	MK_TBL
	RET

;
CHECK_BITS_PAT:
	PUSH	ECX
	MOV	EBX,0
	MOV	ECX,1
CHECK_BITS_PAT.10:
	CMP	EAX,ECX
	JE	CHECK_BITS_PAT.R
	SHL	ECX,1
	INC	EBX
	CMP	EBX,32
	JNE	CHECK_BITS_PAT.10

	XOR	ECX,ECX	;make nz
	INC	ECX

CHECK_BITS_PAT.R:
	POP	ECX
	RET

;

MK_MUL:
	;CALL	IS_OPT
	CALL	IS_OPT8
	JE	MK_MUL.OPT
MK_MUL.NOPT:
	CALL	MK_2TERM

	MOV	EBX,PR_MUL_TBL
	CALL	MK_TBL
	RET

;

MK_MUL.OPT:
	CALL	IS_NUM_R
	JNE	MK_MUL.NOPT

	CALL	GET_NUM_R

		MOV	EAX,EBX
		CALL	CHECK_BITS_PAT
		JNE	MK_MUL.NOPT

		MOV	EDX,EBX
		JMP	MK_MUL.OPT.10

MK_MUL.OPT.10:
	PUSH	EDX
	CALL	MK_REF_L
	POP	EDX

	CMP	EDX,0		;? * 1
	JE	MK_MUL.OPT.E

	CMP	ECX,0004H
	JE	MK_MUL.OPT.20.L
	CMP	ECX,0084H
	JE	MK_MUL.OPT.20.L

	MOV	EBX,EDX
	CALL	PRINT
	DB	'	SHL	BX,%D',0DH,0AH,'$'
	JMP	MK_MUL.OPT.E

MK_MUL.OPT.20.L:
	MOV	EBX,EDX
	CALL	PRINT
	DB	'	SHL	EBX,%D',0DH,0AH,'$'

MK_MUL.OPT.E:
	MOV	EDX,[ESI+NODE3]
	MOV	EDX,[EDX+NODE2]
	CALL	TYPEOF2
	RET

;

MK_DIV:
	CALL	IS_OPT8
	JE	MK_DIV.OPT

MK_DIV.NOPT:
	CALL	MK_2TERM

	MOV	EBX,PR_DIV_TBL
	CALL	MK_TBL
	RET

;
;	support float !

MK_DIV.OPT:
	CALL	IS_NUM_R
	JNE	MK_DIV.NOPT

	CALL	GET_NUM_R

		MOV	EAX,EBX
		CALL	CHECK_BITS_PAT
		JNE	MK_DIV.NOPT

		MOV	EDX,EBX


MK_DIV.OPT.10:
	PUSH	EDX
	CALL	MK_REF_L
	POP	EDX

	CMP	EDX,0
	JE	MK_DIV.OPT.E

	;assume not "ptr/#"

	CMP	ECX,100H	;ptr/n	error?
	JNB	MK_DIV.OPT.20.UL

	TEST	ECX,80H
	JNE	MK_DIV.OPT.20.L

MK_DIV.OPT.20.UL:
	MOV	EBX,EDX
	CALL	PRINT
	DB	'	SHR	EBX,%D',0DH,0AH,'$'
	JMP	MK_DIV.OPT.E

MK_DIV.OPT.20.L:
	MOV	EBX,EDX
	CALL	PRINT
	DB	'	SAR	EBX,%D',0DH,0AH,'$'
	RET

MK_DIV.OPT.E:
	MOV	EDX,[ESI+NODE3]
	MOV	EDX,[EDX+NODE2]
	CALL	TYPEOF2
	RET

;

MK_MOD:
	CALL	IS_OPT
	JE	MK_MOD.OPT

MK_MOD.NOPT:
	CALL	MK_2TERM

	MOV	EBX,PR_MOD_TBL
	CALL	MK_TBL
	RET

;

MK_MOD.OPT:
	CALL	IS_NUM_R
	JNE	MK_MOD.NOPT

	CALL	GET_NUM_R
	CMP	EBX,1
	JE	MK_MOD.OPT.10
	CMP	EBX,2
	JE	MK_MOD.OPT.10
	CMP	EBX,4
	JE	MK_MOD.OPT.10
	CMP	EBX,8
	JE	MK_MOD.OPT.10
	CMP	EBX,16
	JE	MK_MOD.OPT.10
	CMP	EBX,32
	JE	MK_MOD.OPT.10
	CMP	EBX,64
	JE	MK_MOD.OPT.10
	CMP	EBX,128
	JE	MK_MOD.OPT.10
	CMP	EBX,256
	JE	MK_MOD.OPT.10

	JMP	MK_MOD.NOPT

MK_MOD.OPT.10:
	PUSH	EBX
	CALL	MK_REF_L
	POP	EBX

	;assume not "ptr/#"

MK_MOD.OPT.20.L:
	DEC	EBX
	CALL	PRINT
	DB	'	AND	EBX,%D',0DH,0AH,'$'

MK_MOD.OPT.E:
	MOV	EDX,[ESI+NODE3]
	MOV	EDX,[EDX+NODE2]
	CALL	TYPEOF2
	RET

;
;
;

MK_ADD:
		MOV	AX,'+'
		CALL	OUTC

	MOV	EAX,WORD_ADD
	CALL	OPT_X_N

	PUSH	DWORD [STACKP]

	CALL	MK_2TERM

	MOV	EBX,PR_ADD_TBL
	CALL	MK_TBL

	POP	EBX
	CALL	POPS
	RET

;
POPS:
	XCHG	EBX,[STACKP]

POPS.L:
	CMP	EBX,[STACKP]
	JE	POPS.E
	SUB	EBX,4
	MOV	EAX,[EBX]
	CMP	EAX,#EAX
	JE	POPS#EAX
	CMP	EAX,#ESI
	JE	POPS#ESI

POPS#EAX:
	CALL	PRINT
	DB	'	POP	EAX',0DH,0AH,'$'
	JMP	POPS.L
POPS#ESI:
	CALL	PRINT
	DB	'	POP	ESI',0DH,0AH,'$'
	JMP	POPS.L

POPS.E:
	;MOV	[STACKP],EBX
POPS.R:
	RET

;
;
;

MK_SUB:
	MOV	EAX,WORD_SUB
	CALL	OPT_X_N

	CALL	MK_2TERM

	MOV	EBX,PR_SUB_TBL
	CALL	MK_TBL
	RET

;
;
MK_LET.STRUCT:
	PUSH	DWORD [ADRS_L]

	MOV	EBX,[ESI+NODE4]
	CALL	PRINT
	DB	'	PUSH	%L',0DH,0AH,'$'

	MOV	BYTE [ADRS_L],1;0
	CALL	MK_R
	CALL	PUSH_BX
	MOV	BYTE [ADRS_L],0;1;0
	CALL	MK_L
	CALL	PUSH_BX

	CALL	PRINT
	DB	'	call	_memcpy',0DH,0AH,'$'

		CALL	PRINT
		DB	'	ADD	ESP,12',0DH,0AH,'$'

	POP	DWORD [ADRS_L]

	MOV	AL,[ADRS_L]
	CMP	AL,1
	JE	MK_LET.STRUCT.R
	JA	ERR_TYPE

	MOV	ECX,[ECX+NODE2]

MK_LET.STRUCT.R:
	XOR	AL,AL
	MOV	[ADRS_L],AL
	RET

;
;
;

MK_LET:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,4*1

	MOV	[MK_LET.OP],EBX

	;CALL	IS_OPT
	CALL	IS_OPT1
	JE	MK_LET.OPT
MK_LET.NOPT:
	PUSH	DWORD [MK_LET.OP]

		MOV	EAX,[ESI+NODE2]
		CALL	IS_EDI
		JNE	MK_LET.RGN

		MOV	ECX,[ESI+NODE2]
		JMP	MK_LET.RG

MK_LET.RGN:
	CALL	MK_ADRS_L
MK_LET.RG:
	PUSH	ECX

		MOV	EAX,[STACKP]
		MOV	[EBP-4],EAX

		CALL	IS_OPT
		JNE	MK_LET.20

		CALL	IS_NAME_NUM_R
		JNE	MK_LET.20

		CALL	PRINT
		DB	'	MOV	ESI,EBX',0DH,0AH,'$'

		CALL	MK_REF_R

	;	CALL	IS_NUM_R
	;	JNE	MK_LET.20
	;	CALL	GET_NUM_R
	;	CALL	PRINT
	;	DB	'	MOV	ESI,EBX',0DH,0AH
	;	DB	'	MOV	EBX,%D',0DH,0AH,'$'

		JMP	MK_LET.30


MK_LET.20:
	;JMP	MK_LET.20#

	CALL	PRINT_PUSH_BX
	CALL	MK_REF_R
	CALL	PRINT_POP_SI

	JMP	MK_LET.30

MK_LET.20#:
	MOV	EAX,[STACKP]
	MOV	[EBP-4],EAX

	MOV	EAX,[LEVEL_ESI]
	;MOV	[EBP-4],EAX
	OR	EAX,EAX
	JE	MK_LET.20#A

	CALL	PRINT
	DB	'	PUSH	ESI',0DH,0AH,'$'
	MOV	EBX,[STACKP]
	MOV	DWORD [EBX],#ESI
	ADD	DWORD [STACKP],4

MK_LET.20#A:
	CALL	PRINT
	DB	'	MOV	ESI,EBX',0DH,0AH,'$'
	INC	DWORD [LEVEL_ESI]
	CALL	MK_REF_R

MK_LET.30:
	POP	ECX
	POP	DWORD [MK_LET.OP]

	PUSH	ECX

	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'='
	JE	MK_LET.90

	JMP	MK_LET.40

	MOV	EAX,[ECX+NODE2]
	CMP	EAX,0004H
	JE	MK_LET.40
	CMP	EAX,0084H
	JE	MK_LET.40
	CALL	IS_L
	JE	MK_LET.40

	CALL	PRINT
	DB	'	MOV	AX,BX',0DH,0AH,'$'
	JMP	MK_LET.42

;	'=+',..

MK_LET.40:
	CALL	PRINT
	DB	'	MOV	EAX,EBX',0DH,0AH,'$'

MK_LET.42:
	MOV	EAX,[ECX+NODE2]

	CALL	LOAD_SI
	MOV	EAX,ECX
	CALL	MK_LET.SUB
	JMP	MK_LET.90


;	'='

MK_LET.90:
	POP	ECX

		CMP	BYTE [FLG.A],0
		JE	MK_LET.RGE

		MOV	EAX,[ESI+NODE2]
		CALL	IS_EDI
		JNE	MK_LET.RGE

		CALL	PRINT
		DB	'	MOV	EDI,EBX',0DH,0AH,'$'

		MOV	ECX,[EAX+NODE2]
		JMP	MK_LET.R

MK_LET.RGE:
	CALL	STORE_SI

		JMP	MK_LET.R

	DEC	DWORD [LEVEL_ESI]
	MOV	EBX,[EBP-4]
	CALL	POPS
	JMP	MK_LET.R

	MOV	EAX,[EBP-4]
	OR	EAX,EAX
	JE	MK_LET.R
	CALL	PRINT
	DB	'	POP	ESI',0DH,0AH,'$'
MK_LET.R:
	MOV	ESP,EBP
	POP	EBP
	RET

WOPT_LET1:	DB	'__= ',0

;
MK_LET.OPT2:
	PUSH	ESI
	MOV	EDX,1
	CALL	CHECKT
	MOV	ESI,WOPT_LET1
	POP	ESI

	RET
;

MK_LET.OPT:
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'='
	JNE	MK_LET.NOPT

	;CALL	IS_NUM_R
	;JE	MK_LET.OPTNO

;	?=?

	MOV	EBX,[ESI+NODE2]
	MOV	EBX,[EBX+NODE1]
	MOV	AX,[EBX]
	CALL	IS_CCHR_F
	JE	MK_LET.OPTN	;name=?

		JMP	MK_LET.NOPT

	CMP	AX,'*'
	JE	MK_LET.OPTP	;*??=??

	JMP	MK_LET.NOPT

;	*??=??
MK_LET.OPTP:
	MOV	EBX,[ESI+NODE2]

	MOV	EBX,[EBX+NODE2]
	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CALL	IS_CCHR_F
	JNE	MK_LET.NOPT

	MOV	ECX,[EBX+NODE2]	;(name)-type
		MOV	EAX,[ECX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'['
		JE	MK_LET.NOPT
		CMP	AX,'{'
		JE	ERR_TYPE
		CMP	AX,'('
		JE	MK_LET.NOPT
	;MOV	ECX,[ECX+NODE2]	;'*'
	MOV	ECX,[ECX+NODE2]	;type of *name
	PUSH	ECX
	CALL	MK_REF_R

	MOV	EBX,[ESI+NODE2]
	MOV	EBX,[EBX+NODE2]	;ebx:name node

	PUSH	EBX
	CALL	PRINT
	DB	'	MOV	ESI,[%n]','$'
	CALL	PUT_CNAME
	CALL	PUT_CRLF

	POP	ECX

	CALL	TYPE_SIZE
	CMP	EAX,1
	JE	MK_LET.OPTP.B
	CMP	EAX,2
	JE	MK_LET.OPTP.W
	CMP	EAX,4
	JE	MK_LET.OPTP.D

MK_LET.OPTP.B:
	PUSH	ECX
	CALL	PRINT
	DB	'	MOV	[ESI],BL',0DH,0AH,'$'
	POP	ECX
		JMP	MK_LET.R
	RET

MK_LET.OPTP.W:
	PUSH	ECX
	CALL	PRINT
	DB	'	MOV	[ESI],BX',0DH,0AH,'$'
	POP	ECX
		JMP	MK_LET.R
	RET

MK_LET.OPTP.D:
	PUSH	ECX
	CALL	PRINT
	DB	'	MOV	[ESI],EBX',0DH,0AH,'$'
	POP	ECX
		JMP	MK_LET.R
	RET

;

MK_LET.OPTN:
;	name=?

	MOV	EBX,[ESI+NODE2]
	MOV	ECX,[EBX+NODE2]	;ecx:l-type(name-type)
	;CMP	ECX,100H
	;JNB	MK_LET.NOPT	;except ptr_name=?

;	NOTE maybe struct_name=	<- not happen since '={' in that case

	PUSH	ECX
	CALL	MK_REF_R
	POP	ECX

	MOV	EBX,[ESI+NODE2]	;ebx=node of name

	CMP	ECX,100H
	JNB	MK_LET.OPT.PNT

	CMP	ECX,0001H
	JE	MK_LET.OPT.CHAR
	CMP	ECX,0081H
	JE	MK_LET.OPT.CHAR
	CMP	ECX,0002H
	JE	MK_LET.OPT.INT
	CMP	ECX,0082H
	JE	MK_LET.OPT.INT
	CMP	ECX,0004H
	JE	MK_LET.OPT.LONG
	CMP	ECX,0084H
	JE	MK_LET.OPT.LONG
	CMP	ECX,00C4H
	JE	MK_LET.OPT.LONG

MK_LET.OPT.PNT:
	call	is_l
	je	mk_let.opt.long

MK_LET.OPT.INT:
	PUSH	ECX
	CALL	PRINT_VAR_BX
	POP	ECX
		JMP	MK_LET.R
	RET

MK_LET.OPT.CHAR:
	PUSH	ECX
	CALL	PRINT_VAR_BL
	POP	ECX
		JMP	MK_LET.R
	RET

MK_LET.OPT.LONG:
		MOV	EAX,EBX
		CALL	IS_EDI
		JNE	MK_LET.OPT.LONG.RGN

		CALL	PRINT
		DB	'	MOV	EDI,EBX',0DH,0AH,'$'
		JMP	MK_LET.R

MK_LET.OPT.LONG.RGN:
	PUSH	ECX
	CALL	PRINT_VAR_EBX
	POP	ECX
		JMP	MK_LET.R
	RET




;

MK_TBL:
	PUSH	DWORD [MK_LET.OP]

	MOV	[MK_LET.OP],EBX
	MOV	EAX,ECX
	CALL	MK_LET.SUB

	POP	DWORD [MK_LET.OP]
	RET

;
;	ECX:type
;	>EAX:size
;

TYPE_SIZE:
	CMP	ECX,100H
	JNB	TYPE_SIZE.10

	MOV	EAX,ECX
	AND	EAX,0FH;7FH
	RET

TYPE_SIZE.10:
	MOV	EAX,4
	RET


;
;
;
IS_NAME_NUM_R:
	CALL	IS_NUM_R
	JE	IS_NAME_NUM_R.R
	CALL	IS_NAME_R

IS_NAME_NUM_R.R:
	RET

;
;	EAX:type
;

MK_LET.SUB:
	MOV	EBX,0
	CMP	EAX,0002H
	JE	MK_LET.SUB.10
	INC	BL
	CMP	EAX,0082H
	JE	MK_LET.SUB.10
	INC	BL
	CMP	EAX,0004H
	JE	MK_LET.SUB.10
	INC	BL
	CMP	EAX,0084H
	JE	MK_LET.SUB.10

		INC	BL
		CMP	EAX,00C4H
		JE	MK_LET.SUB.10

	CMP	EAX,0001H	;inner error
	JE	ERR_TYPE
	CMP	EAX,0081H
	JE	ERR_TYPE

	MOV	BL,0
	CALL	IS_L
	JNE	MK_LET.SUB.10
	MOV	BL,2

MK_LET.SUB.10:
	PUSH	DWORD [PRINT_ARG]

	SHL	EBX,2
	ADD	EBX,[MK_LET.OP]
	MOV	EBX,[EBX]
	MOV	[PRINT_ARG],EBX
	CALL	PRINT
	DB	'%0','$'

	POP	DWORD [PRINT_ARG]
	RET





;

PR_LET_TBL:
	DD	PR_LET,PR_LET,PR_LET,PR_LET	;dummy



;
;
;

PR_ADD_TBL:DD	PR_ADD.W,PR_ADD.W,PR_ADD.L,PR_ADD.L
	DD	PR_ADD.F

PR_ADD.W:DB	'	ADD	BX,AX',0DH,0AH,0

PR_ADD.L:DB	'	ADD	EBX,EAX',0DH,0AH,0

PR_ADD.F:DB	'	call	fadd_',0DH,0AH,0

;

PR_SUB_TBL:DD	PR_SUB.W,PR_SUB.W,PR_SUB.L,PR_SUB.L
	DD	PR_SUB.F

PR_SUB.W:DB	'	SUB	BX,AX',0DH,0AH,0
PR_SUB.L:DB	'	SUB	EBX,EAX',0DH,0AH,0
PR_SUB.F:DB	'	call	fsub_',0DH,0AH,0
;

PR_MUL_TBL:DD	PR_MUL.W,PR_MUL.W,PR_MUL.L,PR_MUL.L
	DD	PR_MUL.F

PR_MUL.W:
	DB	'	IMUL	BX',0DH,0AH
	DB	'	MOV	BX,AX',0DH,0AH,0

PR_MUL.L:
	DB	'	IMUL	EBX',0DH,0AH
	DB	'	MOV	EBX,EAX',0DH,0AH,0

PR_MUL.F:
	DB	'	call	fmul_',0DH,0AH,0

;

PR_DIV_TBL:DD	PR_DIV.US,PR_DIV.S,PR_DIV.UL,PR_DIV.L
	DD	PR_DIV.F

PR_DIV.US:
	DB	'	call	udiv_',0DH,0AH,0
PR_DIV.S:
	DB	'	call	idiv_',0DH,0AH,0
PR_DIV.UL:
	DB	'	call	udiv.l_',0DH,0AH,0
PR_DIV.L:
	DB	'	call	idiv.l_',0DH,0AH,0

PR_DIV.F:
	DB	'	call	fdiv_',0DH,0AH,0
;

PR_MOD_TBL:
	DD	PR_MOD.US,PR_MOD.S,PR_MOD.UL,PR_MOD.L
	DD	PR_MOD.F

PR_MOD.US:
	DB	'	call	umod_',0DH,0AH,0
PR_MOD.S:
	DB	'	call	imod_',0DH,0AH,0
PR_MOD.UL:
	DB	'	call	umod.l_',0DH,0AH,0
PR_MOD.L:
	DB	'	call	imod.l_',0DH,0AH,0
PR_MOD.F:
	DB	'	call	fmod_',0DH,0AH,0	;??

;

PR_OR_TBL:
	DD	PR_OR.W,PR_OR.W,PR_OR.L,PR_OR.L
	DD	PR_OR.F
PR_OR.W:
	DB	'	OR	BX,AX',0DH,0AH,0
PR_OR.L:
	DB	'	OR	EBX,EAX',0DH,0AH,0
PR_OR.F:
	DB	0
;

PR_AND_TBL:
	DD	PR_AND.W,PR_AND.W,PR_AND.L,PR_AND.L
	DD	PR_AND.F

PR_AND.W:
	DB	'	AND	BX,AX',0DH,0AH,0
PR_AND.L:
	DB	'	AND	EBX,EAX',0DH,0AH,0
PR_AND.F:
	DB	0
;

PR_XOR_TBL:
	DD	PR_XOR.W,PR_XOR.W,PR_XOR.L,PR_XOR.L
	DD	PR_XOR.F
PR_XOR.W:
	DB	'	XOR	BX,AX',0DH,0AH,0
PR_XOR.L:
	DB	'	XOR	EBX,EAX',0DH,0AH,0
PR_XOR.F:
	DB	0
;

PR_SHR_TBL:
	DD	PR_SHR.US,PR_SHR.S,PR_SHR.UL,PR_SHR.L
	DD	PR_SHR.F
PR_SHR.US:
	DB	'	call	shr.w',0DH,0AH,0
PR_SHR.S:
	DB	'	call	sar.w',0DH,0AH,0
PR_SHR.UL:
	DB	'	call	shr.l',0DH,0AH,0
PR_SHR.L:
	DB	'	call	sar.l',0DH,0AH,0
PR_SHR.F:
	DB	'	call	sar_f',0DH,0AH,0
	DB	0
;
PR_SHR_TBL_OPT:
	DD	PR_SHR.US_OPT
	DD	PR_SHR.S_OPT
	DD	PR_SHR.UL_OPT
	DD	PR_SHR.L_OPT
	DD	PR_SHR.F_OPT
PR_SHR.US_OPT:
	DB	'	shr	bx,',0
PR_SHR.S_OPT:
	DB	'	sar	bx,',0
PR_SHR.UL_OPT:
	DB	'	shr	ebx,',0
PR_SHR.L_OPT:
	DB	'	sar	ebx,',0
PR_SHR.F_OPT:
	DB	'	call	sarf_',0
	DB	0

;
PR_SHL_TBL_OPT:
	DD	PR_SHL.W_OPT
	DD	PR_SHL.W_OPT
	DD	PR_SHL.D_OPT
	DD	PR_SHL.D_OPT
	DD	PR_SHL.F_OPT

PR_SHL.W_OPT:
	DB	'	shl	bx,',0
PR_SHL.D_OPT:
	DB	'	shl	ebx,',0
PR_SHL.F_OPT:
	DB	'	call	shl_f',0
	DB	0
;

PR_SHL_TBL:
	DD	PR_SHL.W,PR_SHL.W,PR_SHL.L,PR_SHL.L
	DD	PR_SHL.F
PR_SHL.W:
	DB	'	call	shl.w',0DH,0AH,0
PR_SHL.L:
	DB	'	call	shl.l',0DH,0AH,0
PR_SHL.F:
	DB	'	call	shl_f',0DH,0AH,0
	DB	0
;
;
;

MK_PNT:
	MOV	AL,[ADRS_L]
	OR	AL,AL
	JE	MK_R_PNT

	CMP	AL,1
	JA	ERR_TYPE

	XOR	AL,AL
	MOV	[ADRS_L],AL

	CALL	MK_L
	;CALL	SCALE
	RET

SCALE:
	PUSH	ESI

	MOV	ESI,[ESI+NODE2]

	MOV	EAX,[ESI+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'+'
	JNE	SCALE.N

	MOV	EBX,[ESI+NODE3]
	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'**'
	JNE	SCALE.N

	MOV	EBX,[ESI+NODE3]
	MOV	EBX,[EBX+NODE3]
	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'00'
	JNE	SCALE.N
	MOV	EAX,[EBX+NODE4]
	CMP	EAX,4
	JNE	SCALE.N

	PUSH	ESI
	MOV	ESI,[ESI+NODE3]
	MOV	ESI,[ESI+NODE2]
	CALL	MK_REF
	POP	ESI

	PUSH	ESI
	MOV	ESI,[ESI+NODE2]
	CALL	MK_REF
	POP	ESI

	CALL	PRINT
	DB	'	LEA	EBX,EBX[EAX*4]',0DH,0AH,'$'

	POP	ESI
SCALE.R:
	RET

SCALE.N:
	POP	ESI
	CALL	MK_L
	RET


MK_R_PNT:
	CALL	MK_REF_L
	;CALL	SCALE

	CMP	ECX,100H
	JB	MK_R_PNT.ERR

	MOV	ECX,[ECX+NODE2]
	CMP	ECX,100H
	JB	MK_R_PNT.10

	MOV	EBX,[ECX+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'['
	JE	MK_R_PNT.ARY
	CMP	AX,'{'
	JE	MK_R_PNT.STRUCT
	CMP	AX,'('
	JE	MK_R_PNT.FUNC
MK_R_PNT.10:
	CALL	LOAD_PNT
	RET

MK_R_PNT.STRUCT:
	RET

MK_R_PNT.ARY:
	RET

MK_R_PNT.FUNC:
	RET

;
MK_R_PNT.ERR:
	CALL	DISP_CON
	DB	'mk_r_pnt.err$'
	JMP	ERR_TYPE

;
;
;
MK_FNC_SUB:
	CALL	IS_OPT
	JE	MK_FNC_SUB.OPT

MK_FNC_SUB.NOPT:
	PUSH	DWORD [CALLBYNAME]
	PUSH	DWORD [MK_FNC_STRUCT_SIZE]
	PUSH	DWORD [MK_FNC_TYPE]
	PUSH	DWORD [ARG_CNT]

		JMP	MK_FNC_SUB.05
		MOV	EAX,[ESI+NODE1]
		MOV	AX,[EAX]
		CMP	EAX,'{'
		JNE	MK_FNC_SUB.05
		MOV	BYTE [ADRS_L],1
		CALL	MK_REF
		MOV	BYTE [ADRS_L],0
		JMP	MK_FNC_SUB.06
MK_FNC_SUB.05:
	CALL	MK_REF
MK_FNC_SUB.06:
	POP	DWORD [ARG_CNT]
	POP	DWORD [MK_FNC_TYPE]
	POP	DWORD [MK_FNC_STRUCT_SIZE]
	POP	DWORD [CALLBYNAME]

		CMP	ECX,100H
		JB	MK_FNC_SUB.10
		MOV	EAX,[ECX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'{'
		JNE	MK_FNC_SUB.10

	;	JMP	ERR_TYPE
		PUSH	ECX
		PUSH	ESI
		MOV	ESI,ECX	;###
		CALL	SIZEOF
		MOV	EBX,EDX
		CALL	PRINT
		DB	'	MOV	ECX,%L',0DH,0AH
		DB	'	CALL	pushstruct',0DH,0AH,'$'
		POP	ESI
		POP	ECX
		JMP	MK_FNC_SUB.E
		;JMP	ERR_TYPE
MK_FNC_SUB.10:
	PUSH	ECX
	MOV	EAX,ECX
	CALL	PUSH_BX
	POP	ECX

	JMP	MK_FNC_SUB.E

MK_FNC_SUB.OPT:
	MOV	EAX,[ESI+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'00'
	JE	MK_FNC_SUB.20NO
	JMP	MK_FNC_SUB.NOPT

MK_FNC_SUB.20NO:
	MOV	EBX,[ESI+NODE4]
	CALL	PRINT
	DB	'	PUSH	DWORD %D',0DH,0AH,'$'

	MOV	ECX,[ESI+NODE2]	;###

MK_FNC_SUB.E:
	CALL	ADD_ARG_CNT
	RET

;

;
;
;

MK_FNC:
	CMP	BYTE [ADRS_L],0
	;JNE	ERR_TYPE

	MOV	DWORD [ARG_CNT],0

			CALL	STORE_REGISTER

		MOV	CL,0FFH
		cmp	esi,100h
		jb	MK_FNC.05

	MOV	EBX,[ESI+NODE2]	;left
		cmp	ebx,100h
		jb	mk_fnc.05

	MOV	EBX,[EBX+NODE1]
	MOV	AX,[EBX]
	PUSH	EAX
	CALL	IS_CCHR_F
	POP	EAX
	JE	MK_FNC.05

;	call by pnt

	CMP	AX,'*'
	JNE	ERR_TYPE
	MOV	CL,0

MK_FNC.05:
	MOV	[CALLBYNAME],CL

	PUSH	ESI

		MOV	EAX,[ESI+NODE2]	;name		;node '*'
		MOV	EAX,[EAX+NODE2]	;node '('	;
		MOV	EAX,[EAX+NODE2]	;type		;
		OR	CL,CL
		JNE	MK_FNC.06
		MOV	EAX,[EAX+NODE2]
		MOV	EAX,[EAX+NODE2]
MK_FNC.06:
		MOV	[MK_FNC_TYPE],EAX

		MOV	DWORD [MK_FNC_STRUCT_SIZE],0
		PUSH	ECX
		MOV	ECX,EAX

		CMP	ECX,100H
		JB	MK_FNC.09
		MOV	EAX,[ECX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'{'
		JNE	MK_FNC.09

		MOV	ESI,ECX
		CALL	SIZEOF
		MOV	[MK_FNC_STRUCT_SIZE],EDX
		SUB	[LOCAL_LEVEL],EDX

		;	PUSH	EDX
		;	MOV	AX,'__'
		;	CALL	MAKE_WORD1_EXP
		;	MOV	[EBX+NODE2],ECX
		;	MOV	EAX,[LOCAL_LEVEL]
		;	POP	EDX

		MOV	EBX,EDX
		CALL	PRINT
		DB	'	SUB	ESP,%L',0DH,0AH,'$'
MK_FNC.09:
		POP	ECX

	POP	ESI


	;PUSH	ESI
	PUSH	ESI

	PUSH	DWORD [MK_FNC_STRUCT_SIZE]
	PUSH	DWORD [MK_FNC_TYPE]
	PUSH	DWORD [CALLBYNAME]

	MOV	ESI,[ESI+NODE3]	;right
	CMP	ESI,0FFFFFFFFH
	JE	MK_FNC.NOARG

;loop

MK_FNC.10:
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,','
	JNE	MK_FNC.20

	PUSH	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	MK_FNC_SUB
	POP	ESI

	MOV	ESI,[ESI+NODE2]
	JMP	MK_FNC.10	;repeat

;	first arg(last link)

MK_FNC.20:
	CALL	MK_FNC_SUB


;

MK_FNC.NOARG:
	POP	DWORD [CALLBYNAME]
	POP	DWORD [MK_FNC_TYPE]
	POP	DWORD [MK_FNC_STRUCT_SIZE]

	POP	ESI		;node '('

	MOV	DL,[CALLBYNAME]
	OR	DL,DL
	JE	MK_FNC.PNT

;	call by name

MK_FNC.40:
	PUSH	DWORD [ESI+NODE2]	;left
	CALL	PRINT
	DB	'	call	%n',0DH,0AH,'$'

	JMP	MK_FNC.45

MK_FNC.PNT:
		PUSH	DWORD [ARG_CNT]
		PUSH	DWORD [MK_FNC_TYPE]
		PUSH	DWORD [MK_FNC_STRUCT_SIZE]

	MOV	ESI,[ESI+NODE2]	;left
	CALL	MK_REF_L

		POP	DWORD [MK_FNC_STRUCT_SIZE]
		POP	DWORD [MK_FNC_TYPE]
		POP	DWORD [ARG_CNT]

	CALL	PRINT
	DB	'	call	!BX',0DH,0AH,'$'

	JMP	MK_FNC.45

;

MK_FNC.45:
	MOV	ECX,[MK_FNC_TYPE]

	CALL	POPSTRUCT

	MOV	EBX,[ARG_CNT]
	OR	EBX,EBX
	JE	MK_FNC.R

	CALL	PRINT
	;DB	'	DB	83H,0C4H,%D',0DH,0AH,'$'	;D<=7FH
	DB	'	ADD	ESP,%D',0DH,0AH,'$'

MK_FNC.R:
		MOV	BYTE [LOADED_REGISTER_EDI],0
		CALL	LOAD_REGISTER

	MOV	BYTE [ADRS_L],0
	CALL	PROMOTE
	RET

;

POPSTRUCT:
		MOV	EDX,[MK_FNC_STRUCT_SIZE]
		OR	EDX,EDX
		JE	POPSTRUCT.R

		MOV	EBX,[ARG_CNT]
		CALL	PRINT
		DB	'	LEA	ESI,ESP[%L]',0DH,0AH,'$'

		MOV	EBX,[LOCAL_LEVEL]
		NEG	EBX
;		ADD	EBX,[MK_FNC_STRUCT_SIZE]
		CALL	PRINT
		DB	'	LEA	EDI,[EBP-%L]',0DH,0AH,'$'

		MOV	EBX,EDX
		CALL	PRINT
		DB	'	MOV	ECX,%L',0DH,0AH
		DB	'	CALL	popstruct',0DH,0AH,'$'

		MOV	DWORD [ARG_CNT],0
POPSTRUCT.R:
	RET





;
;
;

ADD_ARG_CNT:
		CMP	ECX,100H
		JB	ADD_ARG_CNT.05
		MOV	EAX,[ECX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'{'
		JNE	ADD_ARG_CNT.05
		PUSH	ECX
		PUSH	ESI
		MOV	ESI,ECX
		CALL	SIZEOF
		POP	ESI
		POP	ECX
		MOV	EAX,EDX
		JMP	ADD_ARG_CNT.10

ADD_ARG_CNT.05:
	MOV	EAX,4
	call	is_l
	je	ADD_ARG_CNT.10

	CMP	ECX,0004H
	JE	ADD_ARG_CNT.10
	CMP	ECX,0084H
	JE	ADD_ARG_CNT.10

	MOV	EAX,2
ADD_ARG_CNT.10:
	ADD	[ARG_CNT],EAX

	RET
;
;
;

MK_ADR:
	INC	BYTE [ADRS_L]

	CALL	MK_L
	RET

;
;
;

MK_VAR:
	MOV	AL,[ADRS_L]
	OR	AL,AL
	JE	MK_R_VAR

	CMP	AL,1
	JA	ERR_TYPE
	XOR	AL,AL
	MOV	[ADRS_L],AL

	MOV	EBX,ESI
	CALL	IS_ARRAY_NAME
	JE	MK_VAR_R.ARRAY
	MOV	EBX,ESI
	CALL	IS_ARRAY_NAME
	JE	MK_VAR_R.STRUCT
	MOV	EBX,ESI
	CALL	IS_FUNC_NAME
	JE	MK_VAR_R.FUNC

		CMP	BYTE [FLG.Z],0
		JE	MK_VAR.ZE
		MOV	ECX,ESI
MK_VAR.Z1:
		PUSH	ESI
		CALL	PRINT
		DB	'(&(%n))','$'
		RET

MK_VAR.ZE:
	MOV	EAX,ESI
	CALL	PRINT_LEA_V

	MOV	ECX,ESI
	RET

;

MK_R_VAR:
	MOV	EBX,ESI
	CALL	IS_ARRAY_NAME
	JE	MK_VAR_R.ARRAY
	MOV	EBX,ESI
	CALL	IS_STRUCT_NAME
	JE	MK_VAR_R.STRUCT
	MOV	EBX,ESI
	CALL	IS_FUNC_NAME
	JE	MK_VAR_R.FUNC

	MOV	EBX,ESI
	CALL	LOAD_VAR
	RET

MK_VAR_R.STRUCT:
	JMP	MK_VAR_R_LEA

MK_VAR_R.ARRAY:
	MOV	EAX,[ESI+NODE6]	;static
	OR	EAX,EAX
	;TEST	EAX,1
	JNE	MK_VAR_R.ARRAY.5

	;MOV	EAX,[ESI+NODE7]	;level
	;CMP	EAX,0
	;JG	MK_VAR_R.ARRAY.ARG	;XXX JA

MK_VAR_R.ARRAY.5:
	JMP	MK_VAR_R_LEA

MK_VAR_R.ARRAY.ARG:
	JMP	MK_VAR_R_MOV

MK_VAR_R.FUNC:
	JMP	MK_VAR_R_LEA

;

MK_VAR_R_MOV:
		CMP	BYTE [FLG.Z],0
		JE	MK_VAR_R_MOV.ZE

		PUSH	ESI
		CALL	PRINT
		DB	'(%n)','$'
		MOV	ECX,[ESI+NODE2]
		RET

MK_VAR_R_MOV.ZE:
	MOV	EAX,ESI
	CALL	PRINT_MOV_V

	MOV	ECX,[ESI+NODE2]
	RET


;

MK_VAR_R_LEA:
		CMP	BYTE [FLG.Z],0
		JE	MK_VAR_R_LEA.ZE
		MOV	ECX,[ESI+NODE2]
		JMP	MK_VAR.Z1

MK_VAR_R_LEA.ZE:
		MOV	EAX,ESI
		CALL	IS_EDI
		JE	MK_VAR_R_LEA.RGE

	MOV	EAX,ESI
	CALL	PRINT_LEA_V

MK_VAR_R_LEA.RGE:
	MOV	ECX,[ESI+NODE2]
	RET

;
;
;
PRINT_MOV_V:
	PUSH	EAX

	PUSH	EAX
	CALL	PRINT
	DB	'	MOV	!BX,%v','$'

	POP	EAX
	JMP	PRINT_CN
;
PRINT_LEA_V:
	PUSH	EAX

	PUSH	EAX
	CALL	PRINT
	DB	'	LEA	!BX,[%n]','$'

	POP	EAX

PRINT_CN:
	PUSH	EBX
	MOV	EBX,EAX
	CALL	PUT_CNAME
	CALL	PUT_CRLF
	POP	EBX
	RET

;
;
;

MK_NUM:
	CMP	BYTE [ADRS_L],0
	JNE	ERR_TYPE

		CMP	BYTE [FLG.Z],0
		JE	MK_NUM.ZE

		MOV	EBX,[ESI+NODE4]
		CALL	PRINT
		DB	'%L','$'
		RET
MK_NUM.ZE:

	MOV	EBX,[ESI+NODE4]
	OR	EBX,EBX
	JE	MK_NUM.ZERO

	CALL	PRINT
	DB	'	MOV	EBX,%L',0DH,0AH,'$'

MK_NUM.E:
	MOV	ECX,[ESI+NODE2]
	RET

MK_NUM.ZERO:
	CALL	PRINT
	DB	'	XOR	EBX,EBX',0DH,0AH,'$'
	JMP	MK_NUM.E
;
;
;

MK_DQ:
	PUSH	ESI
	CALL	PRINT
	DB	'	MOV	!BX,_%m',0DH,0AH,'$'

	MOV	AX,'*'
	CALL	MAKE_WORD1_EXP
	MOV	EAX,0001H	;[TYPE_PNT] ####
	MOV	[EBX+NODE2],EAX

	MOV	ECX,EBX
	RET

