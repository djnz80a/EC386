
;
CUT_CAST:
	RET

	MOV	EAX,[ESI+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'()'
	JNE	CUT_CAST.R

	MOV	ESI,[ESI+NODE3]
CUT_CAST.R:
	RET

;
IS_UNDEFOK:
	CMP	BYTE [FLG.U],0FFH
	RET
;
SIZEOF_EE2:
	MOV	AX,[WORD_WORK]
	CMP	AX,'""'
	JE	SIZEOF_EE.DQ

		CALL	EXP
		MOV	ESI,ECX
		CALL	SIZEOF
		RET
;
SIZEOF_EE:
	MOV	AX,[WORD_WORK]
	CMP	AX,'"'
	JE	SIZEOF_EE.DQ

		CALL	EXP_TRM	;%%
		MOV	ESI,ECX
		CALL	SIZEOF
		RET

	CALL	SIZEOF_E2
	CALL	SIZEOF
	RET

SIZEOF_EE.DQ:
	CALL	EXP

	MOV	ESI,[ESI+NODE2]
	CALL	STRLEN_PACK
	MOV	EDX,EAX
	INC	EDX
	RET

;
STRLEN_PACK:
	MOV	ECX,0
	CLD
STRLEN_PACK.10:
	LODSB
	OR	AL,AL
	JE	STRLEN_PACK.R

	INC	ECX
	CMP	AL,0FFH
	JNE	STRLEN_PACK.20
	LODSB
STRLEN_PACK.20:
	JMP	STRLEN_PACK.10

STRLEN_PACK.R:
	MOV	EAX,ECX
	RET

;
;
;

SIZEOF_E2:
	MOV	AX,[WORD_WORK]
	CMP	AX,'*'
	JE	SIZEOF_E2.PNT

SIZEOF_E2.10:

	CALL	SIZEOF_E2.T
SIZEOF_E2.POST:
	MOV	AX,[WORD_WORK]
	CMP	AX,'['
	JE	SIZEOF_E2.ARY
	CMP	AX,'.'
	JE	SIZEOF_E2.DOT
	CMP	AX,'->'
	JE	SIZEOF_E2.ARRAY
	;PUSH	ESI
	;CALL	SIZEOF
	;POP	ESI
	RET

;
SIZEOF_E2.ARRAY:
	CALL	GET_WORD	;skip '->'

	MOV	ESI,[ESI+NODE2]
	JMP	SIZEOF_E2.DOT.0

;

SIZEOF_E2.DOT:
	CALL	GET_WORD	;skip '.'
SIZEOF_E2.DOT.0:
	;MOV	ECX,[ESI+NODE2]
		MOV	ECX,ESI
	CALL	EXP_MEMBER
	CALL	GET_WORD
	JMP	SIZEOF_E2.POST


SIZEOF_E2.ARY:
	PUSH	ESI
	CALL	GET_WORD	;skip '['
	CALL	EXP
	MOV	AX,']'
	CALL	SKIP_WORD
	POP	ESI

	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CALL	IS_CCHR_F
	JNE	SIZEOF_E2.ARY.10
;	MOV	ESI,[ESI+NODE2]
SIZEOF_E2.ARY.10:
	MOV	ESI,[ESI+NODE2]
	JMP	SIZEOF_E2.POST

SIZEOF_E2.PNT:
	CALL	GET_WORD
	CALL	SIZEOF_E2
		JMP	SIZEOF_E2.PNT.10
	MOV	EAX,[ESI+NODE1]
	MOV	AX,[EAX]
	CALL	IS_CCHR_F
	JNE	SIZEOF_E2.PNT.10
	MOV	ESI,[ESI+NODE2]
SIZEOF_E2.PNT.10:
	MOV	ESI,[ESI+NODE2]
	RET

SIZEOF_E2.T:
		CALL	IS_TYPENAME
		JNE	SIZEOF_E2.T.10
		CALL	TYPENAME

		PUSH	EBX
		PUSH	DWORD [NAME_PNT]
		CALL	A_DEF
		POP	DWORD [NAME_PNT]
		POP	EBX
		MOV	[EDI+NODE2],EBX

		MOV	ESI,[ESI+NODE2]	;name
		;CALL	GET_WORD
		RET

SIZEOF_E2.T.10:

	MOV	AX,[WORD_WORK]
	CALL	IS_CCHR_F
	JE	SIZEOF_E2.SYM
	CALL	IS_NUMBER
	JE	SIZEOF_E2.NUM

	CMP	AX,'('
	JE	SIZEOF_E2.PAR
	JMP	ERR_TYPE

SIZEOF_E2.SYM:
	CALL	SEARCH_WORD
	JB	ERR_UNDEF
	CALL	GET_WORD

		push	ebx
		mov	esi,ebx
		call	sizeof	;edx<-size
		pop	ebx

	MOV	ESI,EBX
		MOV	ESI,[ESI+NODE2]
	RET

SIZEOF_E2.NUM:
	JMP	ERR_TYPE

SIZEOF_E2.PAR:
	CALL	GET_WORD
	CALL	SIZEOF_E2
	MOV	AX,')'
	CALL	SKIP_WORD

	MOV	AX,[WORD_WORK]
	CMP	AX,'0'
	JE	SIZEOF_E2.PAR_T
	RET

SIZEOF_E2.PAR_T:
	;MOV	ESI,EBX
	CALL	GET_WORD

	CALL	SIZEOF_E2.POST

	RET

;
;
;

SIZEOF_E:
	JMP	SIZEOF_EE

;	CMP	EBX,100H
	CMP	ESI,100H
	JB	SIZEOF_E.TYPE

	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'['
	JE	SIZEOF_E.ARY
	CMP	AX,'*'
	JE	SIZEOF_E.PNT
	CMP	AX,'{'
	JE	SIZEOF_E.STRUCT
	CMP	AX,'.'
	JE	SIZEOF_E.DOT

	CALL	IS_CCHR_F
	JE	SIZEOF_E.SYM

	JMP	ERR_SIZEOF

SIZEOF_E.TYPE:
	CALL	SIZEOF
	RET

SIZEOF_E.SYM:
	CALL	SIZEOF
	RET

;

SIZEOF_E.PNT:
	CMP	ESI,100H
	JB	ERR_TYPE
	MOV	ESI,[ESI+NODE2]
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CALL	IS_CCHR_F
	JNE	SIZEOF_E.PNT.10
	MOV	ESI,[ESI+NODE2]

SIZEOF_E.PNT.10:
	MOV	ESI,[ESI+NODE2]
	CALL	SIZEOF	;_E

SIZEOF_E.R:
	RET


SIZEOF_E.ARY:
	PUSH	ESI
	CALL	SIZEOF_E
	POP	ESI

	MOV	EBX,[ESI+NODE3]
	MOV	EAX,[EBX+NODE4]
	MUL	EDX
	MOV	EDX,EAX
	RET

SIZEOF_E.STRUCT:
	CALL	SIZEOF
	RET

SIZEOF_E.DOT:
	MOV	ESI,[ESI+NODE3]
	CALL	SIZEOF_E
	RET

;
;
;
NODE_2:
	PUSH	EBX
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	POP	EBX
	RET

;
;	>SI:node '00'
;	>BX:#
;
EXP_CONST:
	CALL	EXP_L
;
EXP_CONST.10:
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
		CMP	AX,'()'
		JE	EXP_CONST.CAST
		CMP	AX,'&'
		JE	EXP_CONST.R
		CMP	AX,'+'
		JE	EXP_CONST.R
	CMP	AX,'00'
	JE	EXP_CONST.NO
	CMP	AX,'""'
	JE	EXP_CONST.DQ
	CALL	IS_CCHR_F
	JE	EXP_CONST.R
	JMP	ERR_TYPE
EXP_CONST.CAST:
	PUSH	ESI
	MOV	ESI,[ESI+NODE3]
	CALL	EXP_CONST.10
	POP	ESI
	RET

EXP_CONST.NO:
	MOV	EBX,[ESI+NODE4]
	RET
EXP_CONST.DQ:

EXP_CONST.R:
	RET

;
;	>BX pnt
;

EXP:
;	PUSHAD
;	CALL	DISP
;	DB	'exp$'
;	POPAD

EXP.0:
	CALL	EXP_L
EXP.05:
	MOV	AL,[WORD_WORK]
	CMP	AL,','
	JE	EXP_COMMA
	RET

EXP_COMMA:
	INC	DWORD [ARG_CNT]

	MOV	AX,','
	MOV	EDX,EXP_L
	CALL	EXP_2TRM_LET_COMMA

	JMP	EXP.05

EXP_L:
	CALL	EXP_Q
EXP_L.10:
	MOV	AX,[WORD_WORK]
	CMP	AX,'='
	MOV	BX,'='
	JE	EXP_LET
	CMP	AX,'+='
	MOV	BX,'+='
	;JE	EXP_LET2
	JE	EXP_LETADD

	CMP	AX,'-='
	MOV	BX,'-='
	;JE	EXP_LET2
	JE	EXP_LETADD

	CMP	AX,'*='
	MOV	BX,'*='
	;JE	EXP_LET2
	JE	EXP_LETX

	CMP	AX,'/='
	MOV	BX,'/='
	;JE	EXP_LET2
	JE	EXP_LETX

	CMP	AX,'%='
	MOV	BX,'%='
	;JE	EXP_LET2
	JE	EXP_LETX

	CMP	AX,'&='
	MOV	BX,'&='
	;JE	EXP_LET2
	JE	EXP_LETX

	CMP	AX,'^='
	MOV	BX,'^='
	;JE	EXP_LET2
	JE	EXP_LETX

	CMP	AX,'|='
	MOV	BX,'|='
	;JE	EXP_LET2
	JE	EXP_LETX

	CMP	WORD [WORD_WORK+2],'='
	JNE	EXP_L.R

	CMP	AX,'<<'
	MOV	BX,'l='
	;JE	EXP_SHL
	JE	EXP_LETX

	CMP	AX,'>>'
	MOV	BX,'r='
	;JE	EXP_SHR
	JE	EXP_LETX

EXP_L.R:
	RET
;
;
;
EXP_PROMOTE:
	MOV	EAX,ECX
	CALL	PROMOTED_TYPE
	MOV	ECX,EAX
	JMP	EXP_PROMOTE.R

	CMP	ECX,100H
	JNB	EXP_PROMOTE.R
	CMP	ECX,00C4H
	JE	EXP_PROMOTE.R

	AND	ECX,0080H
	OR	ECX,0004H

EXP_PROMOTE.R:
	RET

;

CASTIF2.TBL:
	DD	0001H,0004H
	DD	0001H,0084H
	DD	0081H,0004H
	DD	0081H,0084H

	DD	0001H,0002H
	DD	0001H,0082H
	DD	0081H,0002H
	DD	0081H,0082H

	DD	0002H,0004H
	DD	0002H,0084H
	DD	0082H,0004H
	DD	0082H,0084H

;	DD	0001H,00C4H
;	DD	0081H,00C4H
;	DD	0002H,00C4H
;	DD	0082H,00C4H
	DD	0

;
CASTIF2:
	PUSH	ESI

	PUSHAD

	MOV	EAX,ECX
	CALL	PROMOTED_TYPE
	PUSH	EAX
	MOV	EAX,EDX
	CALL	PROMOTED_TYPE
	POP	EBX
	CMP	EAX,EBX

	POPAD
	JE	CASTIF2.R
	JMP	CASTIF2#0

	MOV	ESI,CASTIF2.TBL
CASTIF2.L1:
	CMP	DWORD [ESI],0
	JE	CASTIF2#0

	CMP	[ESI],ECX
	JNE	CASTIF2.05
	CMP	[ESI+4],EDX
	JE	CASTIF2.10
CASTIF2.05:
	ADD	ESI,8
	JMP	CASTIF2.L1

CASTIF2.10:
	JMP	CASTIF2.R

CASTIF2#0:
	POP	ESI
	CALL	CASTIF0
	RET

CASTIF2.R:
	POP	ESI
	RET


;	cast if needed
;	(ECX)EDX
;	node ESI
CASTIF:
	JMP	CASTIF2

CASTIF0:
	CMP	ECX,EDX
	JE	CASTIF.R

	MOV	AX,'()'
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ECX
	MOV	[EBX+NODE3],ESI
	MOV	ESI,EBX

CASTIF.R:
	RET

;
;	'*=','=/','%=','&=','|=','^=','<<=','>>='
;
EXP_LETX:
	CMP	ECX,100H
	JNB	ERR_TYPE

	PUSH	ECX

	CALL	GET_WORD

	MOV	AX,BX
		PUSH	EAX
	CALL	EXP_LINK
		POP	EAX
	PUSH	ESI

		PUSH	ECX
		PUSH	EAX

	CALL	EXP_L
	CALL	COND_TO_ARITH

		POP	EAX
		CMP	AX,'l='
		JE	EXP_LETX.SHL
		CMP	AX,'r='
		JE	EXP_LETX.SHR
		CMP	AX,'%='
		JE	EXP_LETX.MOD
		JMP	EXP_LETX.SHIFTE
EXP_LETX.MOD:
EXP_LETX.SHL:
EXP_LETX.SHR:
		MOV	EDX,ECX
		AND	ECX,80H
		OR	ECX,[TYPE_UINT]
		CALL	CASTIF

		POP	ECX

		JMP	EXP_LETX.SHIFTE.10

EXP_LETX.SHIFTE:
		MOV	EDX,ECX
		POP	ECX
		CALL	CASTIF

EXP_LETX.SHIFTE.10:

	MOV	EDI,ESI
	POP	ESI
	MOV	[ESI+NODE3],EDI

	POP	ECX
	RET

;
EXP_INCDEC:
	MOV	AX,BX
	CALL	EXP_LINK
	CMP	ECX,100H
	JB	EXP_INCDEC.10

	PUSH	ECX
	PUSH	ESI

		MOV	EAX,[ECX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'*'
		JNE	ERR_SYNTAX;TYPE

	MOV	ESI,[ECX+NODE2]
	CALL	SIZEOF
	;CALL	MAKE_WORD_NO	;add _EXP ?
	CALL	MAKE_WORD_NO_EXP	;add _EXP ?

	POP	ESI
	POP	ECX
	MOV	[ESI+NODE3],EBX
EXP_INCDEC.10:
	RET

;
;	'+=','=-'
;
EXP_LETADD:
	CALL	GET_WORD

	MOV	AX,BX	;'=+'
	CALL	EXP_LINK

	PUSH	ECX
	PUSH	ESI
	CALL	EXP_L
	CALL	COND_TO_ARITH
	MOV	EDI,ESI
	MOV	EDX,ECX
	POP	ESI
	POP	ECX

	CMP	ECX,100H
	JB	EXP_LETADD.10

	PUSH	ECX
	PUSH	ESI

	PUSH	EDX
	PUSH	EDI

		MOV	EAX,[ECX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'*'
		JNE	ERR_TYPE

		PUSH	ECX
		PUSH	ESI
		MOV	ESI,[ECX+NODE2]
		CALL	SIZEOF
		POP	ESI
		POP	ECX

	POP	ESI
	POP	ECX
	CALL	EXP_MULTN
	MOV	EDI,ESI

	POP	ESI
	POP	ECX

EXP_LETADD.10:
		PUSH	ESI
		MOV	ESI,EDI
		CALL	CASTIF
		MOV	EDI,ESI
		POP	ESI

	MOV	[ESI+NODE3],EDI
	RET

;	ESI node
;	ECX type
;	EDX #
;	>ESI node
EXP_MULTN:
	PUSH	EDX
	MOV	EDX,ECX
	MOV	ECX,[TYPE_INT]
	CALL	CASTIF
	POP	EDX

	CALL	MAKE_WORD_NO_EXP
	PUSH	EBX

	MOV	AX,'**'
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI

	POP	EAX
	MOV	[EBX+NODE3],EAX

	MOV	ESI,EBX
	RET

;
;EXP_SHL:
;EXP_SHR:

;EXP_LET2:

;
;	'='
;
EXP_LET:
	MOV	AX,BX

		CMP	ECX,100H
		JB	EXP_LET.10
		PUSHAD
		MOV	EBX,[ECX+NODE1]
		MOV	AX,[EBX]
		CMP	AX,'{'
		POPAD
		;JE	ERR_TYPE
		JE	EXP_LET.STRUCT
EXP_LET.10:
	PUSH	EBX

	MOV	EDX,EXP_L	;Q	;EXP_L	;EXP_Q	;EXP
	CALL	EXP_2TRM_LET

	POP	EBX
	CMP	BX,'-='
	JE	EXP_LETSUB
	RET

EXP_LETSUB:
	CMP	EDX,100H
	JNB	ERR_LETSUB
	RET

ERR_LETSUB:
	CALL	DISP_CON
	DB	'error_letsub$',0
	JMP	ERR_TYPE

EXP_LET.STRUCT:
	PUSH	ESI
	PUSH	ECX
	CALL	GET_WORD
	CALL	EXP_L
	MOV	EDI,ESI
	MOV	EDX,ECX

	MOV	EAX,[ECX+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'{'
	JNE	ERR_TYPE

	POP	ECX
	POP	ESI

	MOV	AX,'={'
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI

	MOV	ESI,EBX

	PUSH	ESI
	PUSH	EDI
	PUSH	ECX
	PUSH	EDX
	MOV	ESI,ECX
	CALL	SIZEOF
	MOV	EAX,EDX
	POP	EDX
	POP	ECX
	POP	EDI
	POP	ESI

	PUSH	EAX

	PUSH	ESI
	PUSH	EDI
	PUSH	ECX
	PUSH	EDX
	MOV	ESI,EDX
	CALL	SIZEOF
	MOV	EBX,EDX
	POP	EDX
	POP	ECX
	POP	EDI
	POP	ESI

	POP	EAX

	CMP	EAX,EBX
	JNE	EXP_LET.STRUCT.ERR

	MOV	[ESI+NODE4],EAX		;size
	RET

EXP_LET.STRUCT.ERR:
	CALL	DISP
	DB	'struct size differ$'
	JMP	ERR_TYPE

;
EXP_Q:
	CALL	EXP_OR2
	MOV	AX,[WORD_WORK]
	CMP	AX,'?'
	JE	EXP_QUESTION
	RET
EXP_QUESTION:
		MOV	EAX,[ESI+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'00'
		JNE	EXP_QUESTION.NCALC
		CMP	DWORD [ESI+NODE2],00C4H
		JE	EXP_QUESTION.NCALC

		MOV	EAX,[ESI+NODE4]
		OR	EAX,EAX
		JNE	EXP_QUESTION.L
		JMP	EXP_QUESTION.R

EXP_QUESTION.L:
		CALL	GET_WORD
		CALL	EXP
		CALL	COND_TO_ARITH
		MOV	AX,[WORD_WORK]
		CMP	AX,':'
		JNE	ERR_SYNTAX
		CALL	GET_WORD

		PUSH	ECX
		PUSH	ESI
		CALL	EXP_Q
		POP	ESI
		POP	ECX
		RET

EXP_QUESTION.R:
		CALL	GET_WORD
		CALL	EXP		;discard

		MOV	AX,[WORD_WORK]
		CMP	AX,':'
		JNE	ERR_SYNTAX
		CALL	GET_WORD
		CALL	EXP_Q
		RET

EXP_QUESTION.NCALC:
		CALL	ARITH_TO_COND
		MOV	AX,'?'
		CALL	EXP_LINK
		PUSH	ESI

		CALL	GET_WORD
		CALL	EXP
		CALL	COND_TO_ARITH

	;	MOV	AX,':'
	;	CALL	SKIP_WORD
		MOV	AX,[WORD_WORK]
		CMP	AX,':'
		JNE	ERR_SYNTAX

		MOV	AX,'::'
		MOV	EDX,EXP_Q
		CALL	EXP_2TRM

		POP	ESI
		MOV	[ESI+NODE3],EBX
			;MOV	[ESI+NODE4],ECX	;&&&
	;		CALL	EXP_CALC

		RET
EXP_QUESTION1:
	CALL	ARITH_TO_COND
	MOV	AX,'?'
	CALL	EXP_LINK
	PUSH	ESI

	CALL	GET_WORD	;skip '?'
	;CALL	EXP_OR2
	CALL	EXP		;####

		CALL	COND_TO_ARITH
		PUSH	ECX
	PUSH	ESI
	MOV	AX,':'
	CALL	SKIP_WORD
	CALL	EXP_Q
	CALL	COND_TO_ARITH
	MOV	EDI,ESI
		MOV	EDX,ECX
	POP	ESI
		POP	ECX
	MOV	AX,'::'
	CALL	MAKE_WORD1_EXP

	PUSH	EBX
	CALL	AUTO_CAST
	POP	EBX

	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI

	POP	ESI
	MOV	[ESI+NODE3],EBX

	RET

;
;
;

ARITH_TO_COND_F:
	MOV	AX,'=='
	JMP	ARITH_TO_COND.10

ARITH_TO_COND:
	MOV	AX,'!='

ARITH_TO_COND.10:
	PUSH	EDX

	PUSH	EAX
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CALL	IS_COND
	POP	EAX
	JE	ARITH_TO_COND.E

	PUSH	ESI

	CALL	MAKE_WORD1_EXP
	MOV	ESI,EBX

	MOV	EDX,0
	CALL	MAKE_WORD_NO_EXP

	POP	EDI
	MOV	[ESI+NODE2],EDI
	MOV	[ESI+NODE3],EBX

	MOV	ECX,[TYPE_INT]

ARITH_TO_COND.E:
	POP	EDX
	RET

;
;
;

COND_TO_ARITH:
	PUSH	EDX

	PUSH	EAX
	PUSH	EBX
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CALL	IS_COND
	POP	EBX
	POP	EAX
	JNE	COND_TO_ARITH.R

		PUSH	EAX

	MOV	AX,'?'
	CALL	EXP_LINK
	PUSH	ESI

	MOV	EDX,1
	CALL	MAKE_WORD_NO_EXP
	MOV	ESI,EBX

	MOV	EDX,0
	CALL	MAKE_WORD_NO_EXP
	MOV	EDI,EBX

	MOV	AX,'::'
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI

	POP	ESI
	MOV	[ESI+NODE3],EBX	;node '?'

		POP	EAX
COND_TO_ARITH.R:
	POP	EDX
	RET


;
EXP_OR2:
	CALL	EXP_AND2
EXP_OR2.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'||'
	JE	EXP_OR2.10
	RET

EXP_OR2.10:
	MOV	AX,'||'
	MOV	EDX,EXP_AND2
	CALL	EXP_2TRM_LET_COND

	JMP	EXP_OR2.05

;
EXP_AND2:
	CALL	EXP_OR
EXP_AND2.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'&&'
	JE	EXP_AND2.10
	RET

EXP_AND2.10:
	MOV	EDX,EXP_OR
	CALL	EXP_2TRM_LET_COND

	JMP	EXP_AND2.05

;
EXP_OR:
	CALL	EXP_XOR
EXP_OR.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'|'
	JE	EXP_OR.10
	RET
EXP_OR.10:
	MOV	EDX,EXP_XOR
	CALL	EXP_2TRM
	;	CALL	TYPEOF2

	CALL	EXP_CALC
	JMP	EXP_OR.05

;
EXP_XOR:
	CALL	EXP_AND
EXP_XOR.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'^'
	JE	EXP_XOR.10
	RET

EXP_XOR.10:
	MOV	AX,'^'
	MOV	EDX,EXP_AND
	CALL	EXP_2TRM
	;	CALL	TYPEOF2

	JMP	EXP_XOR.05

;
EXP_AND:
	CALL	EXP_EQ_NTEQ
EXP_AND.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'&'
	JE	EXP_AND.10
	RET
EXP_AND.10:
	MOV	AX,'&2'
	MOV	EDX,EXP_EQ_NTEQ
	CALL	EXP_2TRM
	;	CALL	TYPEOF2

	CALL	EXP_CALC
	JMP	EXP_AND.05

;
EXP_EQ_NTEQ:
	CALL	EXP_CMP
EXP_EQ_NTEQ.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'=='
	JE	EXP_EQ
	CMP	AX,'!='
	JE	EXP_EQ
	RET
EXP_EQ_NTEQ.10:
	CALL	EXP_CMP
	JMP	EXP_EQ_NTEQ.05

;

EXP_CMP:
	CALL	EXP_SHIFT
EXP_CMP.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'>'
	JE	EXP_EQ
	CMP	AX,'<'
	JE	EXP_EQ
	CMP	AX,'=>'
	JE	EXP_EQ
	CMP	AX,'>='
	JE	EXP_EQ
	CMP	AX,'=<'
	JE	EXP_EQ
	CMP	AX,'<='
	JE	EXP_EQ
	RET

EXP_EQ:
	MOV	EDX,EXP_CMP
	CALL	EXP_2TRM_LET_CMP
	CALL	EXP_CALC
	JMP	EXP_EQ_NTEQ.05

;EXP_EQ2:
	MOV	EDX,EXP_SHIFT
	CALL	EXP_2TRM_LET_SHIFT	;unuse
	JMP	EXP_CMP.05

;
EXP_SHIFT:
	CALL	EXP_ADD_SUB
EXP_SHIFT.05:
	CMP	BYTE [WORD_WORK+2],0
	JNE	EXP_SHIFT.R
	MOV	AX,[WORD_WORK]
	CMP	AX,'<<'
	JE	EXP_SHIFT.10
	CMP	AX,'>>'
	JE	EXP_SHIFT.10
EXP_SHIFT.R:
	RET

;	or mod
EXP_SHIFT.10:
	PUSH	EAX
	CALL	COND_TO_ARITH
	POP	EAX

	CALL	MAKE_WORD1_EXP
	PUSH	EBX

	;MOV	EDX,EXP_ADD_SUB
	;CALL	EXP_2TRM

	CMP	ECX,100H
	JNB	ERR_TYPE

		MOV	EAX,ECX
		CALL	PROMOTED_TYPE
		MOV	ECX,EAX

	MOV	EDX,ECX
	AND	ECX,80H
	OR	ECX,[TYPE_UINT]
	CALL	CASTIF

	PUSH	ECX
	PUSH	ESI

	CALL	GET_WORD
	CALL	EXP_ADD_SUB
	MOV	EDX,ECX
	AND	ECX,80H
	OR	ECX,[TYPE_UINT]
	CALL	CASTIF
	MOV	EDI,ESI
	MOV	EDX,ECX

	POP	ESI
	POP	ECX

	POP	EBX
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX

	CALL	EXP_CALC

	JMP	EXP_SHIFT.05

EXP_MOD.10:
	CALL	MAKE_WORD1_EXP
	PUSH	EBX

	;MOV	EDX,EXP_ADD_SUB
	;CALL	EXP_2TRM

	CMP	ECX,100H
	JNB	ERR_TYPE

		MOV	EAX,ECX
		CALL	PROMOTED_TYPE
		MOV	ECX,EAX

	MOV	EDX,ECX
	AND	ECX,80H
	OR	ECX,[TYPE_UINT]
	CALL	CASTIF

	PUSH	ECX
	PUSH	ESI

	CALL	GET_WORD
	CALL	EXP_TRM	;ADD_SUB	;only this line differ
	MOV	EDX,ECX
	AND	ECX,80H
	OR	ECX,[TYPE_UINT]
	CALL	CASTIF
	MOV	EDI,ESI
	MOV	EDX,ECX

	POP	ESI
	POP	ECX

	POP	EBX
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX

	CALL	EXP_CALC

	JMP	EXP_SHIFT.05

;

EXP_ADD_SUB:
	CALL	EXP_MLT_DIV

EXP_ADD_SUB.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'+'
	JE	EXP_ADD
	CMP	AX,'-'
	JE	EXP_SUB
	RET

EXP_ADD:
EXP_SUB:
	MOV	EDX,EXP_MLT_DIV
	CALL	EXP_2TRM
	;	CALL	TYPEOF2
	CALL	EXP_CALC
	JMP	EXP_ADD_SUB.05

;

CALC_ADD:
		CMP	ECX,00C4H
		JE	CALC_ADD#FLT
	ADD	EAX,EBX
	RET
CALC_ADD#FLT:
	PUSH	ECX
	XCHG	EAX,EBX
	CALL	FADD_
	XCHG	EAX,EBX
	POP	ECX
	RET

CALC_SUB:
		CMP	ECX,00C4H
		JE	CALC_SUB#FLT
	SUB	EAX,EBX
	RET
CALC_SUB#FLT:
	PUSH	ECX
	XCHG	EAX,EBX
	CALL	FSUB_
	XCHG	EAX,EBX
	POP	ECX
	RET

CALC_MUL:
		CMP	ECX,00C4H
		JE	CALC_MUL#FLT
	MUL	EBX
	RET
CALC_MUL#FLT:
	PUSH	ECX
	XCHG	EAX,EBX
	CALL	FMUL_
	XCHG	EAX,EBX
	POP	ECX
	RET

CALC_DIV:
		CMP	ECX,00C4H
		JE	CALC_DIV#FLT
	CMP	BYTE [TYPE_SIGN],0
	JE	CALC_UDIV

	PUSH	EDX
	XCHG	EAX,EBX
	CALL	IDIV.L_
	MOV	EAX,EBX
	POP	EDX
	RET

	PUSH	EDX
	DB	99H	;XOR	EDX,EDX
	;DIV	EBX
	IDIV	EBX
	POP	EDX
	RET

CALC_UDIV:
	PUSH	EDX
	XCHG	EAX,EBX
	CALL	UDIV.L_
	MOV	EAX,EBX
	POP	EDX
	RET

	PUSH	EDX
	XOR	EDX,EDX
	DIV	EBX
	POP	EDX
	RET

CALC_DIV#FLT:
	PUSH	ECX
	XCHG	EAX,EBX
	CALL	FDIV_
	XCHG	EAX,EBX
	POP	ECX
	RET

CALC_MOD:
		CMP	ECX,00C4H
		JE	ERR_TYPE

	CMP	BYTE [TYPE_SIGN],0
	JE	CALC_UMOD

	PUSH	EDX
	XCHG	EAX,EBX
	CALL	IMOD.L_
	MOV	EAX,EBX
	POP	EDX
	RET

	PUSH	EDX
	XOR	EDX,EDX
	DIV	EBX
	MOV	EAX,EDX
	POP	EDX
	RET

CALC_UMOD:
	PUSH	EDX
	XCHG	EAX,EBX
	CALL	UMOD.L_
	MOV	EAX,EBX
	POP	EDX
	RET

CALC_SHL:
		CMP	ECX,00C4H
		JE	ERR_TYPE

	PUSH	ECX
	MOV	CL,BL
	SHL	EAX,CL
	POP	ECX
	RET
;
CALC_EQ:
	CMP	EAX,EBX
	JE	CALC_1
	JMP	CALC_0
;
CALC_GE:
	CMP	BYTE [TYPE_SIGN],0
	JE	CALC_NB

	CMP	EAX,EBX
	JGE	CALC_1
	JMP	CALC_0

CALC_NB:
	CMP	EAX,EBX
	JNB	CALC_1
	JMP	CALC_0

CALC_1:
	MOV	EAX,1
	RET
CALC_0:
	MOV	EAX,0
	RET


CALC_OR:
		CMP	ECX,00C4H
		JE	ERR_TYPE
	OR	EAX,EBX
	RET

CALC_AND:
		CMP	ECX,00C4H
		JE	ERR_TYPE
	AND	EAX,EBX
	RET

CALC_NOT:
		CMP	ECX,00C4H
		JE	ERR_TYPE
	NOT	EAX
	RET

;
IDIV.L_:
	XCHG	EBX,EAX

IDIV.L_.10:

	DB	99H	;CDQ
	IDIV	EBX

	OR	EDX,EDX
	JNS	IDIV.L_.R

	OR	EBX,EBX
	JE	IDIV.L_.2
	MOV	EDX,1
	JS	IDIV.L_.3
	NEG	EDX
IDIV.L_.3:
	ADD	EAX,EDX
IDIV.L_.2:

IDIV.L_.R:
	MOV	EBX,EAX
	RET

;
;	EBX/=EAX

UDIV.L_:
	XCHG	EBX,EAX
	XOR	EDX,EDX
	DIV	EBX
	MOV	EBX,EAX
	RET

;
;

IMOD.L_:
	XCHG	EBX,EAX

;	OR	EBX,EBX
;	JNS	IMOD.L_.1
;	NEG	EAX
;	NEG	EBX
IMOD.L_.1:
	DB	99H	;CDQ

	IDIV	EBX
	MOV	EAX,EDX
	OR	EAX,EAX

	JNS	_IMOD.L.10

	OR	EBX,EBX
	JNS	_IMOD.L.2
	NEG	EBX
_IMOD.L.2:
	ADD	EAX,EBX
_IMOD.L.10:
	MOV	EBX,EAX
	RET
;
UMOD.L_:
	;PUSH	EAX
	XCHG	EBX,EAX
	XOR	EDX,EDX
	DIV	EBX
	MOV	EAX,EDX
	;POP	EBX
	MOV	EBX,EAX
	RET



;
;	XX edx:calc func
;
;	ESI:node
;	>ESI node

EXP_CALC:
	PUSH	EBX
	PUSH	EDX
	PUSH	EDI

	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,4*1

	;	CMP	ECX,00C4H
	;	JE	EXP_CALC.N
	;	CMP	EDX,00C4H
	;	JE	EXP_CALC.N

		CMP	ECX,00C4H
		JE	EXP_CALC#FLT
		JMP	EXP_CALC.05
EXP_CALC#FLT:
		CMP	EDX,00C4H
		JNE	ERR_TYPE

EXP_CALC.05:
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
		MOV	[EBP-4*1],AX

	MOV	EBX,[ESI+NODE2]
	MOV	EBX,[EBX+NODE1]
	CMP	WORD [EBX],'00'
	JNE	EXP_CALC.N

	CMP	AX,'~'
	MOV	EDX,CALC_NOT
	JE	EXP_CALC.20

	CMP	AX,'?'
	JE	EXP_CALC.10SEL

	MOV	EBX,[ESI+NODE3]
	MOV	EBX,[EBX+NODE1]
	CMP	WORD [EBX],'00'
	JNE	EXP_CALC.N

		MOV	EBX,[ESI+NODE2]
		MOV	EBX,[EBX+NODE2]
		MOV	[TYPE_L],EBX

		MOV	EBX,[ESI+NODE3]
		MOV	EBX,[EBX+NODE2]
		MOV	[TYPE_R],EBX

	CMP	AX,'+'
	MOV	EDX,CALC_ADD
	JE	EXP_CALC.10

	CMP	AX,'-'
	MOV	EDX,CALC_SUB
	JE	EXP_CALC.10

	CMP	AX,'**'
	MOV	EDX,CALC_MUL
	JE	EXP_CALC.10

	CMP	AX,'/'
	MOV	EDX,CALC_DIV
	JE	EXP_CALC.10

	CMP	AX,'%'		;assume int%int
	MOV	EDX,CALC_MOD
	JE	EXP_CALC.10

	CMP	AX,'<<'
	MOV	EDX,CALC_SHL
	JE	EXP_CALC.10

	CMP	AX,'|'
	MOV	EDX,CALC_OR
	JE	EXP_CALC.10

	CMP	AX,'&'
	MOV	EDX,CALC_AND
	JE	EXP_CALC.10

	;CMP	AX,'?'
	;MOV	EDX,CALC_SEL
	;JE	EXP_CALC.10SEL

	CMP	AX,'=>'
	MOV	EDX,CALC_GE
	JE	EXP_CALC.10
	CMP	AX,'>='
	JE	EXP_CALC.10

	CMP	AX,'=='
	MOV	EDX,CALC_EQ
	JE	EXP_CALC.10

	JMP	EXP_CALC.N

EXP_CALC.10SEL:
	MOV	EBX,[ESI+NODE2]
	MOV	EAX,[EBX+NODE4]
	OR	EAX,EAX
	JNE	EXP_CALC.10SEL.L
	JMP	EXP_CALC.10SEL.R

EXP_CALC.10SEL.L:
	MOV	ESI,[ESI+NODE3]
	MOV	ESI,[ESI+NODE2]
	JMP	EXP_CALC.N
EXP_CALC.10SEL.R:
	MOV	ESI,[ESI+NODE3]
	MOV	ESI,[ESI+NODE3]
	JMP	EXP_CALC.N

EXP_CALC.10:
	MOV	EBX,[TYPE_L]
	MOV	EAX,[TYPE_R]
	CALL	EXP_CALC_TYPE

	MOV	EBX,[ESI+NODE2]
	MOV	EAX,[EBX+NODE4]

	MOV	EBX,[ESI+NODE3]
	MOV	EBX,[EBX+NODE4]

	CALL	EDX
EXP_CALC.15:
	MOV	EDX,EAX
	CALL	MAKE_WORD_NO_EXP

		MOV	ECX,[TYPE_L]
		CMP	WORD [EBP-4*1],'<<'
		JE	EXP_CALC.TYPEL
		CMP	WORD [EBP-4*1],'>>'
		JE	EXP_CALC.TYPEL

		MOV	EDX,[TYPE_R]
		CALL	TYPEOF2
EXP_CALC.TYPEL:
		MOV	EAX,ECX
		;MOV	EAX,[TYPE_L]
		MOV	[EBX+NODE2],EAX

	MOV	ESI,EBX
	JMP	EXP_CALC.N

;	1term

EXP_CALC.20:
	MOV	EBX,[ESI+NODE2]
	MOV	EAX,[EBX+NODE4]

	CALL	EDX

	JMP	EXP_CALC.15

EXP_CALC.N:
	ADD	ESP,4*1
	POP	EBP

	POP	EDI
	POP	EDX
	POP	EBX
	RET

;

EXP_CALC_TYPE:
	CMP	EBX,100H
	JNB	EXP_CALC_TYPE.U
	CMP	EAX,100H
	JNB	EXP_CALC_TYPE.U

	TEST	EBX,80H
	JE	EXP_CALC_TYPE.U
	TEST	EAX,80H
	JE	EXP_CALC_TYPE.U

EXP_CALC_TYPE.S:
	MOV	BYTE [TYPE_SIGN],0FFH
	RET

EXP_CALC_TYPE.U:
	MOV	BYTE [TYPE_SIGN],0
	RET



;
;

EXP_MLT_DIV:
	CALL	EXP_TRM
EXP_MLT_DIV.05:
	MOV	AX,[WORD_WORK]
	CMP	AX,'*'
	JE	EXP_MUL
	CMP	AX,'/'
	JE	EXP_DIV
	CMP	AX,'%'
	JE	EXP_MOD
	RET

EXP_MOD:
	JMP	EXP_MOD.10

EXP_MUL:
	MOV	AX,'**'
EXP_DIV:
;EXP_MOD:
	MOV	EDX,EXP_TRM
	CALL	EXP_2TRM

	;	CALL	TYPEOF2	;%%%EC13
	CALL	EXP_CALC
	JMP	EXP_MLT_DIV.05

;
;
;

EXP_2TRM_SUB_COND:
	CALL	ARITH_TO_COND
	PUSH	ESI
	PUSH	ECX
	CALL	GET_WORD
	CALL	EDX
	CALL	ARITH_TO_COND
	MOV	EDI,ESI
	MOV	EDX,ECX
	POP	ECX
	POP	ESI
	RET

;
;	ESI:left
;	EDX:func to get right
;	>ESI,ECX left node,type
;	>EDI,EDX right node,type
;

EXP_2TRM_SUB:
	CALL	COND_TO_ARITH
	PUSH	ESI
	PUSH	ECX

	CALL	GET_WORD
	CALL	EDX

	CALL	COND_TO_ARITH	;##

	MOV	EDI,ESI
	MOV	EDX,ECX

	POP	ECX
	POP	ESI
	RET

;
;
;
EXP_2TRM_COND:
	PUSH	EAX
	CALL	EXP_2TRM_SUB_COND
	POP	EAX
	JMP	EXP_2TRM.10

;
;	AX:for MAKE_WORD
;	DX:pnt to sub

EXP_2TRM:
	PUSH	EAX
	CALL	EXP_2TRM_SUB
	POP	EAX

;	AX for MAKE_WORD
;	ESI left node
;	EDI right node
;	ECX left type
;	EDX right type

EXP_2TRM.10:
	MOV	[EXP_2TRM.WORD],EAX
	PUSH	EAX
	CALL	AUTO_CAST

	CMP	WORD [EXP_2TRM.WORD],'+'
	JE	EXP_2TRM.20
	CMP	WORD [EXP_2TRM.WORD],'-'
	JE	EXP_2TRM.20
	JMP	EXP_2TRM.30

;	'+','-'

EXP_2TRM.20:
	CALL	ADJ
	POP	EAX
	JB	EXP_2TRM.R	;if ptr-ptr case
	PUSH	EAX

;	!'+','-'

EXP_2TRM.30:
	POP	EAX
	CALL	MAKE_WORD1_EXP

	;	CMP	WORD [EXP_2TRM.WORD],'<<'
	;	JE	EXP_2TRM.SHL
	;	CMP	WORD [EXP_2TRM.WORD],'>>'
	;	JE	EXP_2TRM.SHR
		JMP	EXP_2TRM.SHIFTE
EXP_2TRM.SHL:
EXP_2TRM.SHR:
	PUSH	EBX

	PUSH	ECX
	PUSH	ESI
	MOV	ESI,EDI
	MOV	ECX,[TYPE_INT]
	CALL	CASTIF
	MOV	EDI,ESI
	POP	ESI
	POP	ECX

	POP	EBX

EXP_2TRM.SHIFTE:
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI

	MOV	ESI,EBX

	CALL	TYPEOF2

EXP_2TRM.R:
	RET



;
;	'||','&&'
;

EXP_2TRM_LET_COND:
	PUSH	EAX
	CALL	EXP_2TRM_SUB_COND
	POP	EAX
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX
	RET

;
;	','
;
EXP_2TRM_LET_COMMA:
	PUSH	EAX
	CALL	EXP_2TRM_SUB
	POP	EAX

	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX

	MOV	ECX,EDX
	RET

;
;	'==','=!','<'.'>','<=','>='
;

EXP_2TRM_LET_CMP:
	PUSH	EAX
	CALL	EXP_2TRM_SUB
		CALL	AUTO_CAST
	POP	EAX


	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX
	RET

;
;	unuse
;

EXP_2TRM_LET_SHIFT:
	PUSH	EAX
	CALL	EXP_2TRM_SUB
	POP	EAX

	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX
	RET

;
;	'='
;

EXP_2TRM_LET:
	PUSH	EAX
	CALL	EXP_2TRM_SUB
	POP	EAX

	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX

		CMP	ECX,00C4H
		JE	EXP_2TRM_LET.LF
		CMP	EDX,00C4H
		JE	EXP_2TRM_LET.RF
EXP_2TRM_LET.R:
	RET

;	float=int/ptr
EXP_2TRM_LET.LF:
	CMP	EDX,00C4H
	JE	EXP_2TRM_LET.R
EXP_2TRM_LET.LF.10:
	MOV	AX,'()'
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ECX
	MOV	[EBX+NODE3],EDI
	MOV	EDI,EBX
	;MOV	EDX,ECX

	MOV	[ESI+NODE3],EDI
	JMP	EXP_2TRM_LET.R


;	int/ptr=float
EXP_2TRM_LET.RF:
	CMP	ECX,00C4H
	JE	EXP_2TRM_LET.R
	JMP	EXP_2TRM_LET.LF.10

;
;
;
AUTO_CAST_PROMOTE:
;	PUSH	ECX
;	PUSH	EDX

	MOV	EAX,ECX
	CALL	PROMOTED_TYPE
	MOV	ECX,EAX

	MOV	EAX,EDX
	CALL	PROMOTED_TYPE
	MOV	EDX,EAX

	CALL	AUTO_CAST.0

;	POP	EDX
;	POP	ECX
	RET

;
;	ESI left node
;	EDI right node
;
;	ECX:left type
;	EDX:right type
;

AUTO_CAST:
		JMP	AUTO_CAST_PROMOTE

AUTO_CAST.0:
		CMP	ECX,00C4H
		JE	AUTO_CAST.LF
		CMP	EDX,00C4H
		JE	AUTO_CAST.RF

	CMP	ECX,100H
	JNB	AUTO_CAST.R
	CMP	EDX,100H
	JNB	AUTO_CAST.R

	CMP	ECX,0004H
	JE	AUTO_CAST.10
	CMP	ECX,0084H
	JE	AUTO_CAST.10

	CMP	EDX,0004H
	JE	AUTO_CAST.20
	CMP	EDX,0084H
	JE	AUTO_CAST.20
	JMP	AUTO_CAST.R

;
AUTO_CAST.LF:
	CMP	EDX,100H
	JNB	AUTO_CAST.LF.10
	CMP	EDX,00C4H
	JE	AUTO_CAST.R
	JMP	AUTO_CAST.15

;	float&ptr ->int&ptr
AUTO_CAST.LF.10:
	JMP	AUTO_CAST.25

	JMP	ERR_TYPE

;
AUTO_CAST.RF:
	CMP	ECX,100H
	JNB	AUTO_CAST.RF.10
	CMP	ECX,00C4H
	JE	AUTO_CAST.R
	JMP	AUTO_CAST.25

;	ptr&float ->ptr&int
AUTO_CAST.RF.10:
	JMP	AUTO_CAST.15

	JMP	ERR_TYPE

;	ECX=(u)long
AUTO_CAST.10:
	CMP	EDX,0002H
	JE	AUTO_CAST.15
	CMP	EDX,0082H
	JE	AUTO_CAST.15
	JMP	AUTO_CAST.R

;	0004/0084 0002/0082

;	cast right
AUTO_CAST.15:
	;MOV	AX,'()'
	;CALL	MAKE_WORD1_EXP
	;MOV	[EBX+NODE2],ECX
	;MOV	[EBX+NODE3],EDI
	;MOV	EDI,EBX
	;MOV	EDX,ECX

		PUSH	ESI
		PUSH	ECX
		MOV	ESI,EDI
		;MOV	ECX,EDX
		CALL	EXP_CAST2
		MOV	EDI,ESI
		MOV	EDX,ECX
		POP	ECX
		POP	ESI

	JMP	AUTO_CAST.R

;	EDX=(u)long
AUTO_CAST.20:
	CMP	ECX,0002H
	JE	AUTO_CAST.25
	CMP	ECX,0082H
	JE	AUTO_CAST.25
	JMP	AUTO_CAST.R

;	cast left
AUTO_CAST.25:
	;MOV	AX,'()'
	;CALL	MAKE_WORD1_EXP
	;MOV	[EBX+NODE2],EDX
	;MOV	[EBX+NODE3],ESI
	;MOV	ESI,EBX
	;MOV	ECX,EDX

		PUSH	EDI
		PUSH	EDX
		MOV	ECX,EDX
		CALL	EXP_CAST2
		POP	EDX
		POP	EDI

	JMP	AUTO_CAST.R

AUTO_CAST.R:
	RET

;
;	ESI,ECX	node-l,type-l
;	EDI,EDX	node-r,type-r
;
;	>ECX	type of l(+-)r
;	if +	pointer
;	if -	unsigned int
;
;	CF==1	ptr-ptr case

ADJ:
	MOV	EAX,0
	PUSH	EAX
	MOV	EBX,ECX
	CALL	IS_POINTER
	JNE	ADJ.1
	POP	EAX
	OR	EAX,1
	PUSH	EAX
ADJ.1:
	MOV	EBX,EDX
	CALL	IS_POINTER
	JNE	ADJ.2
	POP	EAX
	OR	EAX,2
	PUSH	EAX
ADJ.2:
	POP	EAX
	OR	EAX,EAX
	JE	ADJ.E
	CMP	EAX,1
	JE	ADJ.20
	CMP	EAX,2
	JE	ADJ.10
	CMP	WORD [EXP_2TRM.WORD],'-'
	JNE	ADJ.E
	CMP	EAX,3
	JE	ADJ.30

	JMP	ADJ.E

ADJ.10:
	CALL	ADJ1
	JMP	ADJ.E

ADJ.20:
	CALL	ADJ2
	JMP	ADJ.E

ADJ.30:
	PUSH	ECX
	MOV	AX,'-'
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX
	POP	ECX

	PUSH	ESI
;	MOV	ESI,[ECX+NODE2]
	MOV	ESI,ECX
		MOV	ESI,[ESI+NODE2]	;#####
	CALL	SIZEOF

	CALL	MAKE_WORD_NO_EXP
	MOV	EDI,EBX
	POP	ESI

	MOV	AX,'/'
	CALL	MAKE_WORD1_EXP
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI
	MOV	ESI,EBX
	MOV	ECX,[TYPE_INT]	;[TYPE_UINT]
	STC
	JMP	ADJ.R

ADJ.E:
	CLC
ADJ.R:
	RET

;
;	EDI,EDX	is pointer

ADJ1:
	PUSH	EDI
	PUSH	EDX

	PUSH	ESI
		PUSH	ECX
	MOV	ESI,EDX
		MOV	ESI,[ESI+NODE2]	;#####
	CALL	SIZEOF
		CMP	EDX,1
		JE	ADJ1#1
		ADD	ESP,4	;discard ECX
	CALL	MAKE_WORD_NO_EXP
	PUSH	EBX
	MOV	AX,'**'
	CALL	MAKE_WORD1_EXP
	POP	ECX
	POP	ESI
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],ECX
	MOV	ESI,EBX

	CALL	EXP_CALC

	POP	EDX
	POP	EDI
	MOV	ECX,EDX
	RET
ADJ1#1:
	POP	ECX
	POP	ESI

	POP	EDX
	POP	EDI
	MOV	ECX,EDX
	RET

;	ESI,ECX	is pointer

ADJ2:
	PUSH	ESI
	PUSH	ECX

	PUSH	EDI
		PUSH	EDX
	MOV	ESI,ECX
		MOV	ESI,[ESI+NODE2]	;#####
	CALL	SIZEOF
		CMP	EDX,1
		JE	ADJ2#1
		ADD	ESP,4	;discard EDX
	CALL	MAKE_WORD_NO_EXP
	PUSH	EBX
	MOV	AX,'**'
	CALL	MAKE_WORD1_EXP
	POP	ECX
	POP	EDI
	MOV	[EBX+NODE2],EDI
	MOV	[EBX+NODE3],ECX
	MOV	EDI,EBX

	XCHG	ECX,EDX
	XCHG	ESI,EDI
	CALL	EXP_CALC
	XCHG	ESI,EDI
	XCHG	ECX,EDX

	POP	ECX
	POP	ESI
	RET
ADJ2#1:
	POP	EDX
	POP	EDI

	POP	ECX
	POP	ESI
	RET
;

IS_POINTER:
		cmp	ebx,100h
		jb	is_pointer.n

	PUSH	EBX
	MOV	EBX,[EBX+NODE1]
	MOV	AX,[EBX]
	POP	EBX
	CMP	AX,'00'
	JE	IS_POINTER.N
	JMP	IS_POINTER.Y

IS_POINTER.N:
	JMP	MAKE_NZ

IS_POINTER.Y:
	JMP	MAKE_ZR

;
;	EDX:no
;	>EBX:node '00'
;

MAKE_WORD_NO_EXP:
	MOV	AX,'00'
	CALL	MAKE_WORD1_EXP
	MOV	EAX,[TYPE_INT]
	MOV	[EBX+NODE2],EAX
	MOV	[EBX+NODE4],EDX
	RET

;
;	EDX:no
;	>EBX:node
;

MAKE_WORD_NO:
	MOV	AX,'00'
	CALL	MAKE_WORD1
	MOV	EAX,[TYPE_INT]
	MOV	[EBX+NODE2],EAX
	MOV	[EBX+NODE4],EDX
	RET


;
EXP_TRM:
	MOV	AX,[WORD_WORK]
	CMP	AX,'+'
	JE	EXP_PLUS
	CMP	AX,'-'
	JE	EXP_MINUS
	CMP	AX,'~'
	JE	EXP_REV
	CMP	AX,'!'
	JE	EXP_NOT
	CMP	AX,'++'
	JE	EXP_PREINC
	CMP	AX,'--'
	JE	EXP_PREDEC
	CMP	AX,'('
	JE	EXP_PAR
	CMP	AX,'*'
	JE	EXP_PNT
	CMP	AX,'&'
	JE	EXP_ADR

	CMP	AL,"'"	;single quote
	JE	EXP_SQ
	CMP	AL,'"'	;double quote
	JE	EXP_DQ

	JMP	EXP_TRM.05

;
EXP_PLUS:
	CALL	GET_WORD
	CALL	EXP_TRM.05
	RET

EXP_MINUS:
	CALL	GET_WORD
	CALL	EXP_TRM
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'00'
	JE	EXP_MINUS.NUM

	MOV	AX,'~~'
	CALL	EXP_LINK
	RET

EXP_MINUS.NUM:
	MOV	EAX,[ESI+NODE2]
	CMP	EAX,00C4H
	JE	EXP_MINUS.NUM.FLOAT
	NEG	DWORD [ESI+NODE4]
	RET
EXP_MINUS.NUM.FLOAT:
	PUSH	ECX
	PUSH	DWORD [ESI+NODE4]
	CALL	_FNEG
	ADD	ESP,4
	POP	ECX
	MOV	[ESI+NODE4],EBX
	RET

EXP_REV:
	CALL	GET_WORD

	CALL	EXP_TRM
	MOV	AX,'~'
	CALL	EXP_LINK

	CALL	EXP_CALC
	RET

;

EXP_NOT:
	CALL	GET_WORD

	CALL	EXP_TRM
	CALL	ARITH_TO_COND

	MOV	AX,'!'
	CALL	EXP_LINK
	RET

EXP_PREINC:
	MOV	AX,'1+'
	;MOV	EDX,EXP_TRM
	;CALL	EXP_1TRM
		CALL	GET_WORD
		CALL	EXP_TRM
		MOV	BX,'1+'
		CALL	EXP_INCDEC
	JMP	EXP_INC.1

EXP_PREDEC:
	MOV	AX,'1-'
	;MOV	EDX,EXP_TRM
	;CALL	EXP_1TRM
		CALL	GET_WORD
		CALL	EXP_TRM
		MOV	BX,'1-'
		CALL	EXP_INCDEC
	JMP	EXP_INC.1

;
;	AX:for MAKE_WORD
;	DX:pnt of sub
;
EXP_1TRM:
	PUSH	EAX
	CALL	GET_WORD
	CALL	EDX
	POP	EAX

EXP_1TRM.10:
	CALL	EXP_LINK
	RET


EXP_1TRM_POST:
	PUSH	EAX
	CALL	GET_WORD
	POP	EAX
	JMP	EXP_1TRM.10



EXP_TRM.05:
	MOV	AX,[WORD_WORK]
	CALL	IS_NUMBER
	JE	EXP_NUM
		CMP	AX,'.'
		JE	EXP_NUM

	CALL	EXP_TRM.WORD

EXP_TRM.10:
	MOV	AX,[WORD_WORK]
	CMP	AX,'.'
	JE	EXP_DOT
	CMP	AX,'->'
	JE	EXP_ARROW
	CMP	AX,'('
	JE	EXP_FNC
	CMP	AX,'['
	JE	EXP_ARY
	CMP	AX,'++'
	JE	EXP_INC
	CMP	AX,'--'
	JE	EXP_DEC
	RET



;
EXP_TRM.UNDEF:
	CALL	IS_UNDEFOK
	JNE	ERR_UNDEF

		JMP	EXP_TRM.UNDEF.NTCLASS

		MOV	ESI,WORD_WORK
		MOV	EDI,WORD_WORK2
		CALL	STRCPY

		MOV	ESI,WORD_CLASSX
		MOV	EDI,WORD_WORK
		CALL	STRCPY

		CALL	SEARCH_WORD
		PUSH	EBX
		PUSHFD
		MOV	ESI,WORD_WORK2
		MOV	EDI,WORD_WORK
		CALL	STRCPY
		POPFD
		POP	EBX
		JB	EXP_TRM.UNDEF.NTCLASS

		MOV	ESI,[EBX+NODE2]
		CMP	ESI,100H
		JB	EXP_TRM.UNDEF.NTCLASS
		MOV	EAX,[ESI+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'ty'+8080H
		JNE	EXP_TRM.UNDEF.NTCLASS

		MOV	ESI,[ESI+NODE2]
		CALL	EXP_MEMBER

EXP_TRM.UNDEF.NTCLASS:

	PUSHAD
	MOV	AL,'U'
	CALL	PUTCHR_CON

		CALL	DISP_CON
		DB	'($'
		MOV	ESI,WORD_WORK
		CALL	DISP_STR_CON
		CALL	DISP_CON
		DB	')$'
	POPAD

	CALL	SET_WORD1
	MOV	ESI,EBX

	CALL	GET_WORD
	MOV	AX,[WORD_WORK]
	CMP	AX,'('
	JNE	ERR_UNDEF

	MOV	AX,'('
	CALL	MAKE_WORD1
	MOV	EAX,[TYPE_INT]
	MOV	[EBX+NODE2],EAX

	MOV	[ESI+NODE2],EBX

	MOV	EBX,ESI
	JMP	EXP_TRM.WORD.AGAIN

EXP_TRM.WORD:
	;PUSHAD
	MOV	ESI,WORD_WORK
	MOV	EDI,WORD_SIZEOF
	CALL	STRCMP
	;POPAD
	JE	EXP_SIZEOF

	CALL	SEARCH_WORD
	JB	EXP_TRM.UNDEF	;ERR_UNDEF

		;even enum name!

		OR	DWORD [EBX+NODE9],4	;refered

	CALL	GET_WORD

;	from EXP_TRM.UNDEF
EXP_TRM.WORD.AGAIN:
	MOV	ESI,EBX
	MOV	ECX,EBX

;EXP_TRM.WORD.50:
	CMP	ECX,100H
	JB	EXP_TRM.WORD.70

	MOV	EBX,[ECX+NODE2]
	CMP	EBX,100H
	JB	EXP_TRM.WORD.70

	MOV	EBX,[EBX+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'['
	JE	EXP_TRM.WORD.60
		;JE	EXP_TRM.WORD.62

	CMP	AX,'{'
	JE	EXP_TRM.WORD.60
	CMP	AX,'('
	JE	EXP_TRM.WORD.60
	CMP	AX,'{{'
	JE	EXP_TRM.WORD.ENUM

	JMP	EXP_TRM.WORD.70

;	'{{'

EXP_TRM.WORD.ENUM:
	MOV	EBX,[ECX+NODE2]
	MOV	EDX,[EBX+NODE4]
	CALL	MAKE_WORD_NO_EXP
	MOV	ESI,EBX
	MOV	ECX,[TYPE_INT]
	RET

;	'{','('

EXP_TRM.WORD.60:
	MOV	ECX,[ECX+NODE2]	;to be promote?
	;	CALL	EXP_PROMOTE	;this make SIZEOF err (alll be 4)
	RET

;EXP_TRM.WORD.62:
;	MOV	EAX,[ECX+NODE7]	;level
;	OR	EAX,EAX
;	JNS	EXP_TRM.WORD.64	;if arg
;	JMP	EXP_TRM.WORD.60
;
;EXP_TRM.WORD.64:
;	MOV	ECX,[ECX+NODE2]
;
;	MOV	AX,'*'
;	CALL	EXP_LINK
;	RET

;	scalar

EXP_TRM.WORD.70:

;EXP_TRM.WORD.80:
	CMP	ECX,100H
	JB	ERR_TYPE

	MOV	ECX,[ECX+NODE2]	;to be promote?
	;	CALL	EXP_PROMOTE
	RET

;

EXP_SIZEOF:
	CALL	GET_WORD
	MOV	AX,[WORD_WORK]
	CMP	AX,'('
	JE	EXP_SIZEOF2

	PUSH	DWORD [NAME_PNT]
	CALL	SIZEOF_EE
	POP	DWORD [NAME_PNT]
EXP_SIZEOF.05:
;	OR	EDX,EDX
;	JLE	ERR_SIZEOF0

		JMP	EXP_SIZEOF.MAKENO

	CALL	MAKE_WORD_NO_EXP
	MOV	ESI,EBX

	MOV	ECX,[TYPE_UINT]	;#####[TYPE_INT]
	RET

;	sizeof(object)

exp_sizeof.10:
	PUSH	DWORD [NAME_PNT]
	CALL	SIZEOF_EE
	;	CALL	SIZEOF_EE2
	POP	DWORD [NAME_PNT]
	MOV	AX,')'
	CALL	SKIP_WORD
	JMP	EXP_SIZEOF.05

;	sizeof(typename)

EXP_SIZEOF2:
	CALL	GET_WORD
	CALL	IS_TYPENAME
	jne	exp_sizeof.10

		;CALL	SIZEOF_EE
		;JMP	EXP_SIZEOF2.10

	PUSH	DWORD [NAME_PNT]
	PUSH	DWORD [FLG.UNSIGNED]
	PUSH	DWORD [FLG.EXTRN]
	PUSH	DWORD [FLG.STATIC]
	CALL	TYPENAME

	PUSH	EBX
	;CALL	A_DEF
	POP	EBX

	POP	DWORD [FLG.STATIC]
	POP	DWORD [FLG.EXTRN]
	POP	DWORD [FLG.UNSIGNED]
	POP	DWORD [NAME_PNT]

	;MOV	[ESI+NODE2],EBX
		;MOV	[EDI+NODE2],EBX	;##### for A_DEF
		;MOV	ESI,[ESI+NODE2]

		MOV	ESI,EBX

	PUSH	DWORD [NAME_PNT]
	CALL	SIZEOF
		;CALL	SIZEOF_CV
		;CALL	SIZEOF_E

	POP	DWORD [NAME_PNT]

	MOV	AX,[WORD_WORK]
	CMP	AX,'*'
	JNE	EXP_SIZEOF2.10
	CALL	GET_WORD
	MOV	EDX,4
	MOV	AX,[WORD_WORK]
	CMP	AX,'*'
	JNE	EXP_SIZEOF2.10
	CALL	GET_WORD

EXP_SIZEOF2.10:
		PUSH	EDX
	MOV	AX,')'
	CALL	SKIP_WORD
		POP	EDX

EXP_SIZEOF.MAKENO:
	OR	EDX,EDX
	JLE	ERR_SIZEOF0

	CALL	MAKE_WORD_NO_EXP

	MOV	ESI,EBX
	MOV	ECX,[TYPE_UINT]	;[TYPE_INT] #####

		MOV	[ESI+NODE2],ECX	;%%%EC13
	RET

;
;
;

ESC_CHR:
	CMP	AL,'a'
	MOV	BL,07H
	JE	ESC_CHR.Y
	CMP	AL,'b'
	MOV	BL,08H
	JE	ESC_CHR.Y
	CMP	AL,'f'
	MOV	BL,0CH
	JE	ESC_CHR.Y
	CMP	AL,'n'
	MOV	BL,0AH
	JE	ESC_CHR.Y
	CMP	AL,'r'
	MOV	BL,0DH
	JE	ESC_CHR.Y
	CMP	AL,'t'
	MOV	BL,09H
	JE	ESC_CHR.Y
	CMP	AL,'v'
	MOV	BL,0BH
	JE	ESC_CHR.Y

	JMP	MAKE_NZ

ESC_CHR.Y:
	RET

;
;
;

EXP_SQ:
	XOR	EAX,EAX

	MOV	AL,[CHR_WORK]
	CMP	AL,1AH
	JE	MAIN_E
	CMP	AL,'\'
	JE	EXP_SQ.ESC

	PUSH	EAX
	CALL	GET_NCHR
EXP_SQ.10:
	MOV	AL,[CHR_WORK]
	CMP	AL,"'"
	JNE	ERR_SYNTAX

	CALL	GET_NCHR

	POP	EDX
	MOVZX	EDX,DL
	CALL	MAKE_WORD_NO

	MOV	ESI,EBX
	MOV	ECX,[TYPE_INT]
	CALL	GET_WORD
	RET

EXP_SQ.ESC:
	CALL	GET_NCHR
	MOV	AL,[CHR_WORK]
	CALL	IS_OCTCHR
	JE	EXP_SQ.ESC.NUM

	CALL	ESC_CHR
	JE	EXP_SQ.ESC.10
	MOV	BL,AL

EXP_SQ.ESC.10:
	PUSH	EBX
	CALL	GET_NCHR
	JMP	EXP_SQ.10

EXP_SQ.ESC.NUM:
	MOV	EDX,0
EXP_SQ.ESC.NUM.10:
	SHL	EDX,3
	SUB	AL,'0'
	MOVZX	EAX,AL
	ADD	EDX,EAX
	PUSH	EDX
	CALL	GET_NCHR
	POP	EDX
	MOV	AL,[CHR_WORK]
	CALL	IS_OCTCHR
	JNE	EXP_SQ.ESC.NUM.20
	JMP	EXP_SQ.ESC.NUM.10
EXP_SQ.ESC.NUM.20:
	PUSH	EDX
	JMP	EXP_SQ.10

EXP_DQ.UNITE:
	;CALL	GET_NCHR	;###
	JMP	EXP_DQ.10

EXP_DQ:
	MOV	EBX,WORD_WORK2	;WORD_WORK
EXP_DQ.10:
	MOV	AL,[CHR_WORK]
	CMP	AL,1AH
	JE	MAIN_E
	CMP	AL,'\'
	JE	EXP_DQ.ESC
EXP_DQ.12:
	CMP	AL,'"'
	JE	EXP_DQ.15

	;MOV	[EBX],AL
	;INC	EBX
		CALL	ADD_STR_EBX

	CALL	GET_NCHR
	JMP	EXP_DQ.10

EXP_DQ.ESC.CR:
	CALL	GET_NCHR
	CALL	GET_NCHR
	JMP	EXP_DQ.10

EXP_DQ.ESC:
	CALL	GET_NCHR
	MOV	DL,[CHR_WORK]
	CMP	DL,0DH
	JE	EXP_DQ.ESC.CR

	MOV	AL,DL
	CALL	IS_OCTCHR
	JE	EXP_DQ.NUM

	MOV	AL,DL
	PUSH	EBX
	CALL	ESC_CHR
	MOV	DH,BL
	POP	EBX
	JE	EXP_DQ.ESC.10
	CMP	DL,'x'
	JE	EXP_DQ.X
	CALL	GET_NCHR
	JMP	EXP_DQ.X.10
	JMP	ERR_SYNTAX

EXP_DQ.ESC.10:
	PUSH	EDX
	CALL	GET_NCHR
	POP	EDX
	MOV	DL,DH
	JMP	EXP_DQ.X.10

EXP_DQ.NUM:
	MOV	DL,0
EXP_DQ.NUM.05:
	MOV	AL,[CHR_WORK]
	CALL	IS_OCTCHR
	JNE	EXP_DQ.NUM.10
	SUB	AL,'0'
	SHL	DL,3
	OR	DL,AL
	PUSH	EDX
	CALL	GET_NCHR
	POP	EDX
	JMP	EXP_DQ.NUM.05

EXP_DQ.NUM.10:
	JMP	EXP_DQ.X.10


EXP_DQ.X:
	MOV	DL,0
EXP_DQ.X.05:
	PUSH	EDX
	CALL	GET_NCHR
	POP	EDX
	MOV	AL,[CHR_WORK]
	CALL	TOUPPER
	CALL	IS_HEXCHR
	JNE	EXP_DQ.X.10
	CALL	HEXCHRTO
	SHL	DL,4
	OR	DL,AL
	JMP	EXP_DQ.X.05
EXP_DQ.X.10:
	;MOV	[EBX],DL
	;INC	EBX
		PUSH	EAX
		MOV	AL,DL
		CALL	ADD_STR_EBX
		POP	EAX

	JMP	EXP_DQ.10

EXP_DQ.15:
	CALL	GET_WORD	;skip '"'

	CALL	GET_WORD

		MOV	AX,[WORD_WORK]

		CMP	AL,'"'
		JE	EXP_DQ.UNITE

	;	PUSH	EBX
	;	CALL	UNGETC
	;	MOV	BYTE [CHR_WORK],' '
	;	POP	EBX

	MOV	BYTE [EBX],0

;	CALL	SET_WORD1
	MOV	EBX,WORD_WORK2	;WORD_WORK
	CALL	SET_STRING

	PUSH	EBX
	MOV	AX,'""'
	CALL	MAKE_WORD1;_EXP
	POP	ESI
	MOV	[EBX+NODE2],ESI
	MOV	EAX,[LABEL_NO]
	INC	EAX
	MOV	[LABEL_NO],EAX
	MOV	[EBX+NODE4],EAX

		PUSH	EBX
		MOV	AX,'*'		;####
		CALL	MAKE_WORD1
		MOV	EAX,0001H	;[TYPE_UCHAR]
		MOV	[EBX+NODE2],EAX
		MOV	ECX,EBX
		POP	EBX

	MOV	ESI,EBX
	;CALL	GET_WORD	;#
	;RET
		JMP	EXP_TRM.10

;
ADD_STR_EBX:
	CMP	AL,0
	JE	ADD_STR_EBX.05
	CMP	AL,0FFH
	JE	ADD_STR_EBX.05
	JMP	ADD_STR_EBX.10

ADD_STR_EBX.05:
	MOV	BYTE [EBX],0FFH
	INC	EBX
ADD_STR_EBX.10:
	MOV	[EBX],AL
	INC	EBX
	RET

;
;
;

EXP_NUM:
	MOV	AX,'00'
	CALL	MAKE_WORD1_EXP	;_EXP def_ary calls exp_const
	MOV	ESI,EBX
	MOV	ECX,[TYPE_INT]

	MOV	AX,[WORD_WORK]
	CMP	AX,'0x'
	JE	EXP_NUM.HEX
	CMP	AX,'0X'
	JE	EXP_NUM.HEX

			CMP	AX,'.'
			JE	EXP_NUM_F.DOT

		PUSH	ESI
		MOV	ESI,WORD_WORK
		MOV	AL,'E'
		CALL	STRCHR
		OR	ESI,ESI
		JNE	EXP_NUM_F.01

		MOV	ESI,WORD_WORK
		MOV	AL,'e'
		CALL	STRCHR
		OR	ESI,ESI
		JNE	EXP_NUM_F.01
		POP	ESI

		CMP	BYTE [CHR_WORK],'.'
		JE	EXP_NUM_F

	MOV	AX,[WORD_WORK]	;&&&
	cmp	al,'0'
	JE	EXP_NUM.OCT

	PUSH	ESI
	MOV	ESI,WORD_WORK
	CALL	GETDEC	;HEX
	MOV	EBX,ESI
	POP	ESI
	MOV	ECX,[TYPE_INT]
		OR	EAX,EAX
		JNS	EXP_NUM.05
		MOV	ECX,[TYPE_UINT]
EXP_NUM.05:

		MOV	DL,[CHR_WORK]
		CMP	DL,'.'
		JNE	EXP_NUM.12
		JMP	EXP_NUM_F

EXP_NUM_F.DOT:
	PUSH	ESI
	MOV	WORD [WORD_WORK2],'0'
	JMP	EXP_NUM_F.DOT10

EXP_NUM_F.01:
	MOV	EDX,ESI
	POP	ESI

	PUSH	ESI
	MOV	BYTE [WORD_WORK2],0
	MOV	ESI,WORD_WORK
	MOV	EDI,WORD_WORK2
	CALL	STRCPY

	MOV	ESI,EDX
	JMP	EXP_NUM_F.02


EXP_NUM_F:
		PUSH	ESI
		MOV	ESI,WORD_WORK
		MOV	EDI,WORD_WORK2
		CALL	STRCPY

		CALL	GET_WORD
EXP_NUM_F.DOT10:
		MOV	ESI,WORD_WORK2
		MOV	EDI,WORD_WORK
		CALL	STRCAT

		MOV	AL,[CHR_WORK]
		CALL	IS_NUMBER
		JNE	EXP_NUM_F.10

		CALL	GET_WORD
		MOV	ESI,WORD_WORK2
		MOV	EDI,WORD_WORK
		CALL	STRCAT

		MOV	ESI,WORD_WORK
		MOV	AL,'E'
		CALL	STRCHR
		OR	ESI,ESI
		JNE	EXP_NUM_F.02

		MOV	ESI,WORD_WORK
		MOV	AL,'e'
		CALL	STRCHR
		OR	ESI,ESI
		JNE	EXP_NUM_F.02
		JMP	EXP_NUM_F.10

EXP_NUM_F.02:
		MOV	AL,[ESI+1]
		CALL	IS_NUMBER
		JE	EXP_NUM_F.10

;		MOV	AL,[CHR_WORK]
;		CALL	TOUPPER
;		CMP	AL,'E'
;		JNE	EXP_NUM_F.10

;		CALL	GET_WORD
;		MOV	ESI,WORD_WORK2
;		MOV	EDI,WORD_WORK
;		CALL	STRCAT

		MOV	AL,[CHR_WORK]
	;	CALL	IS_NUMBER
	;	JE	EXP_NUM_F.05

		CMP	AL,'+'
		JE	EXP_NUM_F.03
		CMP	AL,'-'
		JE	EXP_NUM_F.03

			JMP	EXP_NUM_F.10
		JMP	ERR_SYNTAX
EXP_NUM_F.03:
		CALL	GET_WORD
		MOV	ESI,WORD_WORK2
		MOV	EDI,WORD_WORK
		CALL	STRCAT
EXP_NUM_F.05:
		CALL	GET_WORD
		MOV	ESI,WORD_WORK2
		MOV	EDI,WORD_WORK
		CALL	STRCAT

EXP_NUM_F.10:
		PUSH	WORD_WORK2
		CALL	_GET_F
		;ADD	ESP,4
		POP	EAX
		CMP	BYTE [EAX],0
		;JNE	ERR_NUMBER
		JNE	EXP_NUM_F.ERRNUMBER
		MOV	EAX,EBX

		MOV	ECX,00C4H	;TYPE_FLOAT
		POP	ESI
		JMP	EXP_NUM.15

EXP_NUM_F.ERRNUMBER:
	CALL	DISP_CON
	DB	'($'
	MOV	ESI,WORD_WORK2
	CALL	DISP_STR_CON
	CALL	DISP_CON
	DB	')$'
	JMP	ERR_NUMBER

EXP_NUM.12:
	CMP	BYTE [EBX],'L'
	JE	EXP_NUM.10.L
	CMP	BYTE [EBX],'U'
	JE	EXP_NUM.10.U

	CMP	BYTE [EBX],0
	JNE	ERR_SYNTAX

EXP_NUM.15:
	MOV	[ESI+NODE2],ECX
	MOV	[ESI+NODE4],EAX

	CALL	GET_WORD
	JMP	EXP_TRM.10	;for 1[a] = a[1]

EXP_NUM.10.L:
	;MOV	ECX,0004H
	AND	ECX,80H
	OR	ECX,0004H
	INC	EBX
	JMP	EXP_NUM.12

EXP_NUM.10.U:
	AND	ECX,0FH;7FH
	INC	EBX
	JMP	EXP_NUM.12

EXP_NUM.OCT:
	PUSH	ESI
	MOV	ESI,WORD_WORK
	CALL	GETOCT
	MOV	EBX,ESI
	POP	ESI
	MOV	ECX,[TYPE_INT]
		JMP	EXP_NUM.HEX.10
	JMP	EXP_NUM.12


EXP_NUM.HEX:
	PUSH	ESI
	MOV	ESI,WORD_WORK+2
	CALL	GETHEX
	MOV	EBX,ESI
	POP	ESI
EXP_NUM.HEX.10:
	OR	EAX,EAX
	MOV	ECX,[TYPE_INT]
	JNS	EXP_NUM.HEX.R
	MOV	ECX,[TYPE_UINT]
EXP_NUM.HEX.R:
	JMP	EXP_NUM.12

;

EXP_PAR:
	CALL	GET_WORD	;skip '('
EXP_PAR2:
	CALL	IS_TYPENAME
	JE	EXP_CAST

	CALL	EXP.0

	MOV	AX,')'
	CALL	SKIP_WORD
	JMP	EXP_TRM.10

;	ECX cast type
;	ESI node
EXP_CAST2:
	PUSH	ECX
	JMP	EXP_CAST.1

;

EXP_CAST:
		PUSH	DWORD [FLG.STATIC]
		PUSH	DWORD [FLG.EXTRN]
	CALL	TYPENAME
		POP	DWORD [FLG.EXTRN]
		POP	DWORD [FLG.STATIC]
	PUSH	EBX
	CALL	A_DEF
	POP	EBX
	MOV	[EDI+NODE2],EBX
	MOV	EBX,[ESI+NODE2]	;node __

	PUSH	EBX

	MOV	AX,')'
	CALL	SKIP_WORD

	CALL	EXP_TRM

;	[ESP] cast type
;	ESI node

EXP_CAST.1:
		MOV	EAX,[ESI+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'00'
		JE	EXP_CAST.CONST

		call	COND_TO_ARITH

	MOV	AX,'()'
	CALL	MAKE_WORD1_EXP
	POP	EAX
	MOV	[EBX+NODE2],EAX
	MOV	[EBX+NODE3],ESI
	MOV	[EBX+NODE4],EAX

	MOV	ESI,EBX
	MOV	ECX,EAX
	RET

EXP_CAST.CONST:
	POP	EAX
		MOV	EDX,[ESI+NODE2]	;orig type
	MOV	[ESI+NODE2],EAX

		CMP	EAX,EDX
		JE	EXP_CAST.CONST.10

		CMP	EDX,00C4H
		JE	EXP_CAST.CONST.FTO

		CMP	EAX,100H
		JNB	EXP_CAST.CONST.10

		CMP	EAX,0004H
		JE	EXP_CAST.CONST.10
		CMP	EAX,0084H
		JE	EXP_CAST.CONST.10

		CMP	EAX,0002H
		JE	EXP_CAST.CONST.US
		CMP	EAX,0082H
		JE	EXP_CAST.CONST.S
		CMP	EAX,0001H
		JE	EXP_CAST.CONST.UC
		CMP	EAX,0081H
		JE	EXP_CAST.CONST.C

		CMP	EAX,00C4H
		JE	EXP_CAST.CONST.TOF

		JMP	EXP_CAST.CONST.10

EXP_CAST.CONST.FTO:


EXP_CAST.CONST.FTOL:
	MOV	ECX,EAX

	PUSH	ECX
	PUSH	ESI
	PUSH	DWORD [ESI+NODE4]
	CALL	_ftol
	ADD	ESP,4
	POP	ESI
	POP	ECX

	MOV	EAX,[TYPE_INT]
	MOV	[ESI+NODE2],EAX
	MOV	[ESI+NODE4],EBX

	PUSH	ECX
	JMP	EXP_CAST.CONST
	RET

EXP_CAST.CONST.TOF:
	CMP	EDX,100H
	JNB	EXP_CAST.CONST.10
	TEST	EDX,80H
	JE	EXP_CAST.CONST.UTOF

EXP_CAST.CONST.STOF:
	MOV	ECX,EAX

	PUSH	ECX
	PUSH	ESI
	PUSH	DWORD [ESI+NODE4]
	CALL	_ltof
	ADD	ESP,4
	POP	ESI
	POP	ECX

	MOV	[ESI+NODE4],EBX
	RET

EXP_CAST.CONST.UTOF:
;	CMP	DWORD [ESI+NODE2],100H
;	JNB	EXP_CAST.CONST.10

	MOV	ECX,EAX

	PUSH	ECX
	PUSH	ESI
	PUSH	DWORD [ESI+NODE4]
	CALL	_ultof
	ADD	ESP,4
	POP	ESI
	POP	ECX

	MOV	[ESI+NODE4],EBX
	RET

EXP_CAST.CONST.TOL:
	JMP	EXP_CAST.CONST.10


EXP_CAST.CONST.S:
	MOVSX	EAX,WORD [ESI+NODE4]
	MOV	[ESI+NODE4],EAX
	JMP	EXP_CAST.CONST.SIGN
EXP_CAST.CONST.C:
	MOVSX	EAX,BYTE [ESI+NODE4]
	MOV	[ESI+NODE4],EAX
	JMP	EXP_CAST.CONST.SIGN

EXP_CAST.CONST.US:
	AND	DWORD [ESI+NODE4],0FFFFH
	JMP	EXP_CAST.CONST.USIGN

EXP_CAST.CONST.UC:
	AND	DWORD [ESI+NODE4],0FFH
	JMP	EXP_CAST.CONST.USIGN

;
EXP_CAST.CONST.SIGN:
	MOV	EAX,[TYPE_INT]
	JMP	EXP_CAST.CONST.20
EXP_CAST.CONST.USIGN:
	MOV	EAX,[TYPE_UINT]

EXP_CAST.CONST.20:
	MOV	DWORD [ESI+NODE2],EAX


EXP_CAST.CONST.10:
	MOV	ECX,EAX
	RET

;
;
;
EXP_ARROW:
	CALL	GET_WORD	;skip '->'

	MOV	AX,'*'
	CALL	EXP_LINK

	MOV	ECX,[ECX+NODE2]

	JMP	EXP_DOT.0

;
;
;
EXP_DOT:
	CALL	GET_WORD	;skip '.'
EXP_DOT.0:
	PUSH	ESI
	CALL	EXP_MEMBER
	MOV	EDI,ESI
	MOV	EDX,ECX

		CALL	IS_CPP
		JNE	EXP_DOT.NTCPP

		MOV	ESI,[EXP_MEMBER.T]
		MOV	EAX,[ESI+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'{'
		JNE	EXP_DOT.NTCLASS
		CMP	DWORD [ESI+NODE4],1
		JNE	EXP_DOT.NTCLASS

		MOV	EBX,[EDI+NODE2]
		CMP	EBX,100H
		JB	EXP_DOT.NTCLASS
		MOV	EAX,[EBX+NODE1]
		MOV	AX,[EAX]
;		CMP	AX,'('
;		JNE	EXP_DOT.NTCLASS
			CMP	AX,'*'
			JNE	EXP_DOT.NTCLASS

			MOV	EBX,[EBX+NODE2]
			CMP	EBX,100H
			JB	EXP_DOT.NTCLASS
			MOV	EAX,[EBX+NODE1]
			MOV	AX,[EAX]
			CMP	AX,'('
			JNE	EXP_DOT.NTCLASS

		PUSHAD
		CALL	DISP_CON
		DB	'class.func$'
		POPAD

		CALL	GET_WORD
		MOV	AX,[WORD_WORK]
		CMP	AX,'('
		JNE	ERR_SYNTAX

	;	PUSHAD
	;	MOV	AL,[CHR_WORK]
	;	CALL	UNGETC
	;	MOV	ESI,STR_CLX
	;	CALL	UNGETS
	;	CALL	GET_NCHR
	;	POPAD

		MOV	AX,'.'
		CALL	MAKE_WORD1_EXP
		POP	ESI
		;MOV	[EBX+NODE2],ESI
			MOV	EAX,[ESI+NODE2]	;node '{'
			MOV	EAX,[EAX+NODE6]	;class name
			MOV	[EBX+NODE2],EAX
		MOV	[EBX+NODE3],EDI
		MOV	DWORD [EBX+NODE4],1

		PUSH	ESI

		MOV	ESI,EBX
		MOV	ECX,[EDI+NODE2]
		CALL	EXP_FNC

		;insert self as 1st arg

		POP	EBX

			PUSH	ECX

		PUSH	ESI
		MOV	ESI,EBX
		MOV	AX,'&'
		CALL	EXP_LINK
		MOV	EBX,ESI
		POP	ESI

		MOV	EAX,[ESI+NODE3]
		CMP	EAX,-1
		JNE	EXP_DOT.C50

		MOV	[ESI+NODE3],EBX

		JMP	EXP_DOT.C60
EXP_DOT.C50:
		PUSH	DWORD [ESI+NODE3]
		PUSH	EBX
		MOV	AX,','
		CALL	MAKE_WORD1_EXP
		POP	EAX
		MOV	[EBX+NODE2],EAX
		POP	DWORD [EBX+NODE3]

		MOV	[ESI+NODE3],EBX

EXP_DOT.C60:
			POP	ECX

		RET

EXP_DOT.NTCLASS:
EXP_DOT.NTCPP:

	MOV	AX,'.'
	CALL	MAKE_WORD1_EXP
	POP	ESI
	MOV	[EBX+NODE2],ESI
	MOV	[EBX+NODE3],EDI

	MOV	ESI,EBX
	MOV	ECX,EDX		;member
	MOV	ECX,[ECX+NODE2]

	CALL	GET_WORD
	JMP	EXP_TRM.10

;STR_CLX:
;	DB	'(&clx',0

;
;	ECX:struct type node '{'
;	ESI:node '{'
;	>ECX=ESI member name node

EXP_MEMBER:
	MOV	[EXP_MEMBER.T],ECX

		PUSHAD
		MOV	AL,'M'+80H
		CALL	ADD_POST
		POPAD

		cmp	ecx,100h
		jb	err_struct

	MOV	EBX,[ECX+NODE1]
		cmp	ebx,100h
		jb	err_struct
	MOV	AX,[EBX]
	CMP	AX,'{'
	JNE	ERR_STRUCT

	MOV	ESI,[ECX+NODE3]
EXP_MEMBER.10:
	OR	ESI,ESI
	JE	ERR_MEMBER
	PUSH	ESI
	MOV	ESI,[ESI+NODE1]
	MOV	EDI,WORD_WORK
	CALL	STRCMP
	POP	ESI
	JE	EXP_MEMBER.50

	MOV	ESI,[ESI+NODE3]
	JMP	EXP_MEMBER.10


EXP_MEMBER.50:
		CMP	ESI,100H	;###EC13
		JB	EXP_MEMBER.51

		MOV	EAX,[ESI+NODE2]
		CMP	EAX,100H
		JB	EXP_MEMBER.51
		MOV	EAX,[EAX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'bt'+8080H
		JE	EXP_MEMBER.BITF
EXP_MEMBER.51:
	MOV	ECX,ESI		;node <member name>
	RET

EXP_MEMBER.BITF:			;###EC13
	MOV	ECX,[TYPE_UINT]
	RET


;

ERR_STRUCT:
	CALL	DISP_SI_CX
	CALL	DISP_CON
	DB	'err_struct$'
	JMP	ERR_TYPE

ERR_MEMBER:
	CALL	DISP_CON
	DB	'err_member!$'

	MOV	ESI,[EXP_MEMBER.T]
ERR_MEMBER.10:
	MOV	ESI,[ESI+NODE3]
	OR	ESI,ESI
	JE	ERR_MEMBER.20

	PUSH	ESI
	MOV	ESI,[ESI+NODE1]
	CALL	DISP_STR_CON
	CALL	DISP_CON
	DB	'/$'
	POP	ESI
	JMP	ERR_MEMBER.10

ERR_MEMBER.20:
	JMP	ERR_TYPE

;

EXP_ARY:

EXP_ARY2:
	MOV	AX,'['
	CALL	SKIP_WORD

	PUSH	ESI
	PUSH	ECX
	CALL	EXP
		CALL	COND_TO_ARITH
	MOV	EDI,ESI
	MOV	EDX,ECX
	POP	ECX
	POP	ESI

	PUSH	ECX
	MOV	AX,'+'
	CALL	EXP_2TRM.10
	POP	ECX

	MOV	AX,'*'
	CALL	EXP_LINK

	MOV	ECX,[ECX+NODE2]

	MOV	AX,']'
	CALL	SKIP_WORD

	MOV	AX,[WORD_WORK]
	CMP	AX,'['
	JE	EXP_ARY2

;EXP_ARY2.E:
	JMP	EXP_TRM.10


;
;
;

EXP_INC:
		CALL	GET_WORD
		MOV	BX,'++'
EXP_INC.0:
		CALL	EXP_INCDEC
EXP_INC.1:
	MOV	EBX,ESI		;??

		JMP	EXP_TRM.10
	RET

EXP_DEC:
		CALL	GET_WORD
		MOV	BX,'--'
		JMP	EXP_INC.0

;		CALL	EXP_INCDEC
;	JMP	EXP_INC.1

;
;
;
FNC.EXP:
	MOV	EDX,EBX
	MOV	EDX,[EDX+NODE3]
FNC.EXP.0:
		PUSH	EDX
	CALL	EXP_L
		POP	EDX
FNC.EXP.05:
	CMP	EDX,-1
	JE	FNC.EXP.052

	OR	EDX,EDX
	JE	FNC.EXP.052

;	MOV	EAX,[EDX+NODE2]
;	CMP	ECX,EAX
;	JE	FNC.EXP.051
		PUSHAD
		MOV	EDX,[EDX+NODE2]
		CALL	COMPARE_TYPE
		POPAD
		JE	FNC.EXP.051

		CMP	ECX,00C4H
		SUB	AH,AH
		CMP	EDX,00C4H
		SUB	AL,AL
		CMP	AX,0000H
		JE	FNC.EXP.0501
		CMP	AX,0FFFFH
		JE	FNC.EXP.0501

		PUSHAD
		CALL	DISP_CON
		DB	07H,'!!!!!!!!!!!!!$'
		POPAD

FNC.EXP.0501:
		PUSHAD
		CALL	DISP_CON
		DB	'arg type differ$'
		POPAD
		PUSHAD
			PUSH	EDX
		MOV	EAX,ECX
		CALL	DISP_AX
			POP	EDX
		MOV	EAX,[EDX+NODE2]
		CALL	DISP_AX
		POPAD
FNC.EXP.051:
	MOV	EDX,[EDX+NODE3]
FNC.EXP.052:
	MOV	AL,[WORD_WORK]
	CMP	AL,','
	JE	FNC.EXP_COMMA
	RET

FNC.EXP_COMMA:
	INC	DWORD [ARG_CNT]

		PUSH	EDX
	MOV	AX,','
	MOV	EDX,EXP_L
	CALL	EXP_2TRM_LET_COMMA
		POP	EDX

	JMP	FNC.EXP.05


;
;
;

EXP_FNC:
	MOV	DWORD [ARG_CNT],0

		CMP	ECX,100H
		JB	ERR_TYPE	;###

	MOV	EBX,[ECX+NODE1]
	MOV	AX,[EBX]	;AL->AX
	CMP	AX,'('		;AL->AX
	;JNE	ERR_TYPE
	JE	EXP_FNC.05

		CMP	AX,'*'
		JNE	ERR_TYPE
		MOV	EAX,[ECX+NODE2]
		MOV	EAX,[EAX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'('
		JNE	ERR_TYPE

		MOV	AX,'*'
		CALL	EXP_LINK
		MOV	ECX,[ECX+NODE2]

EXP_FNC.05:
		MOV	EBX,ECX
	MOV	ECX,[ECX+NODE2]

	PUSH	ESI
	PUSH	ECX

	CALL	GET_WORD
	MOV	AX,[WORD_WORK]
	CMP	AX,')'
	MOV	EDI,-1
	JE	EXP_FNC.10

	;CALL	EXP
		PUSH	EDX
		CALL	FNC.EXP
		POP	EDX
	CALL	COND_TO_ARITH	;###
	MOV	EDI,ESI

	MOV	AX,[WORD_WORK]
	CMP	AX,')'
	JNE	ERR_SYNTAX

EXP_FNC.10:
	MOV	AX,'('
	CALL	MAKE_WORD1_EXP
	MOV	ESI,EBX

	POP	ECX
	POP	EBX
	MOV	[ESI+NODE2],EBX
	MOV	[ESI+NODE3],EDI

	;	CMP	ECX,100H
	;	JB	EXP_FNC.CHK.E
	;	MOV	EAX,[ECX+NODE1]
	;	MOV	AX,[EAX]
	;	CMP	AX,'{'
	;	JE	ERR_TYPE

EXP_FNC.CHK.E:
	CALL	GET_WORD
;	RET
	JMP	EXP_TRM.10



;
;	>SI:
;	>CX:
;

EXP_ADR:
	CALL	GET_WORD	;skip '&'
	CALL	EXP_TRM

	MOV	AX,'&'		;ESI=exp_link('&',ESI)
	CALL	EXP_LINK
	PUSH	ESI

	MOV	ESI,ECX		;ECX=exp_link('*',ECX)
	MOV	AX,'*'
	CALL	EXP_LINK
	MOV	ECX,ESI

	POP	ESI
	RET

;
;	>SI:pnt
;	>CX:type
;

EXP_PNT:
	CALL	GET_WORD	;skip '*'
	CALL	EXP_TRM

	MOV	AX,'*'
	CALL	EXP_LINK

	CMP	ECX,100H
	JB	ERR_TYPE

	MOV	ECX,[ECX+NODE2]
	RET

;	AX:word
;	ESI:node
;	>ESI:node

EXP_LINK:
	PUSH	ESI
	PUSH	ECX
	CALL	MAKE_WORD1_EXP
	POP	ECX
	POP	ESI
	MOV	[EBX+NODE2],ESI
	MOV	ESI,EBX
	RET

