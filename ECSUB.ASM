
;
USAGE:
	MOV	EDX,MES_USAGE
	CALL	SYS_putstr

	MOV	AL,00H
	CALL	SYS_exit

;
;	PRINT:	add '%m'
;

;
;
;
DISP_SI_CX:
	PUSHAD

	PUSH	ECX
	MOV	EBX,ESI
	CALL	PUTHEXW
	CALL	PUTSPC
	POP	ECX
	MOV	EBX,ECX
	CALL	PUTHEXW
	CALL	PUTSPC

	POPAD
	RET

DISP_AX:
	PUSHAD
	MOV	EBX,EAX
	PUSH	EBX
	SHR	EBX,10H
	CALL	PUTHEXW
	POP	EBX
	CALL	PUTHEXW

	POPAD
	RET

;
;
;
PRINT_LABEL:
	PUSH	EBX
	CALL	PRINT
;	DB	'_%d:',0DH,0AH,'$'
		DB	'_%m:',0DH,0AH,'$'
	RET


PRINT_LABEL_NOCRLF:
	PUSH	EBX
	CALL	PRINT
	DB	'_%m:','$'
	RET
;
;
;
JMP_LABEL:
	PUSH	EBX
	CALL	PRINT
;	DB	'	jmp	_%d',0DH,0AH,'$'
		DB	'	jmp	_%m',0DH,0AH,'$'
	RET

JMP_LABEL_NOCRLF:
	PUSH	EBX
	CALL	PRINT
	DB	'	jmp	_%m','$'
	RET

d:	PUSHAD
	CALL	DISP
	DB	'%$'
	POPAD
	RET


;
;
;
SKIP_WORD:
	CMP	AX,[WORD_WORK]
	JNE	SKIP_WORD.10
	CALL	GET_WORD
	RET
SKIP_WORD.10:
	MOV	BYTE [FLG.D],0FFH
	MOV	BYTE [FLG.V],0FFH
	PUSH	EAX
	CALL	DISP_CON
	DB	'expected $'
	POP	EAX
	PUSH	EAX
	CALL	DOS02
	POP	EAX
	MOV	AL,AH
	CALL	DOS02
	JMP	ERR_SYNTAX

;
;	EAX>EAX
;
PROMOTED_TYPE:
	CMP	EAX,100H
	JNB	PROMOTED_TYPE.R

	CMP	EAX,0001H
	JE	PROMOTED_TYPE.I;UI
	CMP	EAX,0002H
	JE	PROMOTED_TYPE.I;UI

	CMP	EAX,0081H
	JE	PROMOTED_TYPE.I
	CMP	EAX,0082H
	JE	PROMOTED_TYPE.I

	JMP	PROMOTED_TYPE.R

PROMOTED_TYPE.UI:
	MOV	EAX,[TYPE_UINT]
	JMP	PROMOTED_TYPE.R

PROMOTED_TYPE.I:
	MOV	EAX,[TYPE_INT]

PROMOTED_TYPE.R:
	RET

;
;from FNC_EXP
;
;	ECX
;	EDX (arg in prototype)
;
COMPARE_TYPE:
	CMP	ECX,EDX		;both scalar / struct(union)
	JE	COMPARE_TYPE.Y

	CMP	ECX,100H
	SBB	AH,AH
	CMP	EDX,100H
	SBB	AL,AL

	CMP	AX,00FFH
	JE	COMPARE_TYPE.N
	CMP	AX,0FF00H
	JE	COMPARE_TYPE.N

	CMP	AX,0000H
	JE	COMPARE_TYPE.2

	MOV	EAX,ECX
	CALL	PROMOTED_TYPE
	MOV	ECX,EAX

	MOV	EAX,EDX
	CALL	PROMOTED_TYPE
	MOV	EDX,EAX

	CMP	ECX,EDX
	JE	COMPARE_TYPE.Y

	MOV	EAX,ECX		;void|char/void|char
	OR	EAX,EDX
	CMP	EAX,1
	JBE	COMPARE_TYPE.Y

	JMP	COMPARE_TYPE.N

COMPARE_TYPE.2:
	MOV	EAX,[ECX+NODE1]
	MOV	AX,[EAX]

	MOV	EBX,[EDX+NODE1]
	MOV	BX,[EBX]

	CMP	AX,'*'
	JE	COMPARE_TYPE.PNT
	CMP	AX,'['
	JE	COMPARE_TYPE.PAR

	JMP	COMPARE_TYPE.N


COMPARE_TYPE.PNT:
	CMP	BX,'*'
	JNE	COMPARE_TYPE.N

	MOV	ECX,[ECX+NODE2]
	MOV	EDX,[EDX+NODE2]
	CALL	COMPARE_TYPE
	RET

COMPARE_TYPE.PAR:
	JMP	COMPARE_TYPE.PNT

COMPARE_TYPE.N:
	XOR	EAX,EAX
	INC	EAX
	RET

COMPARE_TYPE.Y:
	XOR	EAX,EAX
	RET

;
;	SI:
;	DI:
;

CMPTYP:
	MOV	BX,[SI+NODE1]
	MOV	CX,[BX]
	MOV	BX,[DI+NODE1]
	MOV	DX,[BX]

	OR	CH,CH
	JE	CMPTYP.10

	CMP	CX,DX
	JE	CMPTYP.10


	RET

CMPTYP.10:
	OR	CH,CH
	JE	CMPTYP.EQ


CMPTYP.EQ:
	XOR	AL,AL
	RET


DISP2:	POP	ESI
DISP2.10:
	MOV	AL,[ESI]
	INC	ESI
	CMP	AL,'$'
	JE	DISP.E
	PUSH	ESI
	CALL	DOS02_2
	POP	ESI
	JMP	DISP2.10
DISP2.E:
	PUSH	ESI
	RET

;
;
;

DISP_STR_CON:
	MOV	AL,[ESI]
	INC	ESI
	OR	AL,AL
	JE	DISP_STR_CON.E
	CMP	AL,'$'
	JE	DISP_STR_CON.E
	PUSH	ESI
	CALL	PUTCHR_CON
	POP	ESI
	JMP	DISP_STR_CON

DISP_STR_CON.E:
	RET

;
;
;

DISP_CON:
	POP	ESI
DISP_CON.10:
	MOV	AL,[ESI]
	INC	ESI
	OR	AL,AL
	JE	DISP_CON.E
	CMP	AL,'$'
	JE	DISP_CON.E
	PUSHAD
	CALL	PUTCHR_CON
	POPAD
	JMP	DISP_CON.10
DISP_CON.E:
	PUSH	ESI
	RET

;
;
;

DISP:	POP	ESI

DISP.10:
	MOV	AL,[ESI]
	INC	ESI
	CMP	AL,'$'
	JE	DISP.E
	CMP	BYTE [FLG.D],0
	JE	DISP.20
	PUSH	ESI
	MOV	DL,AL
	CALL	SYS_putchr
	POP	ESI
DISP.20:
	JMP	DISP.10
DISP.E:
	PUSH	ESI
	RET

;
;
;

PRINT:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,4*8

;	MOV	[ESI_SAVE],ESI
;	MOV	[EBX_SAVE],EBX
;	POP	ESI

	MOV	[EBP-4*1],EAX
	MOV	[EBP-4*2],EBX
	MOV	[EBP-4*3],ECX
	MOV	[EBP-4*4],EDX
	MOV	[EBP-4*5],ESI
	MOV	[EBP-4*6],EDI

	MOV	ESI,[EBP+4]	;ret.adrs
	LEA	EDI,[EBP+8]

PRINT.10:
	MOV	AL,[ESI]
	INC	ESI
	CMP	AL,'%'
	JE	PRINT_P
	CMP	AL,'$'
	JE	PRINT.E
	CMP	AL,'!'
	JE	PRINT.EX
	PUSH	ESI
	CALL	PUTCHR
	POP	ESI
	JMP	PRINT.10
PRINT.E:
	MOV	[PRINT.VEIP],ESI	;ret.adrs	<-
	MOV	[PRINT.VESP],EDI

;	PUSH	ESI
;	MOV	ESI,[ESI_SAVE]
;	MOV	EBX,[EBX_SAVE]

	MOV	EAX,[EBP-4*1]
	MOV	EBX,[EBP-4*2]
	MOV	ECX,[EBP-4*3]
	MOV	EDX,[EBP-4*4]
	MOV	ESI,[EBP-4*5]
	MOV	EDI,[EBP-4*6]

	ADD	ESP,4*8

	POP	EBP

;PRINT.VESP EQU $+1
;	MOV	ESP,0
;PRINT.VEIP EQU $+1
;	PUSH	DWORD 0

	MOV	ESP,[PRINT.VESP]
	PUSH	DWORD [PRINT.VEIP]

	RET

PRINT.EX:
	CMP	BYTE [FLG.L],0
	JE	PRINT.10
	MOV	AL,'E'
	PUSH	ESI
	CALL	PUTCHR
	POP	ESI
	JMP	PRINT.10



PRINT_P:
		;PUSHAD
		;MOV	AL,'%'
		;CALL	PUTCHR_CON
		;MOV	AL,[ESI]
		;CALL	PUTCHR_CON
		;POPAD

	MOV	AL,[ESI]
	INC	ESI
	CMP	AL,'s'
	JE	PRINT_P.S

		CMP	AL,'v'
		JE	PRINT_P.V

	CMP	AL,'n'
	JE	PRINT_P.N
	CMP	AL,'d'
	JE	PRINT_P.D

	CMP	AL,'m'		;Mark label
	JE	PRINT_P.LBL

	CMP	AL,'L'
	JE	PRINT_P.LL
	CMP	AL,'D'
	JE	PRINT_P.DD
	CMP	AL,'W'
	JE	PRINT_P.WW
	CMP	AL,'B'
	JE	PRINT_P.BB
	CMP	AL,'r'
	JE	PRINT_P.R
	CALL	IS_NUMBER
	JE	PRINT_P.NO

	CALL	DISP_CON
	DB	'inner error<PRINT_P>$'
	JMP	ERR_SYNTAX
;
PRINT_P.S:
;	POP	EBX
		MOV	EBX,[EDI]
		ADD	EDI,4
	;JMP	PRINT_P.N.GLOBAL
		CALL	PRINT_P.N.GLOBAL
		JMP	PRINT.10

;	[var]/register
PRINT_P.V:
;	POP	EBX
		MOV	EBX,[EDI]
		ADD	EDI,4

	CMP	EBX,[REGISTER_EDI]
	JNE	PRINT_P.V.RGN

	;CALL	PRINT
	;DB	'EDI','$'
	MOV	AL,'E'
	CALL	PUTCHR
	MOV	AL,'D'
	CALL	PUTCHR
	MOV	AL,'I'
	CALL	PUTCHR
	JMP	PRINT.10

PRINT_P.V.RGN:
	MOV	AL,'['
	CALL	PUTCHR

	CALL	PRINT_P.N#

	MOV	AL,']'
	CALL	PUTCHR
	JMP	PRINT.10

;
PRINT_P.N:
;	POP	EBX
		MOV	EBX,[EDI]
		ADD	EDI,4

		CALL	PRINT_P.N#
		JMP	PRINT.10
;
;
;

PRINT_P.N#:
	MOV	EAX,[EBX+NODE6]
	OR	EAX,EAX
	;TEST	EAX,1
	JNE	PRINT_P.N.STATIC

	MOV	EAX,[EBX+NODE7]
	OR	EAX,EAX
	JE	PRINT_P.N.GLOBAL
	JNS	PRINT_P.N.ARG
	JS	PRINT_P.N.LOCAL

PRINT_P.N.GLOBAL:
	MOV	AX,'_'
	CALL	PUTCHR
	MOV	EBX,[EBX+NODE1]	;string
	CALL	PUT_STRZ
	;JMP	PRINT.10
		RET

PRINT_P.N.ARG:
		PUSHAD
		MOV	EAX,[FUNC_PNT]
		CMP	EAX,[EBX+NODE8]
		JE	PRINT_P.N.ARG.CHKE
		CALL	DISP_CON
		DB	'refer to prototype arg$'
PRINT_P.N.ARG.CHKE:

		POPAD

PRINT_P.N.LOCAL:
	PUSH	EAX
	CMP	BYTE [FLG.L],0
	JE	PRINT_P.N.LOCAL.10
	MOV	AL,'E'
	CALL	PUTCHR
PRINT_P.N.LOCAL.10:
	MOV	EBX,STR_BP_PLUS
	CALL	PUT_STRZ
	POP	EBX
	OR	EBX,EBX
	JS	PRINT_P.N.LOCAL.15
	PUSH	EBX
	MOV	AL,'+'
	CALL	PUTCHR
	POP	EBX
	CALL	PUT_HEXW_H
	;JMP	PRINT.10
		RET

PRINT_P.N.LOCAL.15:
	PUSH	EBX
	MOV	AL,'-'
	CALL	PUTCHR
	POP	EBX
	NEG	EBX
	CALL	PUT_HEXW_H
	;JMP	PRINT.10
		RET

STR_BP_PLUS:DB	'BP',0

PRINT_P.N.STATIC:
	CMP	DWORD [EBX+NODE8],0
	JE	PRINT_P.N.GLOBAL

		PUSH	EAX
		MOV	EAX,[EBX+NODE2]
		CMP	EAX,100H
		JB	PRINT_P.N.STATIC.10
		MOV	EAX,[EAX+NODE1]
		MOV	AX,[EAX]
		CMP	AX,'('
PRINT_P.N.STATIC.10:
		POP	EAX
		JE	PRINT_P.N.GLOBAL

	PUSH	EBX

	PUSH	EBX
	MOV	AL,'_'
	CALL	PUTCHR
	POP	EBX
	MOV	EBX,[EBX+NODE8]
	MOV	EBX,[EBX+NODE1]
	CALL	PUT_STRZ
	MOV	AL,'.'
	CALL	PUTCHR

	POP	EBX

		JMP	PRINT_P.N.GLOBAL	;$$$
	;	this makes
	;	int g(){static abc;}
	;	int h(){static abc;}
	;	be same name

	PUSH	EAX
	MOV	AL,'_'
	CALL	PUTCHR
	POP	EBX

	MOV	EBX,[EBX+NODE4]	;MOV	BX,[EBX+2*8]
	;CALL	PUT_HEXW_H
	CALL	PUT_LBL_H

	;JMP	PRINT.10
		RET


;
PRINT_P.D:
;	POP	EBX
		MOV	EBX,[EDI]
		ADD	EDI,4
	MOV	EBX,[EBX+NODE4]
	;CALL	PUT_HEXW_H
		CALL	PUT_HEXL_H

	JMP	PRINT.10

PRINT_P.LBL:
;	POP	EBX
		MOV	EBX,[EDI]
		ADD	EDI,4
	MOV	EBX,[EBX+NODE4]
	CALL	PUT_LBL_H
	JMP	PRINT.10

PRINT_P.LL:
	MOV	EBX,[EBP-4*2]	;[EBX_SAVE]
	CALL	PUT_HEXL_H
	JMP	PRINT.10

PRINT_P.WW:
	MOV	BX,[EBP-4*2]	;[EBX_SAVE]
	CALL	PUT_HEXW_H
	JMP	PRINT.10
PRINT_P.DD:
	;MOV	BX,[EBX_SAVE]
	MOV	EBX,[EBP-4*2]	;[EBX_SAVE]
	CMP	EBX,10000H
	JNB	PRINT_P.DD.10
	CALL	PUT_HEXW_H
	JMP	PRINT.10
PRINT_P.DD.10:
	CALL	PUT_HEXL_H
	JMP	PRINT.10

PRINT_P.BB:
	MOV	BL,[EBP-4*2]	;[EBX_SAVE]
	CALL	PUT_HEXB_H
	JMP	PRINT.10

PRINT_P.R:
	MOV	EBX,[REG_NAME]
	CALL	PUT_STRZ
	JMP	PRINT.10

PRINT_P.NO:
	SUB	AL,'0'
	MOVZX	EAX,AL
	SHL	EAX,2
	ADD	EAX,PRINT_ARG
	MOV	EBX,EAX
	MOV	EBX,[EBX]
	CALL	PUT_STRZ
	JMP	PRINT.10



;
SCANB:
	CMP	AL,[ESI]
	JE	SHORT SCANB_R
	INC	ESI
	LOOP	SCANB
	OR	CL,1	;make nz

SCANB_R:
	RET

;
;
;
INIT_IS_12TOKEN:
	MOV	AL,0
	MOV	EDI,IS_TBL

	PUSH	EDI
	PUSH	EAX
	MOV	EBP,ESP

INIT_IS_12TOKEN.10:
	MOV	AL,[EBP+0]

	CALL	IS_1TOKEN.0
	MOV	BL,1
	CALL	INIT_IS_12TOKEN_SUB

	CALL	IS_2TOKEN.0
	MOV	BL,2
	CALL	INIT_IS_12TOKEN_SUB

	CALL	IS_SEPARATOR.0
	MOV	BL,4
	CALL	INIT_IS_12TOKEN_SUB

	CALL	IS_CCHR.0
	MOV	BL,8
	CALL	INIT_IS_12TOKEN_SUB


	INC	DWORD [EBP+4]

	INC	BYTE [EBP+0]
	JNE	INIT_IS_12TOKEN.10

	POP	EAX
	POP	EAX
	RET

;
INIT_IS_12TOKEN_SUB:
	MOV	BH,0
	JE	INIT_IS_12TOKEN_SUB.10
	MOV	BH,BL
INIT_IS_12TOKEN_SUB.10:
	MOV	EDI,[EBP+4]
	OR	[EDI],BH

	MOV	AL,[EBP+0]
	RET

;


;
IS_1TOKEN:
	PUSH	EAX
	MOVZX	EAX,AL
	TEST	BYTE [EAX+IS_TBL],01H
	POP	EAX
	RET

;
IS_2TOKEN:
	PUSH	EAX
	MOVZX	EAX,AL
	TEST	BYTE [EAX+IS_TBL],02H
	POP	EAX
	RET
;
IS_SEPARATOR:
	PUSH	EAX
	MOVZX	EAX,AL
	TEST	BYTE [EAX+IS_TBL],04H
	POP	EAX
	RET
;
IS_CCHR:
	PUSH	EAX
	MOVZX	EAX,AL
	TEST	BYTE [EAX+IS_TBL],08H
	POP	EAX
	RET

;
;
;

IS_1TOKEN.0:
	PUSH	ESI
	PUSH	ECX

	MOV	ESI,TBL_1TOKEN
	MOV	ECX,16
	CALL	SCANB

	POP	ECX
	POP	ESI
	RET


	PUSH	ES
	PUSHAD

	PUSH	DS
	POP	ES

	MOV	EDI,TBL_1TOKEN
	MOV	ECX,16
	CLD
	REPNE
	SCASB
	POPAD
	POP	ES
	RET

	JE	IS_1TOKEN.Y

IS_1TOKEN.N:
	JMP	MAKE_NZ

IS_1TOKEN.Y:
	JMP	MAKE_ZR

TBL_1TOKEN:
	DB	'?~()[]{}.,:;','"',"'"
	DB	1AH
	DB	'#'

;
IS_2TOKEN.0:
	PUSH	ESI
	PUSH	ECX

	MOV	ESI,TBL_2TOKEN
	MOV	ECX,12
	CALL	SCANB

	POP	ECX
	POP	ESI
	RET


	PUSH	ES
	PUSHAD

	PUSH	DS
	POP	ES
	MOV	EDI,TBL_2TOKEN
	MOV	ECX,12
	REPNE
	SCASB
	POPAD
	POP	ES
	RET


TBL_2TOKEN:
	DB	'!&|^+-*/%=<>'



;

GET_WORD4:
	CALL	GET_WORD3
GET_WORD4.0:
	CMP	BYTE [FLG.PREP],0
	JNE	GET_WORD4.05

	MOV	AL,[WORD_WORK]
	CMP	AL,'#'
	JE	PREP
GET_WORD4.05:

;	JMP	GET_WORD4.R	;test

	;MOV	AL,[WORD_WORK]
	;CMP	AL,'@'
	;JB	GET_WORD4.R
		CALL	IS_CCHR_F
		JNE	GET_WORD4.R

	MOV	BYTE [FLG.SET_STRING_MACRO],0FFH
	CALL	SEARCH_WORD_MACRO
	MOV	BYTE [FLG.SET_STRING_MACRO],0
	JB	GET_WORD4.R

		MOV	ESI,WORD_WORK
		MOV	EDI,MACRO_NAME
		CALL	STRCPY

	PUSH	DWORD [WORD_WORK_MACRO_PARAM_INFO]
	POP	DWORD [WORD_WORK_MACRO_PARAM_INFO+INFO2]
		MOV	DWORD [WORD_WORK_MACRO_PARAM_INFO+INFO3],0

	MOV	ES,[STRING_MACRO_SEG]

	MOV	ESI,[EBX+NODE2]
		CMP	ESI,100H
		JB	GET_WORD4.R

	MOV	EBX,[ESI+NODE1]
	MOV	AX,[ES:EBX]	;ES:[EBX]
	PUSH	DS
	POP	ES
	CMP	AX,'DF'
	JNE	GET_WORD4.R

;ESI:node 'DF'
		MOV	EAX,[ESI+NODE4]

	MOV	EDI,[ESI+NODE3]	;param.
	MOV	ESI,[ESI+NODE2]	;string

	OR	EDI,EDI
	JNE	MACRO

		OR	EAX,EAX
		JE	GET_WORD4.15

		CALL	GET_WORD3
		MOV	AX,[WORD_WORK]
		CMP	AX,'('
		JNE	ERR_MACRO
		CALL	GET_WORD3
		MOV	AX,[WORD_WORK]
		CMP	AX,')'
		JNE	ERR_MACRO
		JMP	GET_WORD4.15

	;	MOV	AL,[CHR_WORK]
	;	CMP	AL,'('
	;	JNE	ERR_MACRO
	;	CALL	GET_NCHR
	;	MOV	AL,[CHR_WORK]
	;	CMP	AL,')'
	;	JNE	ERR_MACRO
	;	CALL	GET_NCHR
	;	JMP	GET_WORD4.15

	MOV	AL,[CHR_WORK]
	CMP	AL,'('
	JNE	GET_WORD4.15
	CALL	GET_NCHR
	MOV	AL,[CHR_WORK]
	CMP	AL,')'
	JNE	ERR_MACRO

	CALL	GET_NCHR

GET_WORD4.15:
	MOV	AL,[CHR_WORK]
	CALL	UNGETC

;	PUSH	ES
;	MOV	ES,[STRING_MACRO_SEG]
;	CALL	UNGETS			;ESI:adrs
;	POP	ES

	PUSH	ES
	PUSH	EDI

	MOV	AX,DS
	MOV	ES,AX
	MOV	EDI,WORD_WORK3
	MOV	DL,0
GET_WORD4.16:
	MOV	AL,[ESI]
	MOV	[EDI],AL

	TEST	DL,1
	JNE	GET_WORD4.17

	CMP	AL,'#'
	JNE	GET_WORD4.17
	CMP	BYTE [ESI+1],'#'
	JNE	GET_WORD4.17
	INC	ESI
	INC	ESI
	JMP	GET_WORD4.16

GET_WORD4.17:

	OR	AL,AL
	JE	GET_WORD4.19

	CMP	AL,'"'
	JNE	GET_WORD4.18
	XOR	DL,1
GET_WORD4.18:

	INC	ESI
	INC	EDI
	JMP	GET_WORD4.16

GET_WORD4.19:
		PUSHAD
		MOV	EAX,[WORD_WORK3]
		AND	EAX,0FFFFFFH
		CMP	EAX,'il'+8080H
		JE	GET_WORD4.LINE
		CMP	EAX,'if'+8080H
		JE	GET_WORD4.FILE
		CMP	EAX,'it'+8080H
		JE	GET_WORD4.TIME
		JMP	GET_WORD4.199
GET_WORD4.LINE:
		MOV	EDI,WORD_WORK3
		MOV	EBX,[LIN.NO]
		CALL	SETDECW
		JMP	GET_WORD4.199

GET_WORD4.FILE:
		MOV	BYTE [WORD_WORK3],'"'
		MOV	ESI,FILE1
		MOV	EDI,WORD_WORK3+1
		CALL	STRCPY
		MOV	ESI,WORD_WORK3
		MOV	AL,'"'
		CALL	ADD_POST_ESI
		JMP	GET_WORD4.199
GET_WORD4.TIME:
		CALL	SYS_gettime
		PUSH	EDX
		PUSH	ECX
		MOV	EDI,WORD_WORK3+1
		;MOV	EBX,01
		MOVZX	EBX,CH
		MOV	DL,1
		CALL	SETDECW.2
		POP	ECX
		MOV	EDI,WORD_WORK3+4
		;MOV	EBX,23
		MOVZX	EBX,CL
		CALL	SETDECW.2
		POP	EDX
		MOV	EDI,WORD_WORK3+7
		;MOV	EBX,45
		MOVZX	EBX,DH
		CALL	SETDECW.2

		MOV	BYTE [WORD_WORK3],'"'
		MOV	AL,':'
		MOV	[WORD_WORK3+3],AL
		MOV	[WORD_WORK3+6],AL

		MOV	ESI,WORD_WORK3
		MOV	AL,'"'
		CALL	ADD_POST_ESI
		JMP	GET_WORD4.199

GET_WORD4.199:
		POPAD

	MOV	ESI,WORD_WORK3
	CALL	UNGETS

	POP	EDI
	POP	ES

GET_WORD4.20:

	CALL	GET_NCHR
	CALL	GET_WORD4	;3
	JMP	GET_WORD4.R


GET_WORD4.R:
	PUSH	DS
	POP	ES
	RET

UNGET_WORD:
	PUSH	ES

	PUSH	DS
	POP	ES
	MOV	ESI,WORD_WORK
	CALL	UNGETS

	POP	ES
	RET

;
;	ES:SI:string
;

UNGETS:	MOV	ECX,0
	DEC	ECX
UNGETS.10:
	INC	ECX
	MOV	AL,[ES:ESI]	;ES:[ESI]
	INC	ESI
	OR	AL,AL
	JNE	UNGETS.10

	OR	ECX,ECX
	JE	UNGETS.30

	DEC	ESI
UNGETS.20:
	DEC	ESI
	MOV	AL,[ES:ESI]	;ES:[ESI]
	PUSH	ESI
	CALL	UNGETC
	POP	ESI
	LOOP	UNGETS.20

UNGETS.30:
	RET


;
GET_WORD3:
	CALL	GET_WORD2

	MOV	AX,[WORD_WORK]

		CMP	AX,'//'
		JE	GET_WORD3.20

	CMP	AX,'/*'
	JNE	GET_WORD3.R
GET_WORD3.10:
	CALL	GET_WORD2
	MOV	AX,[WORD_WORK]
	CMP	AL,1AH
	JE	GET_WORD3.EOF
	CMP	AX,'*/'
	JNE	GET_WORD3.10
	JMP	GET_WORD3

GET_WORD3.20:
	MOV	AL,[CHR_WORK]
	CMP	AL,0AH
	JE	GET_WORD3.25
	CALL	GET_NCHR
	JMP	GET_WORD3.20

GET_WORD3.25:
	JMP	GET_WORD3

GET_WORD3.R:
	RET

GET_WORD3.EOF:
	CALL	DISP_CON
	DB	'eof in comment$'
	JMP	ERR_SYNTAX
;
;
;
GET_WORD2:
	MOV	AX,[CHR_WORK]
;	CMP	AL,1AH
;	JE	MAIN_E
	CALL	IS_SEPARATOR
	JNE	GET_WORD2.10
	CALL	GET_NCHR
	JMP	GET_WORD2

GET_WORD2.10:
	MOV	EBX,WORD_WORK
	MOV	AL,[CHR_WORK]
		CALL	IS_CCHR_F
		JE	GET_WORD2S
	CALL	IS_1TOKEN
	JE	GET_WORD2.1TOKEN
	CALL	IS_2TOKEN
	JE	GET_WORD2.2TOKEN
GET_WORD2.20:
	MOV	AL,[CHR_WORK]
	CALL	IS_1TOKEN
	JE	GET_WORD2.40
	CALL	IS_2TOKEN
	JE	GET_WORD2.40
	MOV	[EBX],AL
	INC	EBX
	CALL	GET_NCHR
	CALL	IS_SEPARATOR
	JNE	GET_WORD2.20

GET_WORD2.30:
GET_WORD2.40:
	MOV	BYTE [EBX],0
	RET

;
GET_WORD2S:
	MOV	AL,[CHR_WORK]
	MOV	[EBX],AL
	INC	EBX
	CALL	GET_NCHR
	CALL	IS_CCHR
	JE	GET_WORD2S

	JMP	GET_WORD2.40

GET_WORD2.DQ:
GET_WORD2.SQ:
	CALL	GET_NCHR
	MOV	BYTE [EBX],0
	RET

GET_WORD2.1TOKEN:
	MOV	[EBX],AL
	CALL	GET_NCHR
	INC	EBX
	MOV	BYTE [EBX],0
	RET

GET_WORD2.2TOKEN:
	MOV	[EBX],AL
	INC	EBX
	PUSH	EAX
	CALL	GET_NCHR
	MOV	DL,[CHR_WORK]
	POP	EAX

	CMP	AL,'-'
	JNE	GET_WORD2.2TOKEN.10
	CMP	DL,'>'
	JNE	GET_WORD2.2TOKEN.10
	MOV	[EBX],DL
	INC	EBX
	MOV	BYTE [EBX],0
	CALL	GET_NCHR
	RET

GET_WORD2.2TOKEN.10:
;	PUSH	ES
;	PUSHAD
;
;	PUSH	DS
;	POP	ES
;	MOV	EDI,TBL_REP_EQ_TOKEN
;	MOV	ECX,5
;	REPNE
;	SCASB
;	POPAD
;	POP	ES
;	JE	REP_EQ_TOKEN

	PUSH	ESI
	PUSH	ECX
	MOV	ESI,TBL_REP_EQ_TOKEN
	MOV	ECX,5
	CALL	SCANB
	POP	ECX
	POP	ESI
	JE	REP_EQ_TOKEN

	CMP	AL,'*'
	JE	MULDIV_TOKEN
	CMP	AL,'/'
	JE	MULDIV_TOKEN

	CMP	AL,'<'
	JE	SH_TOKEN
	CMP	AL,'>'
	JE	SH_TOKEN
	JMP	OP_EQ_TOKEN

TBL_REP_EQ_TOKEN:
	DB	'&|+-='

MULDIV_TOKEN:
	CMP	DL,'='
	JE	OP_LET_TOKEN
	MOV	AH,DL

	CMP	AX,'/*'
	JE	COMMENT_TOKEN
	CMP	AX,'*/'
	JE	COMMENT_TOKEN

		CMP	AX,'//'
		JE	COMMENT_TOKEN

	JMP	OP_TOKEN

COMMENT_TOKEN:
	MOV	[EBX],DL
	INC	EBX
	MOV	BYTE [EBX],0
	CALL	GET_NCHR
	RET


REP_EQ_TOKEN:
	CMP	AL,DL
	JE	REP_TOKEN
	CMP	DL,'='
	JE	OP_LET_TOKEN
	JMP	OP_TOKEN

REP_TOKEN:
OP_LET_TOKEN:
	MOV	[EBX],DL
	INC	EBX
	MOV	BYTE [EBX],0
	CALL	GET_NCHR
	RET

OP_TOKEN:
	MOV	BYTE [EBX],0
	RET

OP_EQ_TOKEN:
	CMP	DL,'='
	JE	OP_LET_TOKEN
	JMP	OP_TOKEN

SH_TOKEN:
	CMP	DL,'='
	JE	OP_LET_TOKEN	;cmp >=,<=
	CMP	AL,DL
	JNE	OP_TOKEN
	MOV	[EBX],DL
	INC	EBX

	PUSH	EAX
	CALL	GET_NCHR
	MOV	DL,[CHR_WORK]
	POP	EAX
	CMP	DL,'='
	JE	SH_EQ_TOKEN

	MOV	 BYTE [EBX],0
	RET

SH_EQ_TOKEN:
	MOV	[EBX],DL
	INC	EBX
	MOV	BYTE [EBX],0
	CALL	GET_NCHR
	RET

GET_NCHR0:
	CALL	GETCHR
	CMP	AL,0AH
	JNE	GET_NCHR0.10
	INC	WORD [LIN.NO]
GET_NCHR0.10:
	RET

;

GET_NCHR:
	CALL	GETCHR
	MOV	[CHR_WORK],AL
	CMP	AL,0AH
	JNE	GET_NCHR.10
	INC	WORD [LIN.NO]
GET_NCHR.10:
	RET

;

SKIP_WHITE:
	MOV	AL,[CHR_WORK]
	CMP	AL,20H
	JE	SKIP_WHITE.10
	CMP	AL,09H
	JE	SKIP_WHITE.10
	RET

SKIP_WHITE.10:
	CALL	GET_NCHR
	JMP	SKIP_WHITE

;
;	?AX
;

GET_WORD:
	PUSHAD
	CALL	GET_WORD4	;3	;2
	CALL	DISP_WORD
	POPAD
	MOV	AX,[WORD_WORK]
	RET

;GET_WORD0:
	DB	60H
;GET_WORD.05:
	CALL	GET_NCHR0;GETCHR
	;JB	GET_EOF
;	CALL	TOLOWER
	CALL	IS_SEPARATOR
	;;JE	GET_WORD.05

	MOV	EBX,WORD_WORK
;GET_WORD.10:
	CALL	IS_SEPARATOR
	;;JE	GET_WORD.E
	MOV	[EBX],AL
	INC	EBX
	CALL	GET_NCHR0;GETCHR
	;JB	GET_EOF
;	CALL	TOLOWER
	;;JMP	GET_WORD.10

;GET_WORD.E:
	XOR	AL,AL
	MOV	[EBX],AL

	CALL	DISP_WORD
	DB	61H
	MOV	AX,[WORD_WORK]
	RET


;
;
;

GET_EOF:
	MOV	EDX,MES_EOF
	CALL	DOS09
	JMP	MAIN_E.ERR	;EXIT_CLOSE

MES_EOF:
	DB	'read end of file$'

;
;
;

DISP_WORD:
	CMP	BYTE [FLG.V],0
	JE	DISP_WORD.E

		CMP	BYTE [LOAD.F],0
		JNE	DISP_WORD.E

	PUSHAD
		CALL	SYS_stdin_status
		OR	AL,AL
		JE	DISP_WORD.KEYE
		CALL	SYS_getchr
		CALL	SYS_getchr
DISP_WORD.KEYE:

	;MOV	EDX,MES_CLR5
	;CALL	DOS09
	MOV	ESI,MES_CLR5
	CALL	DISP_STR_CON

	;MOV	EBX,WORD_WORK
	;CALL	DISP_STRZ
	MOV	ESI,WORD_WORK
	CALL	DISP_STR_CON

	;MOV	EDX,MES_CLR7
	;CALL	DOS09
	MOV	ESI,MES_CLR7
	CALL	DISP_STR_CON
	POPAD
DISP_WORD.E:
	RET

MES_CLR5:DB	1BH,'[35m$'
MES_CLR7:DB	1BH,'[37m$'

;
;
;

DISP_STRZ:
	MOV	AL,[EBX]
	OR	AL,AL
	JE	DISP_STRZ.E
	CALL	DOS02
	INC	EBX
	JMP	DISP_STRZ

DISP_STRZ.E:
	RET


DISP_STRZ_CON:
	MOV	AL,[EBX]
	OR	AL,AL
	JE	DISP_STRZ_CON.E
	PUSH	EBX
	CALL	PUTCHR_CON
	POP	EBX
	INC	EBX
	JMP	DISP_STRZ_CON
DISP_STRZ_CON.E:
	RET


PUTCRLF_CON:
	MOV	AL,0DH
	CALL	PUTCHR_CON
	MOV	AL,0AH

PUTCHR_CON:
	MOV	AH,1DH
	;INT	0E4H	;93H
	CALL	INTE4_putchr
	RET

;
;
;

PUT_STRZ:
	MOV	AL,[EBX]
	OR	AL,AL
	JE	PUT_STRZ.E
	CALL	PUTCHR
	INC	EBX
	JMP	PUT_STRZ

PUT_STRZ.E:
	RET

PRINT_ALIGN4:
	RET

	CALL	PRINT
	DB	'	align	4',0DH,0AH,'$'
	RET

;
;	SI:name node
;
PRINT_GLOBAL_DS:
	CALL	PRINT_ALIGN4

	PUSH	ESI
		MOV	ESI,[ESI+NODE2]
	CALL	SIZEOF_DS
	MOV	EBX,EDX

		OR	EBX,EBX
		JG	PRINT_GLOBAL_DS.10

		CALL	DISP_CON
		DB	'global ds<=0$'
		JMP	ERR_OTHERS

PRINT_GLOBAL_DS.10:
	CALL	PRINT
	DB	'%n:	DS	%D',0DH,0AH,'$'

	RET

CHECK_STRING_LOCAL:
	MOV	BYTE [FLG.PRINT_STRING2],80H
	CALL	PRINT_STRING_LOCAL

	MOV	AL,[FLG.PRINT_STRING2]
	TEST	AL,01H
	MOV	BYTE [FLG.PRINT_STRING2],0
	RET

PRINT_STRING_LOCAL:
	MOV	ESI,WORD_WORK_GLOBAL_INFO
	MOV	EBX,[WORD_WORK_GLOBAL_SAVE]
		MOV	EDX,EBX
		MOV	EBX,[ESI+INFO3]
	JMP	PRINT_STRING2.10


;
PRINT_PUBLIC:
	MOV	ESI,WORD_WORK_GLOBAL_INFO
	;MOV	EBX,[ESI]
		MOV	EBX,[ESI+INFO3]
PRINT_PUBLIC.LP:
	;CMP	EBX,[ESI+NODE2]
		OR	EBX,EBX
	JE	PRINT_PUBLIC.LPE

	MOV	EAX,[EBX+NODE1]
	MOV	AX,[EAX]
	CALL	IS_CCHR_F
	JNE	PRINT_PUBLIC.10

	MOV	EAX,[EBX+NODE6]	;static
	OR	EAX,EAX
	JNE	PRINT_PUBLIC.10

	MOV	EAX,[EBX+NODE9]
	TEST	EAX,4
	JE	PRINT_PUBLIC.10	;referd

	TEST	EAX,2
	JNE	PRINT_PUBLIC.10	;typedef name

	TEST	EAX,1
	JNE	PRINT_PUBLIC.PUBLIC

PRINT_PUBLIC.EXTRN:
	PUSH	EBX
	CALL	PRINT
	;DB	'	;EXTRN	%n',0DH,0AH,'$'
	DB	'	EXTERN	%n',0DH,0AH,'$'
	JMP	PRINT_PUBLIC.10

PRINT_PUBLIC.PUBLIC:
	PUSH	EBX
	CALL	PRINT
	;DB	'	PUBLIC	%n',0DH,0AH,'$'
	DB	'	GLOBAL	%n',0DH,0AH,'$'

PRINT_PUBLIC.10:
	;ADD	EBX,[EBX]
		MOV	EBX,[EBX]
	JMP	PRINT_PUBLIC.LP

PRINT_PUBLIC.LPE:
	RET

;
;
;
PRINT_STRING_GLOBAL:
	MOV	ESI,WORD_WORK_GLOBAL_INFO
		MOV	EDX,0
PRINT_STRING2:
	;MOV	EBX,[ESI]
		MOV	EBX,[ESI+INFO3]
PRINT_STRING2.10:
	;CMP	EBX,[ESI+NODE2]
		OR	EBX,EBX
	JE	PRINT_STRING2.50
		CMP	EBX,EDX
	JE	PRINT_STRING2.50

	PUSH	EBX
	MOV	EBX,[EBX+NODE1]
	MOV	AX,[EBX]
	POP	EBX
	CMP	AX,'""'
	JNE	PRINT_STRING2.40

	CMP	BYTE [FLG.PRINT_STRING2],0
	JE	PRINT_STRING2.30
	OR	BYTE [FLG.PRINT_STRING2],1
	JMP	PRINT_STRING2.40

PRINT_STRING2.30:
		PUSH	EDX
	PUSH	ESI
	PUSH	EBX

	PUSH	EBX	;name

	;MOV	EBX,[EBX+NODE4]
		PUSH	EBX
	CALL	PRINT
	;DB	'_%D:	DB	$'
		DB	'_%m:	DB	$'

	POP	EBX
	MOV	EBX,[EBX+NODE2]

	CALL	PRINT_STR

	POP	EBX
	POP	ESI
		POP	EDX
PRINT_STRING2.40:
	;ADD	EBX,[EBX]
		MOV	EBX,[EBX]
	JMP	PRINT_STRING2.10

PRINT_STRING2.50:
	RET


;
;	EBX:string
;

PRINT_STR:
	MOV	CL,0	;count
	MOV	CH,0	;prev type
PRINT_STR.10:
	MOV	AL,[EBX]
	INC	EBX
	PUSH	EBX
	PUSH	EAX

		CMP	AL,0FFH
		JNE	PRINT_STR.10A
		MOV	AL,[EBX]
		INC	DWORD [ESP+4]

PRINT_STR.10A:
	CMP	AL,7FH
	JE	PRINT_STR.20
	CMP	AL,'"'
	JE	PRINT_STR.20
	CMP	AL,"'"
	JE	PRINT_STR.20
	CMP	AL,20H
	JB	PRINT_STR.20

	OR	CH,CH
	JNE	PRINT_STR.15
PRINT_STR.12:
	PUSH	EAX
	MOV	AL,'"'
	CALL	PUTCHR
	POP	EAX
	MOV	CH,1	;in dq

PRINT_STR.15:
	CMP	CH,1
	JNE	PRINT_STR.16

	CALL	PUTCHR
	JMP	PRINT_STR.40

PRINT_STR.16:
	PUSH	EAX
	MOV	AL,','
	CALL	PUTCHR
	POP	EAX
	MOV	CH,0
	JMP	PRINT_STR.12


PRINT_STR.20:
	CMP	CH,0
	JNE	PRINT_STR.24

PRINT_STR.22:
	MOVZX	EBX,AL
	CALL	PRINT
	DB	'%B$'
	MOV	CH,2
	JMP	PRINT_STR.40

PRINT_STR.24:
	CMP	CH,1
	JNE	PRINT_STR.26
	PUSH	EAX
	MOV	AL,'"'
	CALL	PUTCHR
	POP	EAX
PRINT_STR.25:
	PUSH	EAX
	MOV	AL,','
	CALL	PUTCHR
	POP	EAX
	JMP	PRINT_STR.22

PRINT_STR.26:
	JMP	PRINT_STR.25


PRINT_STR.40:
	POP	EAX
	INC	CL
	CMP	CL,40
	JB	PRINT_STR.50

	OR	AL,AL
	JE	PRINT_STR.50

	CMP	CH,0
	JNE	PRINT_STR.42

;	never occur!

	JMP	PRINT_STR.49

PRINT_STR.42:
	CMP	CH,1
	JNE	PRINT_STR.44

	PUSH	EAX
	MOV	AL,'"'
	CALL	PUTCHR
	POP	EAX
	JMP	PRINT_STR.48

PRINT_STR.44:


PRINT_STR.48:
	PUSH	EAX
	CALL	PRINT
	DB	0DH,0AH
	DB	'	DB	','$'
	POP	EAX
PRINT_STR.49:
	MOV	CL,0
	MOV	CH,0

PRINT_STR.50:
	OR	AL,AL
	POP	EBX
	JNE	PRINT_STR.10


PRINT_STR.NULL:
	JMP	PRINT_STR.NULL.50

	CMP	CH,0
	JNE	PRINT_STR.NULL.20

	JMP	PRINT_STR.NULL.50

PRINT_STR.NULL.20:
	CMP	CH,1
	JNE	PRINT_STR.NULL.30

	MOV	AL,'"'
	CALL	PUTCHR
	JMP	PRINT_STR.NULL.50

PRINT_STR.NULL.30:

	JMP	PRINT_STR.NULL.50

PRINT_STR.NULL.50:
	CALL	PRINT
	DB	0DH,0AH,'$'

	RET

;
;
;
;PRINT_GLOBAL:
	MOV	ESI,[WORD_PNT]
PRINT_GLOBAL.10:
	OR	ESI,ESI
	JE	PRINT_GLOBAL.E
	PUSH	ESI
	CALL	CHK1
	CMP	AL,40H
	JNE	PRINT_GLOBAL.50
	MOV	AX,[ESI+NODE7]
	OR	AX,AX
	JNE	PRINT_GLOBAL.50
	MOV	EBX,[ESI+NODE2]
	MOV	EBX,[EBX+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'('
	JE	PRINT_GLOBAL.50
	CMP	AX,'{'
	JE	PRINT_GLOBAL.50

	CALL	PRINT_GLOBAL_DS

PRINT_GLOBAL.50:
	POP	ESI
	MOV	ESI,[ESI]
	JMP	PRINT_GLOBAL.10
PRINT_GLOBAL.E:
	RET


LIST_WORD_MACRO:
	MOV	ESI,WORD_WORK_MACRO_INFO
	CALL	LIST_WORDN
	RET

LIST_WORD_EXP:
	MOV	ESI,WORD_WORK_EXP_INFO
	CALL	LIST_WORDN
	RET

;
;
;
LIST_WORD_GLOBAL:
	MOV	ESI,WORD_WORK_GLOBAL_INFO
	CALL	LIST_WORDN
	RET

;
;
;

LIST_WORDN:
	;MOV	EBX,[ESI]
		MOV	EBX,[ESI+INFO3]
LIST_WORDN.10:
	;CMP	EBX,[ESI+NODE2]
		OR	EBX,EBX
	JE	LIST_WORDN.50
	PUSH	ESI

	PUSH	EBX
	CALL	PUTHEXA;W
	CALL	PUTSPC
	POP	EBX
	PUSH	EBX
	MOV	EBX,[EBX+NODE1]
	CALL	PUTHEXA;W
	POP	EBX
	PUSH	EBX
	MOV	EBX,[EBX+NODE1]
	CALL	DISP_STRZ
	CALL	PUTSPC
	POP	EBX

	PUSH	EBX
	ADD	EBX,2*4
	MOV	ECX,10
LIST_WORDN.20:
	PUSH	ECX
	PUSH	EBX
	MOV	EBX,[EBX]
	CALL	PUTHEXA;W
	CALL	PUTSPC
	POP	EBX
	POP	ECX
	ADD	EBX,2*2
	LOOP	LIST_WORDN.20
	CALL	PUTCRLF
	POP	EBX

	POP	ESI
	;ADD	EBX,[EBX]		;len
		MOV	EBX,[EBX]
	JMP	LIST_WORDN.10

LIST_WORDN.50:
	RET

;
;
;

LIST_WORD:
	MOV	EBX,[WORD_PNT]
LIST_WORD.10:
	OR	EBX,EBX
	JE	LIST_WORD.E
	PUSH	EBX

	PUSH	EBX
	CALL	PUTHEXA;W
	CALL	PUTSPC
	POP	EBX
	PUSH	EBX
	CALL	PUTHEXA;W
	POP	EBX
	MOV	EBX,[EBX+NODE1]
	CALL	DISP_STRZ
	CALL	PUTSPC
	POP	EBX

	PUSH	EBX
	MOV	ECX,7
	MOV	ESI,EBX
LIST_WORD.20:
	MOV	EBX,[ESI+NODE2]
	CALL	PUTHEXA;W
	CALL	PUTSPC
	ADD	ESI,2*2
	LOOP	LIST_WORD.20
	POP	EBX

	MOV	ESI,[EBX+NODE1]
	MOV	AL,[ESI]
	CMP	AL,'a'
	JNB	LIST_WORD2
LIST_WORD.50:
	CALL	PUTCRLF
	POP	EBX
	MOV	EBX,[EBX]
	JMP	LIST_WORD.10

LIST_WORD.E:
	RET

LIST_WORD2:
	MOV	EBX,[EBX+NODE2]
;	OR	BH,BH
;	JE	LIST_WORD2.E
	CMP	EBX,100H
	JB	LIST_WORD2.E

	MOV	ESI,[EBX+NODE1]
	PUSH	EBX
	MOV	EBX,ESI
	MOV	AL,[EBX]
	CMP	AL,'['
	JE	LIST_WORD2_ARY
	CMP	AL,'('
	JE	LIST_WORD2_FNC
	CALL	DISP_STRZ
LIST_WORD2.50:
	CALL	PUTSPC
	POP	EBX

	JMP	LIST_WORD2

LIST_WORD2.E:
	CMP	EBX,0002H
	JE	LIST_WORD2_INT
	CMP	EBX,0001H
	JE	LIST_WORD2_CHAR
	JMP	LIST_WORD.50

LIST_WORD2_INT:
	CALL	DISP
	DB	'int$'
	JMP	LIST_WORD.50
LIST_WORD2_CHAR:
	CALL	DISP
	DB	'char$'
	JMP	LIST_WORD.50

LIST_WORD2_ARY:
	MOV	AL,'['
	CALL	DOS02
	POP	EBX
	PUSH	EBX
	MOV	EBX,[EBX+NODE3]
	CMP	EBX,0FFFFFFFFH
	JE	LIST_WORD2_ARY.10
	MOV	EBX,[EBX+NODE1]
	CALL	DISP_STRZ
LIST_WORD2_ARY.10:
	MOV	AL,']'
	CALL	DOS02
	JMP	LIST_WORD2.50

LIST_WORD2_FNC:
	MOV	AL,'('
	CALL	DOS02
	MOV	AL,')'
	CALL	DOS02
	JMP	LIST_WORD2.50



;
;
UNGETC:
	CMP	AL,1AH
	JE	UNGETC.10

UNGETC.0:
	JMP	UNGETC0

UNGETC.10:
	MOV	AL,20H
	JMP	UNGETC.0


UNGETC.ERR:
	MOV	BYTE [FLG.V],0FFH
	MOV	BYTE [FLG.D],0FFH
	PUSH	EBX
	CALL	PUTCHR_CON
	POP	EBX
	MOV	AL,[EBX]
	CALL	PUTCHR_CON
	CALL	DISP_CON
	DB	'ungetc err$'
	JMP	ERR_MACRO

UNGETC0:
	MOV	EBX,[S.PNT]
	CMP	EBX,UNGETC_MAX
	JBE	UNGETC0.ERR

	DEC	EBX
	MOV	[EBX],AL
	MOV	[S.PNT],EBX
	INC	DWORD [S.LEFT]
	RET

UNGETC0.ERR:
	CALL	DISP_CON
	DB	'ungetc0 error$'
	JMP	ERR_MACRO

;
;
;
	ALIGN	4

GETCHR:	PUSH	EBX

GETC05:
	MOV	EBX,[S.LEFT]
	OR	EBX,EBX
	JE	SHORT GETC10
	DEC	EBX
	MOV	[S.LEFT],EBX
	MOV	EBX,[S.PNT]
	MOV	AL,[EBX]
	INC	EBX
	MOV	[S.PNT],EBX
	POP	EBX
	;OR	AL,AL
	CMP	AL,1AH
	JE	SHORT GETC.EOF
	OR	AL,AL
	RET
GETC10:	MOV	AL,[FL.END]
	OR	AL,AL
	JNE	GETC20
GETC12:
	PUSHAD
	MOV	EDX,USRDMA
	MOV	[S.PNT],EDX

	MOV	EBX,[HDL]
	MOV	ECX,R.BUF
	CALL	SYS_read
	MOV	[S.LEFT],EAX
	CMP	EAX,R.BUF
	MOV	AL,0
	JE	GETC15
	DEC	AL
GETC15:	MOV	[FL.END],AL
	POPAD
	JMP	GETC05
GETC20:
	POP	EBX
GETC.EOF:
	PUSHAD
		CMP	BYTE [FLG.P],0
		JNE	GETC.EOF.1
	MOV	AL,'/'
	CALL	PUTCHR_CON
GETC.EOF.1:
	CALL	FCBDEC
	POPAD
	JNB	GETCHR

	MOV	AL,1AH
	STC
	RET

;
;	AL:code
;
;	?AL,BX
;
	ALIGN	4

PUTCHR:	PUSH	EBX
	;PUSH	ECX
	;MOV	CL,AL
PUTC1:
	MOV	EBX,[W.LEFT]
	OR	EBX,EBX
	JE	SHORT PUTC10
	DEC	EBX
	MOV	[W.LEFT],EBX
	MOV	EBX,[W.PNT]
	MOV	[EBX],AL	;CL
	INC	EBX
	MOV	[W.PNT],EBX
	;POP	ECX
	POP	EBX
	RET
PUTC10:
	PUSHAD
	MOV	EBX,W.BUF
	MOV	[W.LEFT],EBX

	MOV	EDX,USRDMA+R.BUF;+MACROSIZE
	MOV	[W.PNT],EDX

	MOV	EBX,[HDL2]
	MOV	ECX,W.BUF
	CALL	SYS_write
	POPAD
	JNB	PUTC1

	MOV	EBX,[HDL2]
	CALL	SYS_close
	JMP	ERR_WRITE

;
;
;
INIT_FILEBUF:
	MOV	EBX,W.BUF
	MOV	[W.LEFT],EBX
	MOV	EBX,USRDMA+R.BUF
	MOV	[W.PNT],EBX

	RET
;
;
;

CLOSE2:
	MOV	EBX,W.BUF
	MOV	EDX,[W.LEFT]
	SUB	EBX,EDX
	JE	CLOSE2.10

	MOV	ECX,EBX
	MOV	EDX,USRDMA+R.BUF
	MOV	EBX,[HDL2]
	CALL	SYS_write
	JB	ERR_WRITE
CLOSE2.10:

	MOV	EBX,[HDL2]
	CALL	SYS_close

	MOV	EAX,W.BUF
	MOV	[W.LEFT],EAX
	RET

;
;

PUT_LBL_H:
	PUSHAD

	MOV	CL,0
	CMP	EBX,9
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFFFFH
	JBE	PUT_LBL_H.15

	PUSH	EBX
	MOV	AL,'0'
	CALL	PUTCHR
	POP	EBX

	PUSH	EBX
	MOV	CL,-4
PUT_LBL_H.10:
	ADD	CL,4
	SHR	EBX,4
	OR	EBX,EBX
	JNE	PUT_LBL_H.10
	POP	EBX

PUT_LBL_H.15:
	ROR	EBX,CL
PUT_LBL_H.20:
	PUSH	EBX
	PUSH	ECX
	MOV	AL,BL
	CALL	PUT_H	;CALL	PUT_HEX
	POP	ECX
	POP	EBX
	OR	CL,CL
	JE	PUT_LBL_H.30
	ROL	EBX,4
	SUB	CL,4
	JMP	PUT_LBL_H.20

PUT_LBL_H.30:
	POPAD
	RET




	CALL	PUT_HEXW
	RET

;
POSTH:
	CMP	EBX,10
	JB	POSTH.R
	MOV	AL,'h'
	CALL	PUTCHR
POSTH.R:
	RET

;
PUT_HEXB_H:
	PUSH	EBX
	CALL	PUT_HEXB
	POP	EBX
	JMP	POSTH

;
;
;
PUT_HEXW_H:
	;CALL	PUT_HEXW
		MOVZX	EBX,BX
		PUSH	EBX
		CALL	PUT_LBL_H
		POP	EBX
		JMP	POSTH

	MOV	AL,'h'
	CALL	PUTCHR
	RET

PUT_HEXL_H:
	;CALL	PUT_HEXL
		PUSH	EBX
		CALL	PUT_LBL_H
		POP	EBX
		JMP	POSTH

	MOV	AL,'h'
	CALL	PUTCHR
	RET

;
;
;
PUT_HEXL:
		JMP	PUT_LBL_H

	MOV	AL,'0'
	CALL	PUTCHR
	PUSH	BX
	SHR	EBX,10H
	MOV	AL,BH
	CALL	PUT_HEX
	MOV	AL,BL
	CALL	PUT_HEX
	POP	BX
	MOV	AL,BH
	CALL	PUT_HEX
	MOV	AL,BL
	CALL	PUT_HEX
	RET


PUT_HEXW:
		MOVZX	EBX,BX
		JMP	PUT_LBL_H

	MOV	AL,'0'
	CALL	PUTCHR
	MOV	AL,BH
	CALL	PUT_HEX
	MOV	AL,BL
	CALL	PUT_HEX
	RET

PUT_HEXB:
	MOV	AL,'0'
	CALL	PUTCHR
	MOV	AL,BL
	CALL	PUT_HEX
	RET

PUT_HEX:
	PUSH	AX
	SHR	AL,4
	CALL	PUT_H
	POP	AX
PUT_H:
	AND	AL,0FH
	CMP	AL,10
	JB	PUT_H.10
	ADD	AL,7
PUT_H.10:
	ADD	AL,'0'
	CALL	PUTCHR
	RET

;
;	EDI work
;	EBX number
;
SETDECW:
	MOV	DL,0

	MOV	ECX,10000
	CALL	SETDECW.SUB
	MOV	ECX,1000
	CALL	SETDECW.SUB
	MOV	ECX,100
	CALL	SETDECW.SUB
SETDECW.2:
	MOV	ECX,10
	CALL	SETDECW.SUB
	MOV	DL,1
	MOV	ECX,1
	CALL	SETDECW.SUB
	MOV	BYTE [EDI],0
	RET

SETDECW.SUB:
	PUSH	EDX

	MOV	EAX,EBX
	XOR	EDX,EDX
	DIV	ECX
	PUSH	EDX
	ADD	AL,'0'
;	STOSB
	POP	EBX

	POP	EDX
	CMP	AL,'0'
	JNE	SETDECW.SUB.10
	OR	DL,DL
	JE	SETDECW.SUB.R
SETDECW.SUB.10:
	MOV	DL,1
	MOV	[EDI],AL
	INC	EDI
SETDECW.SUB.R:
	RET

PUTDECW:
	MOV	CX,10000
	CALL	PUTDECW.SUB
	MOV	CX,1000
	CALL	PUTDECW.SUB
	MOV	CX,100
	CALL	PUTDECW.SUB
	MOV	CX,10
	CALL	PUTDECW.SUB
	MOV	CX,1
	CALL	PUTDECW.SUB
	RET

PUTDECW.SUB:
	MOV	AX,BX
	XOR	DX,DX
	DIV	CX
	PUSH	DX
	ADD	AL,'0'
	CALL	DOS02_2
	POP	BX
	RET


;
;	address
;
PUTHEXA:
	PUSH	EBX
	SHR	EBX,10H
	MOV	AL,BL
	CALL	PUTHEX
	POP	EBX
	CALL	PUTHEXW
	RET

PUTHEXD:
	PUSH	EBX
	SHR	EBX,10H
	CALL	PUTHEXW
	POP	EBX
	CALL	PUTHEXW
	RET

PUTHEXW:
	MOV	AL,BH
	CALL	PUTHEX
	MOV	AL,BL
	CALL	PUTHEX
PUTHEXW.R:
	RET

PUTHEX:
	PUSH	EAX
	SHR	AL,4
	CALL	PUTH
	POP	EAX
PUTH:
	AND	AL,0FH
	CMP	AL,10
	JB	PUTH.10
	ADD	AL,7
PUTH.10:
	ADD	AL,'0'
	CALL	DOS02_2
	RET

PUTCRLF:
	DB	60H
	MOV	AL,0DH
	CALL	DOS02_2
	MOV	AL,0AH
	CALL	DOS02_2
	DB	61H
PUTCRLF.R:
	RET

PUTTAB:
	MOV	AL,09H
	JMP	DOS02_2

PUTSPC:
	MOV	AL,20H

DOS02_2:
	PUSHAD
	CMP	BYTE [FLG.D],0
	JE	DOS02_2.E
	MOV	DL,AL
	CALL	SYS_putchr
DOS02_2.E:
	POPAD
	RET

DOS02:
	PUSHAD
	CMP	BYTE [FLG.V],0	;[FLG.V],0
	JE	DOS02.E
	MOV	DL,AL
	CALL	SYS_putchr
DOS02.E:
	POPAD
	RET
;
;
;
LIST_C:
	MOV	ECX,10
LIST_C.10:
	PUSH	ECX

LIST_C.20:
	CALL	GETCHR
	JB	LIST_C.30

	PUSH	EAX
	CALL	SYS_stdin_status
	OR	AL,AL
	POP	EAX
	JNE	LIST_C.30

	PUSH	EAX
	CALL	PUTCHR_CON
	POP	EAX
	CMP	AL,0AH
	JNE	LIST_C.20

	POP	ECX
	LOOP	LIST_C.10
	RET

LIST_C.30:
	POP	ECX
	RET
;
;
;
DISP_MACRO_NAME:
	MOV	ESI,MACRO_NAME
	CALL	DISP_STR_CON
	RET

;
;
;

ERR_TYPE:
	MOV	EDX,EMES_TYPE
	JMP	ERROR2

ERR_SYNTAX:
	MOV	EDX,EMES_SYNTAX
	JMP	ERROR2

ERR_UNDEF:
	MOV	EDX,EMES_UNDEF
	JMP	ERROR2


ERROR2:
	PUSHAD
	CALL	CLOSE2
	POPAD

	MOV	BYTE [FLG.V],0FFH
	MOV	BYTE [FLG.D],0FFH
	PUSH	EDX
	CALL	PUTCRLF
	MOV	EBX,[LIN.NO]
;	CALL	PUTHEXW
	CALL	PUTDECW
	MOV	AL,':'
	CALL	DOS02

	MOV	AL,[WORD_WORK]
	CALL	PUTHEX
	MOV	AL,[WORD_WORK+1]
	CALL	PUTHEX
	MOV	AL,' '
	CALL	DOS02

	MOV	EBX,WORD_WORK
	CALL	DISP_STRZ
	CALL	PUTCRLF

	CALL	LIST_C

	POP	EDX
	CALL	SYS_putstr

	;CALL	LIST_WORD_MACRO
	;CALL	LIST_WORD_EXP
	;CALL	LIST_WORD_GLOBAL

	MOV	BYTE [EXITCODE],1
	JMP	MAIN_E.ERR
	JMP	EXIT_CLOSE


ERR_ALLOC:
	MOV	EDX,EMES_ALLOC
	JMP	ERROR

ERR_OPEN:
	MOV	EDX,EMES_OPEN
	JMP	ERROR

ERR_MEM:
	MOV	EDX,EMES_MEM
	JMP	ERROR2

ERR_MEM_CASE:
	MOV	EDX,EMES_MEM_CASE
	JMP	ERROR2

ERR_TBL:
	MOV	EDX,EMES_TBL
	JMP	ERROR

ERR_RECNO:
	MOV	EDX,EMES_RECNO
	JMP	ERROR

ERR_MAKE:
	MOV	EDX,EMES_MAKE
	JMP	ERROR

ERR_WRITE:
	MOV	EDX,EMES_WRITE
	JMP	ERROR

ERR_INCLUDE:
	MOV	EDX,EMES_INCLUDE
	JMP	ERROR

ERR_MACRO:
	MOV	EDX,EMES_MACRO
	JMP	ERROR2

ERR_MACRO_LPAR:
	MOV	EDX,EMES_MACRO_LPAR
	JMP	ERROR2

ERR_MACRO_EXP_MEM:
	MOV	EDX,EMES_MACRO_EXP_MEM
	JMP	ERROR2

ERR_MACRO_MEM:
	MOV	EDX,EMES_MACRO_MEM
	JMP	ERROR2

ERR_MACRO_PARAM_MEM:
	MOV	EDX,EMES_MACRO_PARAM_MEM
	JMP	ERROR2

ERR_MACRO_ARG_CNT:
	CALL	DISP_MACRO_NAME

	MOV	EDX,EMES_MACRO_ARG_CNT
	JMP	ERROR2

ERR_DEFINE_MEM:
	MOV	EDX,EMES_DEFINE_MEM
	JMP	ERROR2

ERR_EOF:
	MOV	EDX,EMES_EOF
	JMP	ERROR

ERR_INFUNC:
	MOV	EDX,EMES_INFUNC
	JMP	ERROR

ERR_ARG:
	MOV	EDX,EMES_ARG
	JMP	ERROR2

ERR_NUMBER:
	MOV	EDX,EMES_NUMBER
	JMP	ERROR2

ERR_SIZEOF0:
	MOV	EDX,EMES_SIZEOF0
	JMP	ERROR2

ERR_OTHERS:
	MOV	EDX,EMES_OTHERS
	JMP	ERROR

ERR_PREP:
	MOV	EDX,EMES_PREP
	JMP	ERROR2

ERR_WORK:
	MOV	EDX,EMES_WORK
	JMP	ERROR

ERR_TYPE_ENUM:
	MOV	EDX,EMES_TYPE_ENUM
	JMP	ERROR

ERROR:
		PUSHAD
		CALL	CLOSE2
		POPAD

	CALL	SYS_putstr
	MOV	BYTE [EXITCODE],01H
	JMP	EXIT

