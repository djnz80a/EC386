
	BITS	32

ERR_OPEN EQU	1
ERR_SEEK EQU	2
ERR_READ EQU	3

BUFSIZ	EQU	400H

	EXTERN	FILE_WORK
	EXTERN	SIZEOF_FILE
;	EXTERN	set_f.work

	EXTERN	__WRITE
	EXTERN	__PUTCHR

	EXTERN	GETDEC
	EXTERN	GETDEC2
	EXTERN	SKIP_WHITE

	EXTERN	USRDTA

	extern	_stdin
	extern	_stdout
	extern	_stderr

	EXTERN	_malloc

	extern	_strlen
	extern	_strcpy
	extern	_strerror

	extern	_errno

	global	_sscanf
	global	_fscanf
	global	_isatty
	global	_ungetc
	global	_clearerr
	global	_tempnam
	global	_mktemp
	global	_ferror
	global	_setbuf
	global	_setvbuf
	global	_fsetbuf
	global	_fflush
	global	_fwrite
	global	_fread
	global	_unlink
	global	_link
	global	_feof
	global	_freopen
	global	_fdopen
	global	_fopen
	global	_fileno
	global	_fclose
	global	_rewind
	global	_fseek
	global	_ftell
	global	_in_b
	global	_out_b
	global	_dos06
	global	_dos07
	global	_dos08
	global	_dos01
	global	_dos0b
	global	_puthex_l
	global	_puthex_w
	global	_puthex_b
	global	_putc
	global	_fputc
	global	_fgets
	global	_getc
	global	_fgetc
	global	_perror
	global	_fputs
	global	_puts
	global	_sprintf
	global	_snprintf
	global	_vsprintf
	global	_fprintf
	global	_vfprintf
	global	_printf
	global	_vprintf
	global	_rename
	global	_open
	global	_close
	global	_creat
	global	_lseek
	global	_write
	global	_read
	global	_getch
	global	_getchar
	global	_putchar
	global	_dup
	global	_dup2

	global	_standout
	global	_standend

	global	_access
	global	_getlogin
	global	_getpwuid
	global	_geteuid
	global	_getuid
	global	_getpid
	global	_getppid
	global	_getgid
	global	_getegid
	global	_setgid
	global	_wait
	global	_execl
	global	_execvp
	global	_execv
	global	_fork
	global	_system
	global	_sleep
	global	_usleep
	global	_kill
	global	_chmod
	global	_remove
	global	_chown
	global	_chdir
	global	_popen
	global	_pclose
	global	_umask
	global	_mkdir
	global	_getwd
	global	_getcwd
	global	_readlink
	global	_getgrgid

	global	_pipe
;	global	_dup

	global	_alarm

	GLOBAL	CRMODE
	GLOBAL	CRMOD

;	in float30

	GLOBAL	_get_f	;_GET_F
	GLOBAL	ultof_
	GLOBAL	ltof_	;LTOF_
	GLOBAL	ftol_	;FTOL_
	GLOBAL	fmul_	;FMUL_
	GLOBAL	fadd_	;FADD_
	GLOBAL	fsub_	;FSUB_
	GLOBAL	fdiv_	;FDIV_
	GLOBAL	fcomp_
	GLOBAL	fneg_
	GLOBAL	fpostADD_
	GLOBAL	fpostSUB_

	GLOBAL	_fadd
	GLOBAL	_fsub
	GLOBAL	_fmul
	GLOBAL	_fdiv
	GLOBAL	_fneg
	GLOBAL	_fabs
	GLOBAL	_fsgn
	GLOBAL	_fcomp
	GLOBAL	_ftoi
	GLOBAL	_itof
	GLOBAL	_frexp
	GLOBAL	_ldexp

FILES	EQU	20

P1	EQU	4*2
P2	EQU	6*2
P3	EQU	8*2
P4	EQU	10*2
P5	EQU	12*2
P6	EQU	14*2

p1	EQU	P1
p2	EQU	P2
p3	EQU	P3
p4	EQU	P4

W1	EQU	-4

;
_dup:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	AH,45H		;duplicate a file handle
	XOR	EBX,EBX
	MOV	BX,[EBP+P1]
	INT	21H
	JB	_DUP.ERR
	MOVZX	EBX,AX
	JMP	_DUP.R
_DUP.ERR:
	MOV	EBX,-1
_DUP.R:
	POP	EBP
	RET

;
_dup2:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	AH,46H		;force a duplicate handle
	MOV	BX,[EBP+P1]	;old
	MOV	CX,[EBP+P2]	;new
	INT	21H
	JB	_DUP2.ERR
	MOVZX	EBX,WORD [EBP+P2]
	JMP	_DUP2.R
_DUP2.ERR:
	MOV	EBX,-1
_DUP2.R:
	POP	EBP
	RET

;
_fscanf:
	MOV	EBX,-1
	RET

;
_sscanf:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDX,[EBP+P1]	;string
	MOV	ESI,[EBP+P2]	;format
	LEA	EDI,[EBP+P3]
	XOR	ECX,ECX		;match cnt

	CLD

_SSCANF.10:
	LODSB
	OR	AL,AL
	JE	_SSCANF.R

	CMP	AL,'%'
	JE	_SSCANF.20
	CMP	AL,[EDX]
	JNE	_SSCANF.R
	INC	EDX
;	INC	ECX
	JMP	_SSCANF.10

_SSCANF.20:
	LODSB
	;OR	AL,AL
	;JE	_SSCANF.R

	CMP	AL,'d'
	JE	_SSCANF.D

	CMP	AL,'f'
	JE	_SSCANF.F

	CMP	AL,'l'
	JE	_SSCANF.L

	JMP	_SSCANF.R

_SSCANF.L:
	LODSB
	CMP	AL,'f'
	JE	_SSCANF.LF

	JMP	_SSCANF.R

_SSCANF.LF:
_SSCANF.F:
	PUSH	ECX

	PUSH	ESI
	PUSH	EDI

	MOV	ESI,EDX
	CALL	SKIP_WHITE
	PUSH	ESI
	CALL	_get_f
	POP	ESI
	MOV	EDX,ESI

	POP	EDI
	POP	ESI

	MOV	ECX,[EDI]
	ADD	EDI,4
	MOV	[ECX],EBX

	POP	ECX
	INC	ECX
	JMP	_SSCANF.10

_SSCANF.D:
	PUSH	ECX

	PUSH	ESI
	PUSH	EDI

	MOV	ESI,EDX
	CALL	SKIP_WHITE
	CALL	GETDEC2		;>EAX
	MOV	EDX,ESI

	POP	EDI
	POP	ESI

	MOV	ECX,[EDI]
	ADD	EDI,4
	MOV	[ECX],EAX

	POP	ECX
	INC	ECX
	JMP	_SSCANF.10

_SSCANF.R:
	MOV	EBX,ECX
	POP	EBP
	RET

;
_isatty:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]
	MOV	AX,4400H
	INT	21H

	MOV	EBX,1
	TEST	DX,80H
	JNE	_ISATTY.R
	XOR	EBX,EBX
_ISATTY.R:
	POP	EBP
	RET

;	temp
_ungetc:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,-1
	MOV	ECX,[EBP+P1]
	CMP	ECX,100H
	JNB	_UNGETC.R

	MOV	ESI,[EBP+P2]
	MOV	EAX,[ESI+18H]	;_ungetc
	CMP	EAX,100H
	JNB	_UNGETC.R

	MOV	EAX,ECX
	OR	EAX,100H
	MOV	[ESI+18H],EAX

	MOV	EAX,[EDI+4]	;eof
	AND	AL,0FEH
	MOV	[EDI+4],EAX

	MOV	EBX,[EBP+P1]

_UNGETC.R:
	POP	EBP
	RET

;
_clearerr:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDI,[EBP+P1]

	MOV	EAX,[EDI+4]
	AND	AL,0FEH		;eof
	MOV	[EDI+4],EAX

	MOV	EBX,0
	POP	EBP
	RET
;
;
;
_tempnam:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]
	OR	EBX,EBX
	JNE	_TEMPNAM.10

	PUSH	DWORD 200
	;CALL	_MALLOC
	CALL	_malloc
	ADD	ESP,4
	JE	_TEMPNAM.ERR
	MOV	[EBP+P1],EBX
_TEMPNAM.10:

	PUSH	DWORD _TEMPNAM.STR1
	PUSH	EBX
	CALL	_strcpy
	ADD	ESP,4*2

	PUSH	DWORD [EBP+P1]
	CALL	_mktemp
	ADD	ESP,4
	OR	EBX,EBX
	JE	_TEMPNAM.ERR

	MOV	EBX,[EBP+P1]
	JMP	_TEMPNAM.R

_TEMPNAM.ERR:
	MOV	EBX,0
_TEMPNAM.R:
	POP	EBP
	RET

_TEMPNAM.STR1:
	DB	'$$$XXXXX.tmp',0

;
;
;

_mktemp:
	PUSH	EBP
	MOV	EBP,ESP

	;	MOV	EBX,[EBP+P1]
	;	JMP	_MKTEMP.R

	PUSH	DWORD [EBP+P1]
	CALL	_strlen
	ADD	ESP,4
	CMP	EBX,80H
	JNB	_MKTEMP.ERR


_MKTEMP.NEXT:
	MOV	ECX,[_MKTEMP.N]
	MOV	ESI,[EBP+P1]
	MOV	EDI,_MKTEMP.WORK
_MKTEMP.10:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	_MKTEMP.50
	CMP	AL,'X'
	JNE	_MKTEMP.20

	XOR	EDX,EDX
	MOV	EAX,[_MKTEMP.N]
	MOV	EBX,10
	DIV	EBX
	MOV	ECX,EAX

	MOV	EAX,EDX
	ADD	AL,'0'

_MKTEMP.20:
	MOV	[EDI],AL
_MKTEMP.21:
	INC	EDI
	INC	ESI
	JMP	_MKTEMP.10

_MKTEMP.50:
	MOV	[EDI],AL

	PUSH	0
	PUSH	_MKTEMP.WORK
	CALL	_open
	ADD	ESP,4*2
	OR	EBX,EBX
	JS	_MKTEMP.OK

	PUSH	EBX
	CALL	_close
	ADD	ESP,4

	INC	DWORD [_MKTEMP.N]
	JMP	_MKTEMP.NEXT

_MKTEMP.OK:
	PUSH	_MKTEMP.WORK
	PUSH	DWORD [EBP+P1]
	CALL	_strcpy
	ADD	ESP,4*2

	MOV	EBX,[EBP+P1]
	JMP	_MKTEMP.R

_MKTEMP.ERR:
	XOR	EBX,EBX

_MKTEMP.R:
	POP	EBP
	RET

_MKTEMP.N:
	DD	0

_MKTEMP.WORK:
	TIMES	100H	DB 00h

;
;
;
_ferror:
	MOV	EBX,0
	RET

;
;_SETBUF:
;original
;	(FILE *fp,unsigned bufsize)
_fsetbuf:
	RET

;
_setvbuf:
	RET

;
;
_setbuf:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P2]
;	PUSH	EBX
;	CALL	_MALLOC
;	ADD	ESP,4
	OR	EBX,EBX
	JE	_FSETBUF.ERR

	MOV	EDI,[EBP+P1]
	MOV	[EDI+8],EBX	;bufp
	MOV	[EDI+14H],EBX	;buftop

	;MOV	EAX,[EBP+P2]
	MOV	EAX,BUFSIZ
	MOV	[EDI+10H],EAX	;bufsize
	MOV	DWORD [EDI+0CH],0	;bufcnt

	MOV	EBX,1
	JMP	_FSETBUF.R

_FSETBUF.ERR:
	MOV	EDI,[EBP+P1]
	MOV	DWORD [EDI+0CH],0	;bufcnt
	MOV	DWORD [EDI+10H],0	;bufsize
	MOV	EBX,-1

_FSETBUF.R:
	POP	EBP
	RET


;
;
;

_fflush:
	;RET

	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDI,[EBP+P1]

	MOV	AL,[EDI+1]
	AND	AL,7FH
	;CMP	AL,02H
	;JNE	_FFLUSH.10	;if not "w"/"wb"
	TEST	AL,02H
	JE	_FFLUSH.10

	MOV	ECX,[EDI+10H]	;bufsize
	OR	ECX,ECX
	JE	_FFLUSH.10

	MOV	ECX,[EDI+0CH]	;bufcnt
	OR	ECX,ECX
	JE	_FFLUSH.10

	PUSH	EDI
	MOV	EDX,[EDI+14H]	;buftop
	MOV	BX,[EDI+2]
	MOV	AX,4000H
	INT	21H
	POP	EDI
	MOV	DWORD [EDI+0CH],0	;bufcnt

_FFLUSH.10:
	POP	EBP
	RET

;
;
;

_fwrite:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EAX,[EBP+P2]
	MUL	DWORD [EBP+P3]
	MOV	ECX,EAX
	JCXZ	_FWRITE#0

	MOV	EBX,[EBP+P4]
		MOV	AL,[EBX+1]
		TEST	AL,80H
		JNE	_FWRITE.T

	PUSH	ECX

	MOV	AX,4000H
	MOV	BX,[EBX+2]
	MOV	EDX,[EBP+P1]
	INT	21H
	POP	ECX

_FWRITE.50:
	XOR	EDX,EDX
	DIV	DWORD [EBP+P2]
	JMP	_FWRITE#0

_FWRITE.T:
	MOV	ESI,0
	MOV	EDX,[EBP+P1]
_FWRITE.T.10:
	PUSH	ECX
	PUSH	EDX
	PUSH	ESI

	PUSH	DWORD [EBP+P4]
	MOVZX	EAX,BYTE [EDX]
	PUSH	EAX
	CALL	_putc
	ADD	ESP,4*2

	POP	ESI
	POP	EDX
	POP	ECX
	CMP	EBX,-1
	JE	_FWRITE.T.11

	INC	EDX
	INC	ESI
	LOOP	_FWRITE.T.10
_FWRITE.T.11:
	MOV	EAX,ESI
	JMP	_FWRITE.50

_FWRITE#0:
	MOV	EBX,EAX

	POP	EBP
	RET


;

_fread:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EAX,[EBP+P2]
	MUL	DWORD [EBP+P3]
	MOV	ECX,EAX
	PUSH	ECX
	JCXZ	_FREAD#0

	MOV	EDX,[EBP+P1]

		;MOV	EAX,[EBP+P4]
		;CMP	DWORD [EAX+10H],0	;bufsize
		;JNE	_FREAD#BUF

		MOV	ESI,0

		MOV	EDI,[EBP+P4]
		MOV	EAX,[EDI+18H]	;ungetc
		OR	AH,AH
		JE	_FREAD.10
		MOV	DWORD [EDI+18H],0
		MOV	[EDX],AL
		INC	EDX

		DEC	ECX
		INC	ESI
_FREAD.10:
	PUSH	ESI
	XOR	EAX,EAX
	JCXZ	_FREAD.15
	MOV	AX,3F00H	;read
	MOV	BX,[EDI+2]	;fd
	INT	21H
_FREAD.15:
	POP	ESI
	ADD	EAX,ESI

	XOR	EDX,EDX
	DIV	DWORD [EBP+P2]

	CMP	EAX,[EBP+P3]
	JE	_FREAD#0
	MOV	BYTE [_errno],ERR_READ

_FREAD#0:
	POP	ECX
	MOV	EBX,EAX
	JMP	_FREAD.R

_FREAD#BUF:
	POP	ECX
	XOR	EAX,EAX
_FREAD#BUF.10:
	PUSH	EAX
	PUSH	EDX

	PUSH	DWORD [EBP+P4]
	CALL	_fgetc
	ADD	ESP,4

	POP	EDX
	POP	EAX

	CMP	EBX,-1
	JE	_FREAD#BUF.20

	MOV	[EDX],BL
	INC	EDX
	INC	EAX
	LOOP	_FREAD#BUF.10
_FREAD#BUF.20:
	PUSH	EAX	;dummy
	PUSH	DWORD 0
	JMP	_FREAD.15

_FREAD.R:
	POP	EBP
	RET

_link:
	MOV	EBX,-1
	RET

;

_unlink:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDX,[EBP+P1]
	MOV	AX,4100H	;remove dir entry
	XOR	ECX,ECX		;need?
	INT	21H
	SBB	EBX,EBX

	POP	EBP
	RET

;
_feof:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]
	TEST	BYTE [EBX+4],1
	MOV	EBX,0
	JE	_FEOF.R
	MOV	EBX,-1

_FEOF.R:
	POP	EBP
	RET

;
_freopen:
	PUSH	EBP
	MOV	EBP,ESP

	PUSH	DWORD [EBP+P3]
	CALL	_fclose
	ADD	ESP,4

	PUSH	DWORD [EBP+P2]
	PUSH	DWORD [EBP+P1]
	MOV	EDI,[EBP+P3]
	CALL	_FOPEN_F
	ADD	ESP,4*2

	POP	EBP
	RET

;
_fdopen:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,4*1

	CALL	ALLOC_FILE
	JB	_FOPEN.ERR
	MOV	EDI,EBX

	MOV	EAX,[EBP+P1]
	OR	EAX,80000000H
	MOV	DWORD [EBP+W1],EAX
	JMP	_FOPEN2#
	JMP	_FOPEN2

;	EDI:FILE*
_FOPEN_F:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,4*1
	JMP	_FOPEN.5

;

_fopen:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,4*1

	CALL	ALLOC_FILE
	JB	_FOPEN.ERR
	MOV	EDI,EBX

;
_FOPEN.5:
	MOV	DWORD [EBP+W1],0
_FOPEN2#:
	MOV	DWORD [EDI+0CH],0	;buf cnt
	MOV	DWORD [EDI+10H],0	;buf size
	MOV	DWORD [EDI+18H],0	;ungetchr

_FOPEN2:

	MOV	EDX,[EBP+P1]
	MOV	ESI,[EBP+P2]
	CLD
	MOV	AH,0	;#### default:binary
	MOV	BYTE [_FOPEN.APPMOD],0
_FOPEN.10:
	LODSB
	OR	AL,AL
	JE	_FOPEN.50
	CMP	AL,'r'
	JNE	_FOPEN.11
	OR	AH,1
	OR	BYTE [_FOPEN.APPMOD],1
_FOPEN.11:
	CMP	AL,'w'
	JNE	_FOPEN.12
	OR	AH,2
	OR	BYTE [_FOPEN.APPMOD],2
_FOPEN.12:
	CMP	AL,'t'
	JNE	_FOPEN.13
	OR	AH,80H		;text

_FOPEN.13:
	CMP	AL,'b'
	JNE	_FOPEN.14
	AND	AH,7FH
_FOPEN.14:
	CMP	AL,'+'
	JNE	_FOPEN.15
	OR	AH,40H+02H+01H
	OR	BYTE [_FOPEN.APPMOD],40H
_FOPEN.15:
	CMP	AL,'a'
	JNE	_FOPEN.16
	OR	AH,40H+02H+01H
	MOV	BYTE [_FOPEN.APPMOD],40H
_FOPEN.16:

	JMP	_FOPEN.10

_FOPEN.50:
	MOV	[_FOPEN.TYPE],AH

	push	eax
	MOV	EAX,[EBP+W1]
	OR	EAX,EAX
	pop	eax
	JS	_FOPEN.70	;if fdopen

		TEST	AH,40H
		JNE	_FOPEN.APPEND

	MOV	AL,AH
	AND	AL,03H
	TEST	AL,02H
	JE	_FOPEN.60

	PUSH	EDI

		MOV	EBX,_FOPEN.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_FOPEN.CV_NAME

	MOV	AX,3C00H	;create
	MOV	CX,0
	INT	21H
	POP	EDI
	JB	_FOPEN.ERR
	JMP	_FOPEN.70#

_FOPEN.60:
	CMP	AL,01H
	JNE	_FOPEN.ERR

;_FOPEN.APPEND:
	PUSH	EDI
		MOV	EBX,_FOPEN.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_FOPEN.CV_NAME
	MOV	AX,3D00H	;open
	MOV	CX,0
	INT	21H
	POP	EDI
	JB	_FOPEN.ERR
	JMP	_FOPEN.70#

_FOPEN.APPEND:
	PUSH	EDI
		MOV	BH,AH
		PUSH	EBX
		MOV	EBX,_FOPEN.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_FOPEN.CV_NAME
		POP	EBX

	PUSH	EBX
	MOV	AX,3D02H
	MOV	CX,0	;02H	;r/w?
	INT	21H
	POP	EBX
	JB	_FOPEN.APPEND.10
	JMP	_FOPEN.APPEND.50

_FOPEN.APPEND.10:
	TEST	BYTE [_FOPEN.APPMOD],2
	JE	_FOPEN.APPEND.11

	TEST	BH,02H
	JNE	_FOPEN.APPEND.10W
_FOPEN.APPEND.11:
	POP	EDI
	JMP	_FOPEN.ERR

_FOPEN.APPEND.10W:
		MOV	EDX,_FOPEN.CV_NAME
	MOV	AX,3C00H
	MOV	CX,00H	;02H	;r/w?
	INT	21H
	POP	EDI
	JB	_FOPEN.ERR
	JMP	_FOPEN.70#

_FOPEN.APPEND.50:
	POP	EDI
	JMP	_FOPEN.70#

_FOPEN.70#:
	MOV	[EBP+W1],EAX

_FOPEN.70:
	MOV	EAX,[EBP+W1]
	AND	EAX,7FFFH

	MOV	BX,AX
	MOV	AH,[_FOPEN.TYPE]
	MOV	BYTE [EDI],1	;use
	MOV	BYTE [EDI+1],AH	;mode
	MOV	[EDI+2],BX	;fd
	MOV	BYTE [EDI+4],0	;eof

;	TEST	AH,40H
;	JE	_FOPEN.75
	TEST	BYTE [_FOPEN.APPMOD],40H
	JE	_FOPEN.75

		PUSH	EDI

		PUSH	2	;SEEK_END
		PUSH	0
		PUSH	EDI
		CALL	_fseek
		ADD	ESP,4*3

		POP	EDI

_FOPEN.75:
	MOV	EBX,EDI
	JMP	_FOPEN.R

_FOPEN.ERR:
	MOV	BYTE [_errno],ERR_OPEN
	MOV	EBX,0
	JMP	_FOPEN.R

_FOPEN.R:
	ADD	ESP,4*1
	POP	EBP
	RET

_FOPEN.TYPE:
	DD	0
_FOPEN.APPMOD:
	DD	0
_FOPEN.CV_NAME:
	TIMES	100H	DB	00h

;
;
;
_fileno:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	XOR	EBX,EBX
	MOV	BX,[ESI+2]	;fd
	POP	EBP
	RET

;
;
;
ALLOC_FILE:
	MOV	EBX,FILE_WORK
	MOV	CL,0
ALLOC_FILE.10:
	CMP	BYTE [EBX],0
	JE	ALLOC_FILE.20
	ADD	EBX,SIZEOF_FILE
	INC	CL
	CMP	CL,FILES
	JB	ALLOC_FILE.10
	STC
	RET

ALLOC_FILE.20:
	CLC
	RET

;
_fclose:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDI,[EBP+P1]
	PUSH	EDI
	CALL	_fflush
	ADD	ESP,4

	MOV	EBX,[EBP+P1]
	MOV	BYTE [EBX],0

	MOV	AX,[EBX+2]
	CMP	AX,2

		MOV	EBX,0
	JBE	_FCLOSE.R

	MOV	BX,AX
	MOV	AX,3E00H	;close
	INT	21H
	SBB	EBX,EBX
_FCLOSE.R:
	POP	EBP
	RET

;

_rewind:
	PUSH	EBP
	MOV	EBP,ESP

;	MOV	AX,4200H
;	MOV	BX,[EBP+P1]
;	MOV	ECX,0
;	MOV	EDX,0
;	INT	21H

	PUSH	DWORD 0
	PUSH	DWORD 0
	MOV	EDI,[EBP+P1]
	PUSH	EDI
	CALL	_fseek
	ADD	ESP,4*3

	POP	EBP
	RET

;
_fseek:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	AH,42H
	MOV	AL,[EBP+P3]
	MOV	EBX,[EBP+P1]	;FILE*
	MOV	DWORD [EBX+18H],0	;ungetchr
	MOV	BX,[EBX+2]

	MOV	EDX,[EBP+P2]
	MOV	ECX,EDX
	SHR	ECX,10H
	INT	21H
	MOV	EBX,EDX
	SHL	EBX,10H
	MOV	BX,AX

	PUSH	EBX

	MOV	AX,4201H
	MOV	EBX,[EBP+P1]
	MOV	BX,[EBX+2]
	XOR	ECX,ECX
	XOR	EDX,EDX
	INT	21H
	MOV	ECX,EDX
	SHL	ECX,10H
	MOV	CX,AX

	POP	EBX
	CMP	EBX,ECX
	MOV	EBX,0
	JE	_FSEEK.R

;	MOV	BYTE [_errno],ERR_SEEK
;	DEC	EBX
_FSEEK.R:
	POP	EBP
	RET

;
_ftell:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	AX,4201H
	;MOV	BX,[EBP+P1]
	MOV	EBX,[EBP+P1]
	MOV	BX,[EBX+2]
	MOV	ECX,0
	MOV	EDX,0
	INT	21H		;DX:AX
	MOV	BX,DX
	SHL	EBX,10H
	MOV	BX,AX

	POP	EBP
	RET


;
_in_b:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,[EBP+P1]
	IN	AL,DX
	MOVZX	EBX,AL
	POP	EBP
	RET

;
_out_b:	PUSH	EBP
	MOV	EBP,ESP
	MOV	DX,[EBP+P1]
	MOV	AL,[EBP+P2]
	OUT	DX,AL
	POP	EBP
	RET

;

_dos06:
	PUSH	EBP
	MOV	AH,06H
	MOV	DL,0FFH
	INT	21H
	MOVZX	EBX,AL
	POP	EBP
	RET
;
_dos07:
	PUSH	EBP
	MOV	AH,07H
	INT	21H
	MOVZX	EBX,AL
	POP	EBP
	RET
;
_dos08:
	PUSH	EBP
	MOV	AH,08H
	INT	21H
	MOVZX	EBX,AL
	POP	EBP
	RET

;
_dos01:
	PUSH	EBP
	MOV	AH,01H
	INT	21H
	MOVZX	EBX,AL
	POP	EBP
	RET

dos09:
	MOV	AH,09H
	INT	21H
	RET

;
_dos0b:
	PUSH	EBP
	MOV	AH,0BH
	INT	21H
	MOVZX	EBX,AL
	POP	EBP
	RET

;
;
;

_puthex_l:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EAX,[EBP+P1]
	PUSH	EAX
	SHR	EAX,16
	CALL	PUTHEX_W
	POP	EAX
	CALL	PUTHEX_W

	POP	EBP
	RET

_puthex_w:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	AX,[EBP+P1]
	CALL	PUTHEX_W

	MOV	ESP,EBP
	POP	EBP
	RET


_puthex_b:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	AX,[EBP+P1]
	CALL	PUTHEX_B

	MOV	ESP,EBP
	POP	EBP
	RET

;
;
;

PUTHEX_W:
	PUSH	AX
	SHR	AX,8
	CALL	PUTHEX_B
	POP	AX
	CALL	PUTHEX_B
	RET

;
;
;

PUTHEX_B:
	PUSH	AX
	SHR	AL,4
	CALL	PUTHEX_N
	POP	AX
PUTHEX_N:
	AND	AL,0FH
	CMP	AL,10
	JB	PUTHEX_N.10
	ADD	AL,7
PUTHEX_N.10:
	ADD	AL,'0'
	CALL	PUTCHR
	RET

;
FPUTC0:
	MOV	BX,[EDI+2]

FPUTC:
	;MOV	[USRDMA],AL
	MOV	[USRDTA],AL
	MOV	AX,4000H
	MOV	ECX,1
	MOV	EDX,USRDTA	;USRDMA
	;INT	21H
	CALL	__WRITE
	RET

;

FPUTC_BUF:
	CMP	DWORD [EDI+10H],0	;buf size
	JE	FPUTC0

	MOV	EDX,[EDI+8]
	MOV	[EDX],AL
	INC	EDX
	MOV	[EDI+8],EDX

	INC	DWORD [EDI+0CH]
	MOV	EAX,[EDI+10H]
	CMP	DWORD [EDI+0CH],EAX	;400H
	JNE	FPUTC_BUF.20

	PUSHAD
	MOV	EDX,[EDI+14H]
	MOV	[EDI+8],EDX

	MOV	ECX,[EDI+0CH]
	MOV	DWORD [EDI+0CH],0

	XOR	EBX,EBX	;**
	MOV	BX,[EDI+2]
	MOV	AX,4000H
	;INT	21H
	CALL	__WRITE
	JB	FPUTC_BUF.15
	OR	EAX,EAX
FPUTC_BUF.15:
	POPAD
	MOV	EAX,0
	JB	FPUTC_BUF.R
	JE	FPUTC_BUF.R

FPUTC_BUF.20:
	MOV	EAX,1

FPUTC_BUF.R:
	RET

;

_putc:
_fputc:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDI,[EBP+P2]
	CMP	BYTE [EDI],0
	JE	_FPUTC.ERR
	TEST	BYTE [EDI+1],02H	;write
	JE	_FPUTC.ERR

	;MOV	BX,[EDI+2]	;[BP+P2]	hdl

	MOV	AL,[EBP+P1]
	CMP	AL,0AH
	JNE	_FPUTC.BIN

	TEST	BYTE [EDI+1],80H
	JE	_FPUTC.BIN

	MOV	AL,0DH
		PUSH	EDI
	;PUSH	EBX
	;CALL	FPUTC
	CALL	FPUTC_BUF
	;POP	EBX
		POP	EDI
	MOV	AL,0AH

_FPUTC.BIN:
	;CALL	FPUTC
	CALL	FPUTC_BUF
	;JB	_FPUTC.ERR
	CMP	EAX,1
	JNE	_FPUTC.ERR

	MOV	EBX,[EBP+P1]
	JMP	_FPUTC.R

_FPUTC.ERR:
	MOV	EBX,-1
	JMP	_FPUTC.R

_FPUTC.R:
	POP	EBP
	RET

;
;
;
_fgets:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDI,[EBP+P1]	;char*buf
	MOV	EBX,[EBP+P3]	;FILE*

	MOV	ECX,[EBP+P2]
	JCXZ	_FGETS.20
_FGETS.10:
	DEC	ECX
	JE	_FGETS.20

	PUSH	EDI
	PUSH	EBX
	PUSH	ECX

	PUSH	EBX
	CALL	_fgetc
	ADD	ESP,4
	MOV	AL,BL
	CMP	EBX,-1

	POP	ECX
	POP	EBX
	POP	EDI
	JE	_FGETS.20

	MOV	[EDI],AL
	INC	EDI
	CMP	AL,0AH
	JE	_FGETS.20
	JMP	_FGETS.10

_FGETS.20:
	CMP	EDI,[EBP+P1]
	JE	_FGETS.N

	MOV	BYTE [EDI],0
	MOV	EBX,[EBP+P1]
	JMP	_FGETS.R

_FGETS.N:
	XOR	EBX,EBX
	JMP	_FGETS.R

_FGETS.R:
	POP	EBP
	RET

;

FGETC0:
	MOV	BX,[EDI+2]

FGETC:
	MOV	AX,3F00H	;read
	MOV	ECX,1
	MOV	EDX,USRDTA	;USRDMA
	INT	21H
	MOV	CL,[USRDTA]	;[USRDMA]
	RET

;
FGETC_BUF:
	CMP	DWORD [EDI+10H],0	;bufsize
	JE	FGETC0

	MOV	EAX,[EDI+0CH]	;buf chars
	OR	EAX,EAX
	JNE	FGETC_BUF.10

	PUSHAD
	MOV	EDX,[EDI+14H]	;	buf top
	MOV	[EDI+8],EDX	;buf pnt =

	MOV	BX,[EDI+2]
	MOV	AX,3F00H
	MOV	ECX,[EDI+10H]
	PUSH	EDI
	INT	21H
	POP	EDI
	MOV	[EDI+0CH],EAX	;bufcnt
	POPAD
	JB	FGETC_BUF.R
	CMP	DWORD [EDI+0CH],1	;bufcnt
	JB	FGETC_BUF.R

FGETC_BUF.10:
	MOV	EDX,[EDI+8]	;buf pnt
	MOV	CL,[EDX]
	INC	EDX
	MOV	[EDI+8],EDX

	DEC	DWORD [EDI+0CH]	;buf chars
	MOV	EAX,1

FGETC_BUF.R:
	RET

;
;
;

_getc:
;
;
;
_fgetc:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDI,[EBP+P1]
	CMP	BYTE [EDI],0
	JE	_FGETC.ERR

	TEST	BYTE [EDI+1],01H	;read
	JE	_FGETC.ERR

	MOV	EAX,[EDI+18H]		;_ungetc
	CMP	EAX,100H
	JB	_FGETC.10
	MOV	DWORD [EDI+18H],0	;_ungetc
	MOV	EBX,EAX
	AND	EBX,0FFH
	JMP	_FGETC.R

_FGETC.10:
	;MOV	BX,[EDI+2]	;hdl
	PUSH	EDI
	;CALL	FGETC
		CALL	FGETC_BUF
	POP	EDI
	JB	_FGETC.ERR

		OR	EAX,EAX
		JE	_FGETC.ERR

	TEST	BYTE [EDI+1],80H
	JE	_FGETC.BIN

	CMP	CL,0DH
	JNE	_FGETC.BIN

	;MOV	BX,[EDI+2]
	PUSH	EDI
	;CALL	FGETC
		CALL	FGETC_BUF
	POP	EDI
	JB	_FGETC.ERR

_FGETC.BIN:
	CMP	EAX,1
	JNE	_FGETC.ERR

	MOVZX	EBX,CL
	JMP	_FGETC.R

_FGETC.ERR:
	MOV	EBX,-1
	OR	BYTE [EDI+4],1	;eof

_FGETC.R:
	POP	EBP
	RET

;
PERROR_FMT:DB	'perror (%s:%s)',0

;
_perror:
	PUSH	EBP
	MOV	EBP,ESP

	;PUSH	[EBP+P1]
	;CALL	_PUTS
	;ADD	ESP,4

	;PUSH	[EBP+P1]
	;PUSH	[_STDERR]
	;CALL	_FPRINTF
	;ADD	ESP,4*2

	PUSH	DWORD [_errno]
	CALL	_strerror
	ADD	ESP,4

	PUSH	EBX

	PUSH	DWORD [EBP+P1]
	PUSH	DWORD PERROR_FMT
	PUSH	DWORD [_stderr]
	CALL	_fprintf
	ADD	ESP,4*3

	ADD	ESP,4

	POP	EBP
	RET

;
PUTS_W:
	CLD
PUTS_W.10:
	JCXZ	PUTS_W.E
	LODSB
	OR	AL,AL
	JE	PUTS_W.E
	PUSH	ECX
	PUSH	ESI
	CALL	_PRINTF.OUT
	POP	ESI
	POP	ECX
	DEC	ECX
	JMP	PUTS_W.10
PUTS_W.E:
	RET

;
	DB	'PUTS',0

PUTS:	CLD
PUTS.10:
	LODSB
	OR	AL,AL
	JE	PUTS.E
	PUSH	ESI
	CALL	_PRINTF.OUT	;PUTCHR2
	POP	ESI
	JMP	PUTS.10

PUTS.E:
	RET

;
_fputs:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ECX,[EBP+P2]	;FILE*
	MOV	[_PRINTF.OUT.HDL],ECX

	;MOV	DWORD [_PRINTF.OUT.PROG],_PRINTF.OUT.PUTC
	MOV	ECX,_PRINTF.OUT.PUTC
	MOV	[_PRINTF.OUT.PROG],ECX

	MOV	EBX,[EBP+P1]	;char*
	;PUSH	EBX
	;CALL	_PUTS
	;ADD	ESP,4
		MOV	ESI,EBX
		CALL	PUTS

	;MOV	DWORD [_PRINTF.OUT.PROG],PUTCHR2
	MOV	ECX,PUTCHR2
	MOV	[_PRINTF.OUT.PROG],ECX

	POP	EBP
	RET

;
;
;
	DB	'_PUTS',0

_puts:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]
	CALL	PUTS

		PUSH	DWORD [_stdout]
		PUSH	DWORD 0AH
		CALL	_putc
		ADD	ESP,4*2

	POP	EBP
	RET
;
_vsprintf:
	PUSH	EBP
	MOV	EBP,ESP

		MOV	DWORD [_SPRINTF.PNT.END],7FFFFFFFH

	MOV	EDI,[EBP+P3]
	JMP	_SPRINTF.1
;
_snprintf:
	PUSH	EBP
	MOV	EBP,ESP

		MOV	EAX,[EBP+P1]
		ADD	EAX,[EBP+P2]
		MOV	[_SPRINTF.PNT.END],EAX
		MOV	BYTE [_SNPRINTF.OVER],0

	PUSH	DWORD [EBP+P1]
	PUSH	DWORD [EBP+P3]
	CALL	_sprintf
	ADD	ESP,4*2

		CMP	BYTE [_SNPRINTF.OVER],0
		JE	_SNPRINTF.R

		MOV	EBX,-1

_SNPRINTF.R:
	POP	EBP
	RET

_SNPRINTF.OVER:DD	0

;
_sprintf:
	PUSH	EBP
	MOV	EBP,ESP

		MOV	DWORD [_SPRINTF.PNT.END],7FFFFFFFH

	LEA	EDI,[EBP+P3]

_SPRINTF.1:
	MOV	ESI,[EBP+P2]

	MOV	EAX,[EBP+P1]
	MOV	[_SPRINTF.PNT],EAX

	MOV	ECX,_PRINTF.OUT.SETC
	MOV	[_PRINTF.OUT.PROG],ECX

	CALL	PRINTFMT

	MOV	EBX,[_SPRINTF.PNT]
	MOV	BYTE [EBX],0

	MOV	ECX,PUTCHR2
	MOV	[_PRINTF.OUT.PROG],ECX

	SUB	EBX,[EBP+P1]

	POP	EBP
	RET

;_SPRINTF:
	POP	EBX	;ret.adrs
	POP	EAX	;char*s
	MOV	[_SPRINTF.PNT],EAX
	MOV	[_SPRINTF.RET],EBX

	;MOV	DWORD [_PRINTF.OUT.PROG],_PRINTF.OUT.SETC
	MOV	ECX,_PRINTF.OUT.SETC
	MOV	[_PRINTF.OUT.PROG],ECX

	CALL	_printf
	MOV	EBX,[_SPRINTF.PNT]
	MOV	BYTE [EBX],0

	;MOV	DWORD [_PRINTF.OUT.PROG],PUTCHR2
	MOV	ECX,PUTCHR2
	MOV	[_PRINTF.OUT.PROG],ECX

	PUSH	EAX
	MOV	EBX,[_SPRINTF.RET]
	PUSH	EBX
	RET
_SPRINTF.RET:
	DD	0
_SPRINTF.PNT:
	DD	0
_SPRINTF.PNT.END:
	DD	0
;
_vfprintf:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDI,[EBP+P3]
	JMP	_FPRINTF.1

;
_fprintf:
	PUSH	EBP
	MOV	EBP,ESP

	LEA	EDI,[EBP+P3]
_FPRINTF.1:
	MOV	ESI,[EBP+P2]

	MOV	EAX,[EBP+P1]
	MOV	[_PRINTF.OUT.HDL],EAX

	MOV	ECX,_PRINTF.OUT.PUTC
	MOV	[_PRINTF.OUT.PROG],ECX

	CALL	PRINTFMT

	MOV	ECX,PUTCHR2
	MOV	[_PRINTF.OUT.PROG],ECX

	POP	EBP
	RET

;_FPRINTF:
	POP	EBX	;ret.adrs
	POP	EAX	;FILE *fd

	MOV	[_PRINTF.OUT.HDL],EAX
	MOV	[_FPRINTF.RET],EBX

	;MOV	DWORD [_PRINTF.OUT.PROG],_PRINTF.OUT.PUTC
	MOV	ECX,_PRINTF.OUT.PUTC
	MOV	[_PRINTF.OUT.PROG],ECX

	CALL	_printf

	;MOV	DWORD [_PRINTF.OUT.PROG],PUTCHR2
	MOV	ECX,PUTCHR2
	MOV	[_PRINTF.OUT.PROG],ECX

	PUSH	EAX	;FILE *fd
	MOV	EBX,[_FPRINTF.RET]
	PUSH	EBX
	RET
;
_PRINTF.OUT.SETC:
	PUSH	EBX
	MOV	EBX,[_SPRINTF.PNT]

		CMP	EBX,[_SPRINTF.PNT.END]
		JNB	_PRINTF.OUT.SETC.10

	MOV	[EBX],AL
	INC	EBX

	MOV	[_SPRINTF.PNT],EBX
	JMP	_PRINTF.OUT.SETC.90
_PRINTF.OUT.SETC.10:
	MOV	BYTE [_SNPRINTF.OVER],0FFH
_PRINTF.OUT.SETC.90:
	POP	EBX
	RET

_PRINTF.OUT.PUTC:
	PUSHAD

	MOV	EDI,[_PRINTF.OUT.HDL]
	PUSH	EDI
	MOV	AH,0
	PUSH	EAX
	CALL	_fputc
	POP	EAX
	POP	EAX

	POPAD
	RET


_PRINTF.OUT.WORK:
	DD	0

_PRINTF.OUT.HDL:DD	0

_FPRINTF.RET:DD	0

;
_printf:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]
	LEA	EDI,[EBP+P2]
	CALL	PRINTFMT

	POP	EBP
	RET
;
_vprintf:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	CALL	PRINTFMT

	POP	EBP
	RET

;

PRINTFMT:
	PUSH	EBP
	MOV	EBP,ESP

;	MOV	EDI,ESP
;	ADD	EDI,6*2	;6
;
;	MOV	ESI,[EBP+P1]

	CLD
	;MOV	DWORD [_PRINTF.N1],1
	;MOV	BYTE [FILL_CHR],' '
_PRINTF.10:
	LODSB
	OR	AL,AL
	JE	_PRINTF.E
	CMP	AL,'%'
	JE	_PRINTF.40
_PRINTF.20:
	PUSH	ESI
	PUSH	EDI
	CALL	_PRINTF.OUT	;PUTCHR2
	POP	EDI
	POP	ESI
	JMP	_PRINTF.10

_PRINTF.E:
	POP	EBP
	RET

_PRINTF.OUT:
	CALL	[_PRINTF.OUT.PROG]
	RET

_PRINTF.OUT.PROG:
	DD	PUTCHR2

;	printf sub

_PRINTF.40:
	MOV	DWORD [_PRINTF.N1],1
	MOV	DWORD [_PRINTF.MAXWIDTH],0FFFFFFFFH
	MOV	BYTE [FILL_CHR],' '
	MOV	BYTE [_PRINTF.SPC],0
	MOV	BYTE [_PRINTF.PLUS],0
	MOV	BYTE [_PRINTF.MINUS],0
	MOV	BYTE [_PRINTF.PREF],0

	MOV	BYTE [IS_UNSIGNED],0
_PRINTF.50:
	LODSB
	OR	AL,AL
	JE	_PRINTF.E

	CMP	AL,'%'
	JE	_PRINTF_PARC

	CMP	AL,'s'
	JE	_PRINTF_S
	CMP	AL,'l'
	JE	_PRINTF_L
	CMP	AL,'u'
	JE	_PRINTF_U
	CMP	AL,'o'
	JE	_PRINTF_O
	CMP	AL,'d'
	JE	_PRINTF_D
	CMP	AL,'i'
	JE	_PRINTF_D
	CMP	AL,'x'
	JE	_PRINTF_X
	CMP	AL,'X'
	JE	_PRINTF_X

	CMP	AL,'e'
	JE	_PRINTF_F
	CMP	AL,'f'
	JE	_PRINTF_F
	CMP	AL,'g'
	JE	_PRINTF_F

	CMP	AL,'c'
	JE	_PRINTF_C

	CMP	AL,'.'
	JE	_PRINTF_CM

	CMP	AL,'#'
	JE	_PRINTF_SHARP

	CMP	AL,'+'
	JE	_PRINTF_PLUS
	CMP	AL,'-'
	JE	_PRINTF_MINUS

	CMP	AL,' '
	JE	_PRINTF_SPC

	CMP	AL,'*'
	JE	_PRINTF_AST

	SUB	AL,'0'
	JE	_PRINTF_0

	CMP	AL,10
	JB	_PRINTF_NO

	ADD	AL,'0'
	PUSH	EAX
	MOV	AL,'%'
	CALL	_PRINTF.OUT	;PUTCHR2
	POP	EAX
	JMP	_PRINTF.20

_PRINTF_CM:
	LODSB
	CMP	AL,'*'
	JNE	_PRINTF_CM.10
	MOV	EAX,[EDI]
	ADD	EDI,4
	JMP	_PRINTF_CM.20
_PRINTF_CM.10:
	DEC	ESI
	CALL	GETDEC
_PRINTF_CM.20:
	MOV	[_PRINTF.MAXWIDTH],EAX
	JMP	_PRINTF.50

;
_PRINTF_SHARP:
	MOV	BYTE [_PRINTF.PREF],0FFH
	JMP	_PRINTF.50
;
_PRINTF_SPC:
	MOV	BYTE [_PRINTF.SPC],0FFH
	JMP	_PRINTF.50
;
_PRINTF_PLUS:
	MOV	BYTE [_PRINTF.PLUS],0FFH
	JMP	_PRINTF.50
;
_PRINTF_MINUS:
	;temp
	MOV	BYTE [_PRINTF.MINUS],0FFH
	JMP	_PRINTF.50

;
_PRINTF_AST:
	MOV	EAX,[EDI]
	ADD	EDI,4
	MOV	[_PRINTF.N1],EAX
	JMP	_PRINTF.50
;
_PRINTF_NO:
	DEC	ESI
	CALL	GETDEC
	MOV	[_PRINTF.N1],EAX

	JMP	_PRINTF.50	;10
_PRINTF_0:
	MOV	BYTE [FILL_CHR],'0'
	JMP	_PRINTF.50

_PRINTF_F:
	PUSHAD

	PUSH	DWORD [EDI]
	PUSH	DWORD _PRINTF_BUF
	CALL	_set_f	;_SET_F
	ADD	ESP,8

	MOV	ESI,_PRINTF_BUF
	;MOVZX	ECX,WORD [_PRINTF.MAXWIDTH]
	MOV	ECX,40
	CALL	PUTS_W

	POPAD
	ADD	EDI,4
	JMP	_PRINTF.10

_PRINTF_PARC:
	CALL	_PRINTF.OUT
	JMP	_PRINTF.10

_PRINTF_C:
	PUSHAD
	MOV	AL,[EDI]
	CALL	_PRINTF.OUT	;PUTCHR2
	POPAD
	ADD	EDI,4	;2
	JMP	_PRINTF.10

_PRINTF_S:
	PUSHAD
	MOV	ESI,[EDI]

		PUSH	ESI

		MOV	ECX,[_PRINTF.N1]
		CMP	ECX,1
		MOV	ECX,0
		JE	_PRINTF_S.20

		PUSH	ESI
		CALL	_strlen
		ADD	ESP,4
		CMP	EBX,[_PRINTF.MAXWIDTH]
		JBE	_PRINTF_S.05
		MOV	EBX,[_PRINTF.MAXWIDTH]
_PRINTF_S.05:
		MOV	ECX,[_PRINTF.N1]
		SUB	ECX,EBX
		JLE	_PRINTF_S.20

		CMP	BYTE [_PRINTF.MINUS],0FFH
		JE	_PRINTF_S.20

		PUSH	ECX
_PRINTF_S.10:
		PUSH	ECX
		MOV	AL,' '
		CALL	_PRINTF.OUT
		POP	ECX
		LOOP	_PRINTF_S.10

		POP	ECX
_PRINTF_S.20:
		POP	ESI

		PUSH	ECX

	;CALL	PUTS
	MOV	ECX,[_PRINTF.MAXWIDTH]
	CALL	PUTS_W

		POP	ECX
		OR	ECX,ECX
		JLE	_PRINTF_S.50

		CMP	BYTE [_PRINTF.MINUS],0
		JE	_PRINTF_S.50

_PRINTF_S.30:
		PUSH	ECX
		MOV	AL,' '
		CALL	_PRINTF.OUT
		POP	ECX
		LOOP	_PRINTF_S.30

_PRINTF_S.50:

	POPAD
	ADD	EDI,4	;2
	JMP	_PRINTF.10

_PRINTF_L:
	LODSB
	CMP	AL,'u'
	JE	_PRINTF_U
	CMP	AL,'d'
	JE	_PRINTF_D
	CMP	AL,'x'
	JE	_PRINTF_X
	DEC	ESI


_PRINTF_U:
	MOV	BYTE [IS_UNSIGNED],1
_PRINTF_D:
	PUSHAD
	MOV	EBX,[EDI]
		CALL	_PRINTF.PUT_PLUS
;	CALL	PUTDEC
	MOV	ECX,[_PRINTF.N1]
	CALL	PUTDEC2

	POPAD
	ADD	EDI,4	;2
	JMP	_PRINTF.10

_PRINTF_O:	;just test
	CMP	BYTE [_PRINTF.PREF],0
	JE	_PRINTF_O.10
_PRINTF_O.10:

	PUSHAD
	MOV	EBX,[EDI]
	MOV	ECX,[_PRINTF.N1]
	CALL	PUTOCT2

	POPAD
	ADD	EDI,4	;2
	JMP	_PRINTF.10


_PRINTF_X:
	PUSHAD
	MOV	EBX,[EDI]
	MOV	ECX,[_PRINTF.N1]
	CALL	PUTHEX2

	POPAD
	ADD	EDI,4	;2
	JMP	_PRINTF.10

_PRINTF.N1:DD	0
_PRINTF.0:DD	0

_PRINTF.SPC:	DD	0
_PRINTF.PLUS:	DD	0
_PRINTF.MINUS:DD	0
_PRINTF.MAXWIDTH:DD	0
_PRINTF.PREF:DD	0
_PRINTF_BUF:TIMES	100	DB	00h

;
_PRINTF.PUT_PLUS:
	OR	EBX,EBX
	JS	_PRINTF.PUT_PLUS.R

	CMP	BYTE [_PRINTF.SPC],0
	JE	_PRINTF.PUT_PLUS.10

	PUSHAD
	MOV	AL,' '
	CALL	_PRINTF.OUT
	POPAD
	JMP	_PRINTF.PUT_PLUS.R

_PRINTF.PUT_PLUS.10:
	CMP	BYTE [_PRINTF.PLUS],0
	JE	_PRINTF.PUT_PLUS.R

	PUSHAD
	MOV	AL,'+'
	CALL	_PRINTF.OUT
	POPAD
_PRINTF.PUT_PLUS.R:
	RET

;
;GETDEC:	XOR	EDX,EDX

;GETDEC.10:
;	LODSB
;	CMP	AL,'0'
;	JB	GETDEC.20
;	CMP	AL,'9'
;	JA	GETDEC.20
;	PUSH	EAX
;	MOV	EAX,EDX
;	SHL	EDX,2
;	ADD	EDX,EAX
;	SHL	EDX,1
;	POP	EAX
;	SUB	AL,'0'
;	MOVZX	EAX,AL
;	ADD	EDX,EAX
;	JMP	GETDEC.10

;GETDEC.20:
;	DEC	ESI
;	MOV	EAX,EDX
;	RET

;

SETHEX2:
	MOV	DH,0

	MOV	ECX,10000000H
	CALL	SETDEC_SUB
	MOV	ECX,1000000H
	CALL	SETDEC_SUB
	MOV	ECX,100000H
	CALL	SETDEC_SUB
	MOV	ECX,10000H
	CALL	SETDEC_SUB
	MOV	ECX,1000H
	CALL	SETDEC_SUB
	MOV	ECX,100H
	CALL	SETDEC_SUB
	MOV	ECX,10H
	CALL	SETDEC_SUB
	MOV	AL,BL
	CMP	AL,10
	JB	SETHEX2.10
	ADD	AL,7
SETHEX2.10:
	ADD	AL,'0'
	MOV	[ESI],AL
	INC	ESI
	RET

;

SETOCT2:
	MOV	DH,0

	MOV	ECX,8*8*8*8*8*8*8*8*8*8	;2^(3*10)
	CALL	SETDEC_SUB
	MOV	ECX,8*8*8*8*8*8*8*8*8	;2^(3*9)
	CALL	SETDEC_SUB
	MOV	ECX,8*8*8*8*8*8*8*8
	CALL	SETDEC_SUB
	MOV	ECX,8*8*8*8*8*8*8
	CALL	SETDEC_SUB
	MOV	ECX,8*8*8*8*8*8
	CALL	SETDEC_SUB
	MOV	ECX,8*8*8*8*8
	CALL	SETDEC_SUB
	MOV	ECX,8*8*8*8
	CALL	SETDEC_SUB
	MOV	ECX,8*8*8
	CALL	SETDEC_SUB
	MOV	ECX,8*8
	CALL	SETDEC_SUB
	MOV	ECX,8
	CALL	SETDEC_SUB
	MOV	AL,BL
	ADD	AL,'0'
	MOV	[ESI],AL
	INC	ESI
	RET


;

SETDEC2:
	MOV	DH,0
	MOV	ECX,1000000000
	CALL	SETDEC_SUB
	MOV	ECX,100000000
	CALL	SETDEC_SUB
	MOV	ECX,10000000
	CALL	SETDEC_SUB
	MOV	ECX,1000000
	CALL	SETDEC_SUB
	MOV	ECX,100000
	CALL	SETDEC_SUB
	MOV	ECX,10000
	CALL	SETDEC_SUB
	MOV	ECX,1000
	CALL	SETDEC_SUB
	MOV	ECX,100
	CALL	SETDEC_SUB
	MOV	ECX,10
	CALL	SETDEC_SUB
	MOV	AL,BL
	ADD	AL,'0'
	MOV	[ESI],AL
	INC	ESI
	RET

;
;
;

SETDEC:
	MOV	ESI,WORKDC
	MOV	ECX,10000
	CALL	SETDC5
	MOV	ECX,1000
	CALL	SETDC5
	MOV	ECX,100
	CALL	SETDC5
	MOV	ECX,10
	CALL	SETDC5
	MOV	AL,BL
	ADD	AL,'0'
	MOV	[ESI],AL
	MOV	AL,'$'
	MOV	[WORKDC+5],AL
	RET

;	AX:#

PUTDEC:
	CALL	SETDEC
	MOV	EDX,WORKDC
	MOV	CH,4
PUTDC1:	XCHG	EDX,EBX
	MOV	AL,[EBX]
	XCHG	EDX,EBX
	CMP	AL,'0'
	JNE	PUTDC2
	INC	EDX
	DEC	CH
	JNE	PUTDC1
PUTDC2:	CALL	dos09
	RET

PUTHEX2:
	MOV	EDI,WORKDC
	CALL	SET_HEX_N
	MOV	BYTE [ESI],0
	MOV	ESI,WORKDC
	CALL	PUTS
	RET

PUTOCT2:
	MOV	EDI,WORKDC
	CALL	SET_OCT_N
	MOV	BYTE [ESI],0
	MOV	ESI,WORKDC
	CALL	PUTS
	RET


PUTDEC2:
	MOV	EDI,WORKDC
	CALL	SET_DEC_N
	MOV	BYTE [ESI],0
	MOV	ESI,WORKDC
	CALL	PUTS
	RET


SETDC5:	MOV	DL,-1
	OR	AL,AL
SETDC6:	INC	DL
	SBB	EBX,ECX
	JNB	SETDC6
	ADD	EBX,ECX
	MOV	AL,DL
	CMP	AL,10
	JB	SETDC7
	ADD	AL,7
SETDC7:
	ADD	AL,'0'
	MOV	[ESI],AL
	INC	ESI
	RET

;

SETDEC_SUB:
	MOV	DL,-1
SETDEC_SUB.10:
	INC	DL
	SUB	EBX,ECX
	JNB	SETDEC_SUB.10
	ADD	EBX,ECX
	OR	DL,DL
	JNE	SETDEC_SUB.20
	OR	DH,DH
	JNE	SETDEC_SUB.30
	RET

SETDEC_SUB.20:
	MOV	DH,0FFH

SETDEC_SUB.30:
	CMP	DL,10
	JB	SETDEC_SUB.31
	ADD	DL,7
SETDEC_SUB.31:
	ADD	DL,'0'
	MOV	[ESI],DL
	INC	ESI
	RET

SET_OCT_N:
	PUSH	EBX
	CALL	LEN_HEX
	CALL	FILL_HEAD
	POP	EBX
	MOV	ESI,EDI
	CALL	SETOCT2
	RET


SET_HEX_N:
	PUSH	EBX
	CALL	LEN_HEX
	CALL	FILL_HEAD
	POP	EBX
	MOV	ESI,EDI
	CALL	SETHEX2
	RET

;	BX:#
;	%[CX]d
;	DI:adrs

SET_DEC_N:
	PUSH	EBX
	CMP	BYTE [IS_UNSIGNED],0
	JNE	SET_DEC_N.10

	OR	EBX,EBX
	JNS	SET_DEC_N.10
	NEG	EBX
	CALL	LEN_DEC
	INC	EAX
	CALL	FILL_HEAD
	POP	EBX
	NEG	EBX
	MOV	ESI,EDI
	MOV	BYTE [ESI],'-'
	INC	ESI
	CALL	SETDEC2
	RET

SET_DEC_N.10:
	CALL	LEN_DEC
	CALL	FILL_HEAD
	POP	EBX
	MOV	ESI,EDI
	CALL	SETDEC2
	RET

IS_UNSIGNED:DD	0

;
;
;

FILL_HEAD:
	SUB	ECX,EAX
	JNB	FILL_HEAD.10
	MOV	ECX,0
FILL_HEAD.10:
	OR	ECX,ECX
	JE	FILL_HEAD.20
	MOV	AX,DS
	MOV	ES,AX
	MOV	AL,[FILL_CHR]
FILL_HEAD.15:
	CLD
	STOSB
	LOOP	FILL_HEAD.15

FILL_HEAD.20:
	RET

FILL_CHR:DB	00h


LEN_HEX:
	MOV	EAX,1
	CMP	EBX,10H
	JB	LEN_HEX.E
	INC	EAX
	CMP	EBX,100H
	JB	LEN_HEX.E
	INC	EAX
	CMP	EBX,1000H
	JB	LEN_HEX.E
	INC	EAX
	CMP	EBX,10000H
	JB	LEN_HEX.E
	INC	EAX
	CMP	EBX,100000H
	JB	LEN_HEX.E
	INC	EAX
	CMP	EBX,1000000H
	JB	LEN_HEX.E
	INC	EAX
	CMP	EBX,10000000H
	JB	LEN_HEX.E
	INC	EAX
LEN_HEX.E:
	RET
;
;
;

LEN_DEC:MOV	EAX,1
	CMP	EBX,10
	JB	LEN_DEC.E
	INC	EAX
	CMP	EBX,100
	JB	LEN_DEC.E
	INC	EAX
	CMP	EBX,1000
	JB	LEN_DEC.E
	INC	EAX
	CMP	EBX,10000
	JB	LEN_DEC.E
	INC	EAX
LEN_DEC.E:
	RET

WORKDC:	TIMES	80	DB	00h

WORK:	TIMES	80	DB	00h

;
_rename:
	PUSH	EBP
	MOV	EBP,ESP

	;

_RENAME.10:
	POP	EBP
	RET

RENAME_WORK:
	TIMES	80	DB	00h

;

_open:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDX,[EBP+P1]
	MOV	ECX,[EBP+P2]	;type

	TEST	ECX,40H		;O_CREAT
	JE	_OPEN.CE

		MOV	EBX,_OPEN.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_OPEN.CV_NAME

	MOV	AX,3C00H
	MOV	CX,0
	INT	21H
	JMP	_OPEN.50

_OPEN.CE:
		MOV	EBX,_OPEN.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_OPEN.CV_NAME
	MOV	AX,3D00H	;open
	MOV	CX,0
	INT	21H
_OPEN.50:
	PUSHFD
	MOVZX	EBX,AL
	POPFD
	JNB	_OPEN.R

	MOV	EBX,-1
_OPEN.R:
	POP	EBP
	RET

;
_OPEN.CV_NAME:
	TIMES	100H	DB	00h

;	EDX name
;	EBX name work
CONV_NAME:
	PUSH	EBX
	PUSH	EDX

CONV_NAME.10:
	MOV	AL,[EDX]
	CMP	AL,'/'
	JNE	CONV_NAME.19
	MOV	AL,'\'
CONV_NAME.19:
	MOV	[EBX],AL
	OR	AL,AL
	JE	CONV_NAME.50
	INC	EBX
	INC	EDX
	JMP	CONV_NAME.10

CONV_NAME.50:

	POP	EDX
	POP	EBX
	RET

;

_close:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]	;fd
	MOV	AX,3E00H
	INT	21H

	MOV	EBX,0

	POP	EBP
	RET

;

_creat:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDX,[EBP+P1]
	MOV	ECX,[EBP+P2]	;type

		MOV	EBX,_CREAT.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_CREAT.CV_NAME

	MOV	AX,3C00H	;create
	MOV	CX,0
	INT	21H
	PUSHFD
	MOVZX	EBX,AL
	POPFD
	JNB	_CREAT.R
	MOV	EBX,-1
_CREAT.R:
	POP	EBP
	RET

_CREAT.CV_NAME:
	TIMES	100H	DB	00h

;

_lseek:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]	;fd
	MOV	EDX,[EBP+P2]	;offset
	MOV	ECX,EDX
	SHR	ECX,10H
	MOV	AL,[EBP+P3]	;origin
	MOV	AH,42H		;seek
	INT	21H

	MOV	EBX,EDX
	SHL	EBX,10H
	MOV	BX,AX

	POP	EBP
	RET

;

_write:
	PUSH	EBP
	MOV	EBP,ESP

	XOR	EBX,EBX
	MOV	ECX,[EBP+P3]
	JCXZ	_WRITE.R

	PUSH	ECX
	MOV	BX,[EBP+P1]
	MOV	EDX,[EBP+P2]
	MOV	AX,4000H	;write
	INT	21H
	MOV	EBX,EAX
	POP	ECX
	CMP	ECX,EAX
	JE	_WRITE.R

	MOV	EBX,-1
_WRITE.R:
	POP	EBP
	RET

;

_read:
	PUSH	EBP
	MOV	EBP,ESP

	XOR	EBX,EBX
	MOV	ECX,[EBP+P3]
	JCXZ	_READ.R

	MOV	BX,[EBP+P1]
	CMP	BX,0
	JNE	_READ.10

	CMP	BYTE [CRMODE],0
	JNE	_READ#CRMODE
_READ.10:
	MOV	EDX,[EBP+P2]
	MOV	AX,3F00H	;read
	INT	21H
	MOV	EBX,EAX
	JMP	_READ.R

_READ#CRMODE:
	CALL	_getch
		CMP	BL,0DH
		JNE	_READ#CRMODE.10
		MOV	BL,0AH
_READ#CRMODE.10:
	MOV	EDX,[EBP+P2]
	MOV	[EDX],BL
	INC	EDX
	MOV	EBX,1

_READ.R:
	POP	EBP
	RET


;
;
;
PUTCHR:
;	MOV	AH,02H
;	MOV	DL,AL
;	INT	21H

	;MOV	[USRDTA],AL	;[USRDMA],AL
	;MOV	AX,4000H	;write
	;MOV	BX,1
	;MOV	ECX,1
	;MOV	EDX,USRDTA	;USRDMA
	;INT	21H
	CALL	__PUTCHR

	RET


;


PUTCHR2:
	MOV	EBX,[_stdout]
	PUSH	EBX
	MOVZX	EBX,AL
	PUSH	EBX
	CALL	_fputc
	ADD	ESP,8

	RET

	CMP	AL,0AH
	JNE	PUTCHR
	MOV	AL,0DH
	CALL	PUTCHR
	MOV	AL,0AH
	CALL	PUTCHR
	RET

;
_getch:
	PUSH	EBP
	;MOV	AH,8	;cannot read ^P,^Q
	MOV	AH,7
	INT	21H
	MOVZX	EBX,AL
	POP	EBP
	RET

CRMOD:
CRMODE:	DD	0
;
_getchar:
	PUSH	EBP

	CMP	BYTE [CRMODE],0
	JNE	_GETCHAR.CON
_GETCHAR.10:
	;		JMP	_GETCHAR.CON

		;PUSH	DWORD [_stdin]
		MOV	EAX,[_stdin]
		PUSH	EAX
		CALL	_getc
		ADD	ESP,4
		JMP	_GETCHAR.E

_GETCHAR.CON:
	MOV	AH,8
	INT	21H
		CMP	AL,0DH
		JNE	_GETCHAR.CON.10
		MOV	AL,0AH
_GETCHAR.CON.10:

	MOVZX	EBX,AL
	JMP	_GETCHAR.E

	MOV	AX,3F00H	;read
	MOV	BX,0		;stdin
	MOV	ECX,1
	MOV	EDX,USRDTA	;USRDMA
	INT	21H
	XOR	EBX,EBX
	MOV	BL,[USRDTA]	;[USRDMA]
	CMP	EAX,1
	JE	_GETCHAR.E
	MOV	EBX,0FFFFFFFFH
_GETCHAR.E:
;	CMP	BL,0DH
;	JE	_GETCHAR.10
	POP	EBP
	RET

_putchar:
	PUSH	EBP
	MOV	EBP,ESP

		;PUSH	[_STDOUT]
		mov	eax,[_stdout]
		PUSH	EAX
		PUSH	DWORD [EBP+P1]
		CALL	_putc
		ADD	ESP,4*2
		JMP	_PUTCHAR.R

	MOV	AL,[EBP+P1]

;	CALL	_PRINTF.OUT	;PUTCHR2

	CALL	PUTCHR2
	JMP	_PUTCHAR.R

	MOV	[USRDTA],AL	;[USRDMA],AL	;BL
	MOV	AX,4000H	;write
	MOV	BX,1		;stdout
	MOV	ECX,1
	MOV	EDX,USRDTA	;USRDMA
	INT	21H

_PUTCHAR.R:
	POP	EBP
	RET

;
;
;
_standout:
	MOV	AH,1DH
	MOV	AL,1BH
	INT	91H
	MOV	AH,1DH
	MOV	AL,'['
	INT	91H
	MOV	AH,1DH
	MOV	AL,'1'
	INT	91H
	MOV	AH,1DH
	MOV	AL,'m'
	INT	91H

	RET

;
;
_standend:
	MOV	AH,1DH
	MOV	AL,1BH
	INT	91H
	MOV	AH,1DH
	MOV	AL,'['
	INT	91H
	MOV	AH,1DH
	MOV	AL,'0'
	INT	91H
	MOV	AH,1DH
	MOV	AL,'m'
	INT	91H
	RET


_access:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,[EBP+P1]
	MOV	AX,3D00H
	INT	21H
	MOV	EBX,-1
	JB	_ACCESS.R

	MOV	BX,AX
	MOV	AX,3E00H
	INT	21H
	MOV	EBX,0
_ACCESS.R:
	POP	EBP
	RET

_getlogin:

_getpwuid:

_geteuid:

_getuid:

_getegid:

_getppid:

_getpid:
	MOV	EBX,1
	RET

_getgid:
	RET
_setgid:
	RET
;
_getgrgid:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]
	MOV	EBX,0

	POP	EBP
	RET

_wait:
	RET

;
_execvp:
_execv:
	JMP	_execl

_execl:
_fork:
_system:
	MOV	AH,4CH
	INT	21H

_sleep:
_usleep:
	RET

_kill:
	RET

_chmod:
	XOR	EBX,EBX		;success
	RET

_remove:
	RET

_chown:
	XOR	EBX,EBX		;success
	RET

_chdir:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDX,[EBP+P1]
		MOV	EBX,_TEMP.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_TEMP.CV_NAME

	MOV	ECX,0
	MOV	AX,3B00H	;Change Current Directory
	INT	21H
	MOV	EBX,-1
	JB	_CHDIR.R

	XOR	EBX,EBX		;success
_CHDIR.R:
	POP	EBP
	RET

_mkdir:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDX,[EBP+P1]
		MOV	EBX,_TEMP.CV_NAME
		CALL	CONV_NAME
		MOV	EDX,_TEMP.CV_NAME

	;MOV	ECX,[EBP+P2]
	MOV	ECX,0
	MOV	AX,3900H	;Create Sub-Directory
	INT	21H
	MOV	EBX,-1
	JB	_MKDIR.R

	XOR	EBX,EBX		;success
_MKDIR.R:
	POP	EBP
	RET

;
;
_getwd:
	PUSH	EBP
	MOV	EBP,ESP

	PUSH	DWORD 200
	PUSH	DWORD [EBP+P1]
	CALL	_getcwd
	ADD	ESP,4*2

	POP	EBP
	RET

_getcwd:
	PUSH	EBP
	MOV	EBP,ESP

	CMP	DWORD [EBP+P2],2
	JB	_GETCWD.ERR

	MOV	EBX,_GETWD.DIR
	PUSH	EBX
	PUSH	DWORD [EBP+P1]
	CALL	_strcpy
	ADD	ESP,4*2

	MOV	EBX,[EBP+P1]
;	MOV	EBX,_GETWD.DIR
	JMP	_GETCWD.R

_GETCWD.ERR:
	MOV	EBX,-1
_GETCWD.R:
	POP	EBP
	RET
_GETWD.DIR:
	DB	'\',0

;
_readlink:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,-1	;error

	POP	EBP
	RET


_popen:
	XOR	EBX,EBX
	RET

_pclose:
	RET

_umask:
	RET

_pipe:
	MOV	EBX,-1	;failed
	RET

;_DUP:
;	MOV	EBX,-1	;failed
;	RET

;
_alarm:
	MOV	EBX,0
	RET


_TEMP.CV_NAME:
	TIMES	100H	DB	00H

%INCLUDE "FLOAT30N.CLB"

	;ALIGN	1000h
