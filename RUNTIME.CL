
%INCLUDE "CONFIG.ASM"

	BITS	32

	section ".text"

	global	RUNBASE

%if OS_WIN
	EXTERN	_GetStdHandle@4
	EXTERN	_GetCommandLineA@0
	EXTERN	_WriteFile@20
	EXTERN	_CreateFileA@28
	EXTERN	_CloseHandle@4
	
	EXTERN	_GlobalAlloc@8
	EXTERN	_GlobalFree@4
	
	EXTERN	_ExitProcess@4
%endif
	
	;GLOBAL _TEXT
	GLOBAL	_MAIN0

	EXTERN	_main

	GLOBAL	START
	GLOBAL	__PUTCHR
	GLOBAL	__WRITE

	;GLOBAL	.text
	;EXTERN	.rdata
	;EXTERN	.data
	;EXTERN	.data_end
	;EXTERN	.ENTRY_IAT
	;EXTERN	.ENTRY_IMPORT

	EXTERN	IAT_GetStdHandle
	EXTERN	IAT_WriteFile
	EXTERN	IAT_ReadFile
	EXTERN	IAT_CreateFileA
	EXTERN	IAT_CloseHandle
	EXTERN	IAT_ExitProcess
	EXTERN	IAT_GetCommandLineA
	EXTERN	IAT_SetFilePointer
	EXTERN	IAT_SetEndOfFile
	EXTERN	IAT_GlobalAlloc
	EXTERN	IAT_GlobalFree

	EXTERN	_RDATA
	EXTERN	_RDATA_FILL
	EXTERN	_RDATA_END

	EXTERN	_DATA
	EXTERN	_DATA_FILL
	EXTERN	_DATA_END

	EXTERN	ENTRY_IAT
	EXTERN	ENTRY_IMPORT

	EXTERN	STR_HELLO
	EXTERN	FILENAME_TEST1

	EXTERN	N_WROTE
	EXTERN	HDL_STDIN
	EXTERN	HDL_STDOUT
	EXTERN	HDL_STDERR

	EXTERN	HDL_OUTFILE

	EXTERN	N_READ
	EXTERN	PUTCHR_BUF
	EXTERN	CMDLINE
	EXTERN	READ_BUF

	GLOBAL	__ALLOC

;	GLOBAL	_TEXT_RVA
;	GLOBAL	_RDATA_RVA
;	GLOBAL	_DATA_RVA

	GLOBAL	BASE


;FIXED? : make handle -> dword
;OP.TBL pnt WORD -> DWORD
;TODO:
;ERR_CONT:
;	CALL	ERRSUB
;	MOV	ESP,[STACK]	<- ok?
;

;remove ".reloc" section

	;;ORG	00400000h

;BASE:
BASE	EQU	00400000h

;http://msdn.microsoft.com/en-us/library/ms809762.aspx
;HelloWorld_Con.exe

PE_OFFSET EQU	000000C0H

;must be aligned
;DATA_ADD EQU 8000h+8000h+8000h+20000h	;read buffer level 0 + write buffer + read buffer level 1~ + rest
DATA_ADD EQU 1000h		;8000h+8000h+8000h+20000h	;read buffer level 0 + write buffer + read buffer level 1~ + rest

;TODO: get ride of ".reloc" section?
;TODO: make same alignment
;FILE_ALIGN EQU	200h
FILE_ALIGN EQU	1000h	;##
SECTION_ALIGN EQU	1000h
;SECTION_ALIGN EQU	200h	;##

;_TEXT_RVA EQU	1000h
;_RDATA_RVA EQU	2000h
;_DATA_RVA EQU	3000h
;_RELOC_RVA EQU	4000h

;_TEXT_RVA EQU	_TEXT-BASE
;_RDATA_RVA EQU	_RDATA-BASE
;_DATA_RVA EQU	_DATA-BASE
;_RELOC_RVA EQU	_RELOC-BASE+DATA_ADD


;_RDATA_SIZE EQU	_RDATA_END-_RDATA	;**
;_DATA_SIZE EQU	_DATA_END-_DATA+DATA_ADD	;**

;_RELOC_SIZE EQU _RELOC_END-_RELOC
_RELOC_SIZE EQU 0

;CODE_SIZE EQU	_TEXT_END-_TEXT
;INIT_DATA_SIZE EQU	_RDATA_SIZE+_DATA_SIZE+_RELOC_SIZE
UNINIT_DATA_SIZE EQU	0

;BASE_SIZE EQU	_RELOC_RVA+SECTION_ALIGN	;_RELOC_SIZE
;BASE_SIZE EQU	_DATA_RVA+_DATA_SIZE	;SECTION_ALIGN	;_RELOC_SIZE

;ENTRY_RVA EQU	_TEXT_RVA


;HEADER:

	;ds	HEADER+0400h-$
	ALIGN	FILE_ALIGN

;.text:

_MAIN0:
_TEXT:

RUNBASE:

;+400	".text"

%if OS_WIN
	PUSH	DWORD -10
	;CALL	[IAT_GetStdHandle]
	CALL	_GetStdHandle@4
	MOV	[HDL_STDIN],EAX

	PUSH	DWORD -11
	;CALL	[IAT_GetStdHandle]
	CALL	_GetStdHandle@4
	MOV	[HDL_STDOUT],EAX

	PUSH	DWORD -12
	;CALL	[IAT_GetStdHandle]
	CALL	_GetStdHandle@4
	MOV	[HDL_STDERR],EAX

	;CALL	[IAT_GetCommandLineA]
	CALL	_GetCommandLineA@0
	MOV	[CMDLINE],EAX
%else
	;MOV	EAX,_BSS_START
	;MOV	[BSS_PNT],EAX

	MOV	EAX,0
	MOV	[HDL_STDIN],EAX
	MOV	EAX,1
	MOV	[HDL_STDOUT],EAX
	MOV	EAX,2
	MOV	[HDL_STDERR],EAX

	;MOV	EAX,[ESP+4]
	;MOV	[CMDLINE],EAX
	;MOV	EAX,[ESP+0]
	;MOV	[ARGC],EAX
	;MOV	EAX,ESP
	;ADD	EAX,4
	;MOV	[ARGV],EAX

	MOV	EAX,HELLO_STR
%endif

	MOV	ESI,EAX
	CALL	_PUTSTR

		JMP	SYS_exit


	JMP	TEST_HELLO

	;JMP	TEST2
	;JMP	TEST3
	;JMP	TEST4
	;JMP	TEST5
	;JMP	TEST6
	;JMP	TEST7

	;;JMP	A386_MAIN
	JMP	RUNTIME_MAIN

	PUSH	DWORD -12;-11;	PUSH	0FFFFFFF5h
	;CALL	[IAT_GetStdHandle-_RDATA+_RDATA_RVA+BASE]	;CALL	[00402000h]
	CALL	[IAT_GetStdHandle]

	push	eax

	push	0
	push	N_WROTE	;0
	push	0eh
	;push	STR_HELLO-_DATA+_DATA_RVA+BASE	;00403000h
	push	STR_HELLO
	push	EAX
	;CALL	[IAT_WriteFile-_RDATA+_RDATA_RVA+BASE]	;;call	[00402004h]
	CALL	[IAT_WriteFile]

	pop	eax

	push	0
	mov	ebx,esp;	lea	eax,[esp+0]
	push	0
	push	ebx
	push	0eh
	push	STR_HELLO
	push	eax
	call	[IAT_WriteFile]

	pop	eax

;	XOR	EAX,EAX
	RET


TEST2:
	PUSH	DWORD -10
	CALL	[IAT_GetStdHandle]
	MOV	[HDL_STDIN],EAX

	PUSH	DWORD -11
	CALL	[IAT_GetStdHandle]
	MOV	[HDL_STDOUT],EAX


	PUSH	DWORD	0
	PUSH	DWORD	N_READ
	PUSH	DWORD	100
	PUSH	DWORD	READ_BUF
	PUSH	DWORD	[HDL_STDIN]
	call	[IAT_ReadFile]

	PUSH	DWORD	0
	PUSH	DWORD	N_WROTE
	PUSH	DWORD	[N_READ]
	PUSH	DWORD	READ_BUF
	PUSH	DWORD	[HDL_STDOUT]
	call	[IAT_WriteFile]

	MOV	EAX,[N_READ]

	RET


CREATE_NEW          EQU 1
CREATE_ALWAYS       EQU 2
OPEN_EXISTING       EQU 3
OPEN_ALWAYS         EQU 4
TRUNCATE_EXISTING   EQU 5

GENERIC_READ	EQU	80000000h
GENERIC_WRITE	EQU	40000000h
FILE_ATTRIBUTE_NORMAL EQU	00000080h

TEST3:
	PUSH	0		;templateFile
	PUSH	FILE_ATTRIBUTE_NORMAL
	PUSH	CREATE_ALWAYS	;CREATE_NEW
	PUSH	0		;securityAttribute
	PUSH	0		;shareMode
	PUSH	GENERIC_WRITE
	PUSH	FILENAME_TEST1
	CALL	[IAT_CreateFileA]
	MOV	[HDL_OUTFILE],EAX

	push	DWORD	0
	push	DWORD	N_WROTE	;0
	push	DWORD	0eh
	push	DWORD	STR_HELLO
	push	EAX
	CALL	[IAT_WriteFile]


	PUSH	DWORD	[HDL_OUTFILE]
	CALL	[IAT_CloseHandle]

	RET


TEST4:
	CALL	[IAT_GetCommandLineA]
	MOV	[CMDLINE],EAX

	MOV	ESI,EAX
	CALL	_PUTSTR

	RET

TEST5:
	MOV	EBX,[IAT_ExitProcess]

	;CLI
	XOR	EAX,EAX
	MOV	AX,CS
	MOV	DS,AX
	MOV	ES,AX
	;MOV	SS,AX
	;MOV	ESP,_TEXT_FILL-4
	;STI

	PUSH	100
	PUSH	EBX
	RET

	MOV	EAX,100
	PUSH	EAX
	CALL	[IAT_ExitProcess]

	RET

TEST6:
	CALL	[IAT_GetCommandLineA]
	MOV	[CMDLINE],EAX

	MOV	ESI,EAX
	CALL	_PUTSTR

	MOV	EAX,[_DATA_FILL]


	MOV	EAX,[_TEXT]

	MOV	[_TEXT],EAX	;exception

	MOV	ESI,[CMDLINE]
	CALL	_PUTSTR

	RET

TEST_HELLO:
	MOV	ESI,STR_HELLO
	CALL	_PUTSTR
	RET

TEST7:
;	MOV	EDI,USRDMA
;	MOV	ECX,10000h
;TEST7.10:
;	MOV	[EDI],AL
;	INC	EDI
;	DEC	ECX
;	JNE	TEST7.10

	CALL	TEST_HELLO
	MOV	AL,'7'
	CALL	__PUTCHR
	CALL	_PUTCRLF
	RET

_PUTCRLF:
	MOV	AL,0Dh
	CALL	__PUTCHR
	MOV	AL,0AH
	CALL	__PUTCHR
	RET

;
_PUTSTR:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	_PUTSTR.R

	CALL	__PUTCHR

	INC	ESI
	JMP	_PUTSTR

_PUTSTR.R:
	RET

%if OS_WIN
__PUTCHR:
	PUSHAD

	MOV	[PUTCHR_BUF],AL

	PUSH	0
	MOV	EAX,ESP

	push	DWORD	0
	push	EAX	;push	N_WROTE	;0
	push	DWORD	01h
	push	DWORD	PUTCHR_BUF
	push	DWORD	[HDL_STDOUT]
	;CALL	[IAT_WriteFile]
	CALL	_WriteFile@20

	POP	EAX

	POPAD
	RET

%else
__PUTCHR:
	PUSHAD

	MOV	[PUTCHR_BUF],AL

	MOV	EDX,1		;len
	MOV	ECX,PUTCHR_BUF	;address
	MOV	EBX,1		;stdout
	MOV	EAX,4		;sys_write
	INT	80H

	POPAD
	RET


%endif


GMEM_FIXED	EQU	00000000H
GMEM_ZEROINIT	EQU	00000040H

;	EAX<size
;	>EAX memory address

%if OS_WIN
__ALLOC:
	MOV	EBX,GMEM_FIXED+GMEM_ZEROINIT
	PUSH	EAX
	PUSH	EBX
	;CALL	[IAT_GlobalAlloc]
	CALL	_GlobalAlloc@8

	OR	EAX,EAX
	;;JE	ERR_ALLOC

	PUSHAD
	MOV	EBX,EAX
	;;CALL	PUTH4
	POPAD

	RET
%else

__ALLOC:
	JMP	0
	RET
%endif

;	EAX<memory address

%if OS_WIN
FREE:
	PUSH	EAX
	;CALL	[IAT_GlobalFree]
	CALL	_GlobalFree@4

	RET
%else

FREE:
	JMP	0
	RET

%endif

;	EBX:FILE*
;	ECX:size
;	EDX:buf
;	>CF =1:error/0:ok

__WRITE:
	;MOVZX	EBX,WORD [EBX+2]
	MOVZX	EBX,BX

	CMP	EBX,0
	MOV	EAX,[HDL_STDIN]
	JE	__WRITE.10

	CMP	EBX,1
	MOV	EAX,[HDL_STDOUT]
	JE	__WRITE.10

	CMP	EBX,2
	MOV	EAX,[HDL_STDERR]
	JE	__WRITE.10

	
__WRITE.10:
	MOV	EBX,EAX

	PUSH	0
	MOV	EAX,ESP

	push	0
	push	EAX	;push	N_WROTE	;0
	push	ECX
	push	EDX
	push	EBX
	CALL	[IAT_WriteFile]

	POP	EAX
	RET


;################



;	EXTERN	_PUTHEX_L
;	EXTERN	BOTTOM

;	GLOBAL	P1
;	GLOBAL	P2
;	GLOBAL	P3
;	GLOBAL	P4
;	GLOBAL	P5
;	GLOBAL	P6

	;GLOBAL	VRAM_SEG

;	GLOBAL	_DS86
;	GLOBAL	_ES86
;	GLOBAL	_EAX86
;	GLOBAL	_EBX86
;	GLOBAL	_ECX86
;	GLOBAL	_EDX86
;	GLOBAL	_ESI86
;	GLOBAL	_EDI86

;	GLOBAL	PROG86
;	;GLOBAL	CALL86
;	;GLOBAL	COPYTO86

;	GLOBAL	PROG_INT

	GLOBAL	SIZEOF_FILE
	GLOBAL	FILE_WORK
	;GLOBAL	MALLOC_MAX
	GLOBAL	MALLOC_P
	GLOBAL	MEM_MAX

	global	_stdin
	global	_stdout
	global	_stderr

	GLOBAL	USRDTA

	GLOBAL	TOUPPER
	GLOBAL	END_FILE

;	GLOBAL	_IMOD.L
	GLOBAL	SHR.L
	GLOBAL	SAR.L
	GLOBAL	SHL.L
	GLOBAL	PUSHSTRUCT
	GLOBAL	POPSTRUCT
	GLOBAL	RETSTRUCT

	GLOBAL	TOLOWER
	GLOBAL	TOUPPER

	GLOBAL	_errno

	GLOBAL	_IDIV
	GLOBAL	_IDIV.L
	GLOBAL	_UDIV
	GLOBAL	_UDIV.L

	GLOBAL	_IMOD.L
	GLOBAL	_UMOD.L

	GLOBAL	IDIV_
	GLOBAL	IDIV.L_
	GLOBAL	UDIV_
	GLOBAL	UDIV.L_
	GLOBAL	IMOD.L_
	GLOBAL	UMOD.L_

	GLOBAL	MYDTA

P1	EQU	4*2
P2	EQU	6*2
P3	EQU	8*2
P4	EQU	10*2
P5	EQU	12*2
P6	EQU	14*2

VRAM_SEG EQU	104H

CS#	EQU	2EH
DS#	EQU	3EH
ES#	EQU	26H
SS#	EQU	36H

SIZEOF_FILE EQU	20H
FILES	EQU	20

;USRDMA	EQU	20000H

RUNTIME_MAIN:
;	PUSH	DWORD -10
;	CALL	[IAT_GetStdHandle]
;	MOV	[HDL_STDIN],EAX

;	PUSH	DWORD -11
;	CALL	[IAT_GetStdHandle]
;	MOV	[HDL_STDOUT],EAX

	;mov	eax,ds
	;db	0fh,03h,0c0h	;lsl eax,eax
	;mov	[MEM_MAX],eax

	;sub	eax,100h
	;and	eax,0fffffff0h

	;CLI
	;MOV	ESP,eax	;40000H
	;mov	eax,ds
	;mov	ss,eax
	;STI

	;MOV	EAX,ESP
	;SUB	EAX,8000H
	;MOV	[MALLOC_MAX],EAX

	;call	SETINT	;setint

	;	CALL	EXPAND_SEG
	;	DB	0FH,20H,0D8H	;MOV EAX,CR3
	;	DB	0FH,22H,0D8H	;MOV CR3,EAX

	;JMP	TEST_HELLO

	JMP	START


;
;
;
EXPAND_SEG:
	CLI
	PUSH	DS
	MOV	EAX,30H
	MOV	DS,EAX

	MOV	AX,0FFFFH
	MOV	[10H],AX

	MOV	AL,[10H+6]
	AND	AL,0F0H
	OR	AL,8CH
	MOV	[10H+6],AL

	POP	DS
	STI
	RET



;	dummy

_ASSERT:
	RET

;

;int ds,es;
;int eax,ebx,ecx,edx,esi,edi;


_DS86:	DD	0
_ES86:	DD	0

_EAX86:	DD	0
_EBX86:	DD	0
_ECX86:	DD	0
_EDX86:	DD	0
_ESI86:	DD	0
_EDI86:	DD	0


_work:	dw	14h	;ds
	dw	14h	;es
	dw	14h	;fs
	dw	14h	;gs
	dw	0C010H	;?

	dd	0	;eax
	dd	0	;ebx
	dd	0	;ecx
	dd	0	;edx

	dd	0	;?
	dd	0	;?

r1:
	RET


;cdprog:
CDPROG:
	DD	0

;
;
;

SETINT:
	RET

STR_CRLF:
	DB	0DH,0AH,'$'

REGNAMES:
	DB	'EAX      EBX      ECX      EDX      ESI      EDI'
	DB	'$'

DUMP_FILE:
	DB	'B:\DUMP.BIN',0


EMES_DIV:
	DB	'divided by 0$'


EMES_PROT:
	DB	'general protection$'

EMES_PAGE:
	DB	'page fault$'

MALLOC_MAX:DD	0
MEM_MAX:DD	0

	CALL	_main

	MOV	AH,4CH
	INT	21H

ARGC:	DD	0
ARGV:	TIMES	80	DB	00h

ARGV_WORK:	TIMES	100H	DB	00h

NULL_STR:DB	0

PROG_NAME:
	DB	'prog',0
	TIMES	80H	DB	00h

START:
	JMP	LINE.E2

	CALL	GETCLINE

	;	JMP	TEST_HELLO

	MOV	EBX,ARGV
	MOV	EAX,0	;NULL_STR
	MOV	ECX,10H
CLEAR.ARGV:
	MOV	[EBX],EAX
	ADD	EBX,4
	LOOP	CLEAR.ARGV

	CALL	GET_PROGNAME

	MOV	EAX,PROG_NAME
	MOV	[ARGV],EAX	;argv[0]=prog_name

	MOV	ESI,CLINE+1	;0081H
	MOV	EDI,ARGV+4	;2
	MOV	EBX,ARGV_WORK
	MOV	ECX,1
	CLD

LINE.10:
	MOV	[EDI],EBX
	ADD	EDI,4	;2
LINE:	LODSB
	OR	AL,AL
	JE	LINE.E
	CMP	AL,09H
	JE	LINE
	CMP	AL,20H
	JE	LINE

	INC	ECX
LINE.20:
	MOV	[EBX],AL
	INC	EBX
	LODSB
	OR	AL,AL
	JE	LINE.27
	CMP	AL,09H
	JE	LINE.25
	CMP	AL,20H
	JE	LINE.25
	JMP	LINE.20

LINE.25:
	MOV	BYTE [EBX],0
	INC	EBX
	JMP	LINE.10

LINE.27:
	MOV	BYTE [EBX],0

LINE.E:
;	MOV	DWORD [EDI],0
LINE.E2:
	pushad
	call	INIT_FILE

	;CALL	OPEN_DEBUG

	JMP	NOTV

		PUSH	7FF00H/8-11000H/8
		PUSH	80000000H-200000H+11000H
		;;CALL	__ADD_FREE
		ADD	ESP,4*2

	;	PUSH	1FF00H/8
	;	PUSH	81000000H-200000H
	;	CALL	__ADD_FREE
	;	ADD	ESP,4*2

	;	MOV	EBX,16
	;	PUSH	EBX
	;	CALL	_MALLOC
	;	POP	EBX

	;	MOV	EBX,80000000H-200000H
	;	MOV	DWORD [EBX],0
	;	MOV	DWORD [EBX+4],7FF00H/8;3F000H/8
	;	ADD	EBX,8
	;	PUSH	EBX
	;	CALL	_FREE
	;	POP	EBX

	;	MOV	EBX,81000000H-200000H
	;	MOV	DWORD [EBX],0
	;	MOV	DWORD [EBX+4],1FF00H/8
	;	ADD	EBX,8
	;	PUSH	EBX
	;	CALL	_FREE
	;	POP	EBX
NOTV:
	popad

;	PUSH	DWORD ARGV
	mov	eax,ARGV	;argv
	push	eax
	PUSH	ECX
	CALL	_main
	ADD	ESP,8	;4

		PUSH	EBX
		CALL	INT21_exit	;CALL	_EXIT
		ADD	ESP,4

;	PUSH	EBX
;	CALL	END_FILE
;	POP	EBX
	MOV	AL,BL
	MOV	AH,4CH
	INT	21H

CLINE:	TIMES	100H	DB	00h

;
GET_PROGNAME:
	PUSH	DS
	PUSH	ES

	MOV	EAX,DS
	MOV	ES,EAX
	MOV	EAX,2CH		;env
	MOV	DS,EAX

	MOV	ESI,0
	CLD
GET_PROGNAME.10:
	LODSB
	OR	AL,AL
	JNE	GET_PROGNAME.10
	LODSB
	OR	AL,AL
	JNE	GET_PROGNAME.10

	LODSW		;01 00

	MOV	EDI,PROG_NAME
GET_PROGNAME.20:
	LODSB
	STOSB
	OR	AL,AL
	JNE	GET_PROGNAME.20

	POP	ES
	POP	DS
	RET

;
;
;

GETCLINE:
	JMP	GETCLINE_win

	PUSH	DS
	MOV	AX,DS
	MOV	ES,AX

	MOV	AX,4
	MOV	DS,AX

	MOV	ESI,0080H
	MOV	EDI,CLINE
	MOV	ECX,80H
	CLD
	REP
	MOVSB
	POP	DS

	MOV	ESI,CLINE
	MOV	EDI,ESI
	CLD
	LODSB
	XOR	ECX,ECX
	MOV	CL,AL
	INC	EDI
	ADD	EDI,ECX

	XOR	EAX,EAX
	STOSB
	RET

GETCLINE_win:
	PUSH	DS
	MOV	AX,DS
	MOV	ES,AX

	;MOV	AX,4
	;MOV	DS,AX

	MOV	ESI,[CMDLINE]
GETCLINE_win.10:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	GETCLINE_win.20
	CMP	AL,' '
	JBE	GETCLINE_win.20
	INC	ESI
	JMP	GETCLINE_win.10

GETCLINE_win.20:

;	;MOV	ESI,0080H
;	MOV	EDI,CLINE
;	MOV	ECX,80H
;	CLD
;	REP
;	MOVSB

	MOV	EDI,CLINE
GETCLINE_win.30:
	MOV	AL,[ESI]
	CMP	AL,20h
	JB	GETCLINE_win.40
	MOV	[EDI],AL
	INC	ESI
	INC	EDI
	OR	AL,AL
	JMP	GETCLINE_win.30

GETCLINE_win.40:
	MOV	AL,0
	MOV	[EDI],AL

	INC	EDI
	MOV	[EDI],AL
	INC	EDI
	MOV	[EDI],AL

	POP	DS

	RET

;

INIT_FILE:
	MOV	ECX,SIZEOF_FILE

	MOV	EBX,FILE_WORK
	mov	[_stdin],ebx
	MOV	BYTE [EBX],1
	MOV	BYTE [EBX+1],01H+80H
	MOV	WORD [EBX+2],0
	MOV	DWORD [EBX+8],0
	MOV	DWORD [EBX+0CH],0
	MOV	DWORD [EBX+10H],0

	ADD	EBX,ECX

	mov	[_stdout],ebx
	MOV	BYTE [EBX],1
	MOV	BYTE [EBX+1],02H+80H
	MOV	WORD [EBX+2],1
	MOV	DWORD [EBX+8],0
	MOV	DWORD [EBX+0CH],0
	MOV	DWORD [EBX+10H],0

	ADD	EBX,ECX

	mov	[_stderr],ebx
	MOV	BYTE [EBX],1
	MOV	BYTE [EBX+1],02H+80H
	MOV	WORD [EBX+2],2
	MOV	DWORD [EBX+8],0
	MOV	DWORD [EBX+0CH],0
	MOV	DWORD [EBX+10H],0

	;MOV	[MALLOC_P],EBX

	;	PUSHAD
	;	MOV	BX,4		;PRN
	;	MOV	AX,3E00H
	;	INT	21H
	;	POPAD
	RET

;
END_FILE:
	MOV	EDI,FILE_WORK
	MOV	ECX,FILES	;8
END_FILE.10:
	PUSH	ECX
	PUSH	EDI

	CMP	BYTE [EDI+0],0
	JE	END_FILE.20

	PUSH	EDI
	;;CALL	_FCLOSE
	ADD	ESP,4
END_FILE.20:

	POP	EDI
	POP	ECX
	ADD	EDI,SIZEOF_FILE
	LOOP	END_FILE.10
	RET

;
OPEN_DEBUG:
	RET

	PUSH	DEBUG_OPENMODE
	PUSH	DEBUG_FILENAME
	;;CALL	_FOPEN
	ADD	ESP,4*2
	OR	EBX,EBX
	JE	OPEN_DEBUG.R

	MOV	[DEBUG_FD],EBX
OPEN_DEBUG.R:
	RET

DEBUG_OPENMODE:
	DB	'w',0
DEBUG_FILENAME:
	DB	'D:\$DEBUG',0


DEBUG_FD:DD	0

	DB	'@@malloc_p@@'
;

;MALLOC_P:DD	BOTTOM

;
;	EBX<<EAX
;
SHL.L:
	;		MOV	CL,AL
	;		SHL	EBX,CL
	;		RET

		or	eax,eax
		je	shl.l.r
	CMP	EAX,20H
	JNB	SHL.L.OV
	MOV	CL,AL
	SHL	EBX,CL
	RET

SHL.L.OV:
	XOR	EBX,EBX
shl.l.r:
	RET

;
SAR.L:
	;		MOV	CL,AL
	;		SAR	EBX,CL
	;		RET

		or	eax,eax
		je	sar.l.r
	CMP	EAX,20H
	JNB	SAR.L.OV
	MOV	CL,AL
	SAR	EBX,CL
	RET

SAR.L.OV:
	OR	EBX,EBX
	JS	SAR.L.OV.F
	XOR	EBX,EBX
sar.l.r:
	RET

SAR.L.OV.F:
	XOR	EBX,EBX
	DEC	EBX
	RET

;
SHR.L:
	;		MOV	CL,AL
	;		SHR	EBX,CL
	;		RET

		or	eax,eax
		je	shr.l.r
	CMP	EAX,20H
	JNB	SHR.L.OV
	MOV	CL,AL
	SHR	EBX,CL
	RET

SHR.L.OV:
	XOR	EBX,EBX
shr.l.r:
	RET


;
;	BX / AX

_IDIV:
IDIV_:
	XCHG	BX,AX
	DB	66H
	DB	99H	;CWD
	IDIV	BX
	MOV	BX,AX
	RET

_IDIV.L:
IDIV.L_:
	XCHG	EBX,EAX

IDIV.L_.10:

	DB	99H	;CDQ
	IDIV	EBX

	OR	EDX,EDX
	JNS	IDIV.L_.R

	OR	EBX,EBX
	JE	IDIV.L_.2
	MOV	EDX,1
	JS	IDIV.L_.3
	NEG	EDX
IDIV.L_.3:
	ADD	EAX,EDX
IDIV.L_.2:

IDIV.L_.R:
	MOV	EBX,EAX
	RET

IDIV.L_.20:
	OR	EDX,EDX
	JE	IDIV.L_.R
	INC	EAX
	JMP	IDIV.L_.R

_UDIV:
UDIV_:
	XCHG	BX,AX
	XOR	DX,DX
	DIV	BX
	MOV	BX,AX
	RET

;	EBX/=EAX

_UDIV.L:
UDIV.L_:
	DEC	EAX
	JE	SHORT _UDIV.L#1
	INC	EAX

	XCHG	EBX,EAX
	XOR	EDX,EDX
	DIV	EBX
	MOV	EBX,EAX
	RET

_UDIV.L#1:
	RET

;

_IMOD.L:
IMOD.L_:
	XCHG	EBX,EAX

;	OR	EBX,EBX
;	JNS	IMOD.L_.1
;	NEG	EAX
;	NEG	EBX
IMOD.L_.1:
	DB	99H	;CDQ

	IDIV	EBX
	MOV	EAX,EDX
	OR	EAX,EAX

	JNS	_IMOD.L.10

	OR	EBX,EBX
	JNS	_IMOD.L.2
	NEG	EBX
_IMOD.L.2:
	ADD	EAX,EBX
_IMOD.L.10:
	MOV	EBX,EAX
	RET


_UMOD:
UMOD_:
	PUSH	AX
	XCHG	BX,AX
	XOR	DX,DX
	DIV	BX
	MOV	AX,DX
	POP	BX
	MOV	BX,AX
	RET

_UMOD.L:
UMOD.L_:
	PUSH	EAX
	XCHG	EBX,EAX
	XOR	EDX,EDX
	DIV	EBX
	MOV	EAX,EDX
	POP	EBX
	MOV	EBX,EAX
	RET

PUSHSTRUCT:
	POP	EDX

	MOV	ESI,EBX

	SUB	ESP,ECX
	MOV	EDI,ESP

	MOV	EAX,DS
	MOV	ES,EAX
	JECXZ	PUSHSTRUCT.10

	CLD
	REP
	MOVSB

PUSHSTRUCT.10:
	JMP	EDX

;
POPSTRUCT:
	POP	EDX
	;MOV	ESI,ESP

	MOV	EBX,EDI

	MOV	EAX,DS
	MOV	ES,EAX
	JECXZ	POPSTRUCT.10

	CLD
	REP
	MOVSB

	MOV	ESP,ESI
POPSTRUCT.10:
	JMP	EDX

;
RETSTRUCT:
	MOV	ESI,EBX

	MOV	EAX,DS
	MOV	ES,EAX
	JECXZ	RETSTRUCT.10

	CLD
	REP
	MOVSB
RETSTRUCT.10:
	RET

;
;
;
TOLOWER:
	CMP	AL,'A'
	JB	TOLOWER.R
	CMP	AL,'Z'
	JA	TOLOWER.R
	ADD	AL,20H
TOLOWER.R:
	RET

;
;
;
TOUPPER:
	CMP	AL,'a'
	JB	TOUPPER.R
	CMP	AL,'z'
	JA	TOUPPER.R
	SUB	AL,20H
TOUPPER.R:
	RET



;4c	exit
;	al=code

INT21_exit:
%if OS_WIN
	MOVZX	EAX,AL
	PUSH	EAX
	;CALL	[IAT_ExitProcess]
	CALL	_ExitProcess@4

	RET
%else

;
;	al=code
;

SYS_exit:
	MOVZX	EAX,AL
	MOV	EBX,EAX
	MOV	EAX,1	;sys_exit
	int	80h
	RET


%endif

;
;
;

_stdin:	dd	0
_stdout:dd	0
_stderr:dd	0

FILE_WORK:
	TIMES	SIZEOF_FILE*FILES	DB	00h

_errno:	DD	0

USRDTA:
MYDTA:
	TIMES	100H	DB	00h


;_main:
	CALL	TEST_HELLO
	XOR	EAX,EAX
	CALL	INT21_exit

	;ALIGN	FILE_ALIGN


HELLO_STR:	DB	"Hello, WOrld!",0dh,0ah,0
