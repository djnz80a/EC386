
	PUBLIC	_ABORT
	PUBLIC	_GETENV
	PUBLIC	_ABS
	PUBLIC	_LABS
	PUBLIC	_ATOF
	PUBLIC	_ATOL
	PUBLIC	_ATOI
	PUBLIC	_RANDOM
	PUBLIC	_RAND
	PUBLIC	_SRANDOMDEV
	PUBLIC	_SRANDOM
	PUBLIC	_SRAND
	PUBLIC	_EXIT
	PUBLIC	_ATEXIT
	PUBLIC	_SBRK
	PUBLIC	_CALLOC

	PUBLIC	_malloc	;_MALLOC
	PUBLIC	_free	;_FREE
	PUBLIC	_realloc	;_REALLOC

	PUBLIC	GETDEC
	PUBLIC	GETDEC2
	PUBLIC	SKIP_WHITE

	PUBLIC	_ENVIRON

P1	EQU	4*2
P2	EQU	6*2
P3	EQU	8*2
P4	EQU	10*2
P5	EQU	12*2
P6	EQU	14*2

;for MALLOC2.CLB
p1	EQU	P1
p2	EQU	P2
p3	EQU	P3

;
_ABORT:
	MOV	AH,4CH
	INT	21H
	RET
;
_ENVIRON:
	DD	0

;
;
;
_GETENV:
;	MOV	EBX,0
;	RET

	PUSH	EBP
	MOV	EBP,ESP

	PUSH	DS
	PUSH	ES
	MOV	AX,DS
	MOV	ES,AX
	MOV	AX,2CH
	MOV	DS,AX

	MOV	ESI,0
	MOV	EDI,_GETENV.WORK
	CLD
_GETENV.10:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	_GETENV.N

	MOV	EDX,ESI

	MOV	EBX,[EBP+P1]
_GETENV.20:
	MOV	AL,[ESI]
	CMP	AL,'='
	JNE	_GETENV.21

	CMP	BYTE ES:[EBX],0
	JE	_GETENV.Y

_GETENV.21:
	CMP	AL,ES:[EBX]
	JNE	_GETENV.30

	INC	ESI
	INC	EBX
	JMP	_GETENV.20


_GETENV.30:
	MOV	AL,[ESI]
	INC	ESI
	OR	AL,AL
	JNE	_GETENV.30
	JMP	_GETENV.10

_GETENV.Y:
	INC	ESI
	MOV	EDI,_GETENV.WORK
_GETENV.Y.10:
	MOV	AL,[ESI]
	MOV	ES:[EDI],AL
	INC	ESI
	INC	EDI
	OR	AL,AL
	JNE	_GETENV.Y.10

	MOV	EBX,_GETENV.WORK
	JMP	_GETENV.R

_GETENV.N:
	MOV	EBX,0

_GETENV.R:
	POP	ES
	POP	DS

	POP	EBP
	RET

_GETENV.WORK:
	DS	100H

;
;
;
_ABS:
_LABS:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]
	OR	EBX,EBX
	JNS	_LABS.R
	NEG	EBX

_LABS.R:
	POP	EBP
	RET
;
;
;
_ATOF:
	PUSH	EBP
	MOV	EBP,ESP

	PUSH	[EBP+P1]
	;CALL	_GET_F
	CALL	_get_f
	ADD	ESP,4

	POP	EBP
	RET

;
;
;
_ATOL:
_ATOI:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	CALL	SKIP_WHITE
;	CALL	GETDEC
	CALL	GETDEC2
		MOV	[EBP+P1],ESI
	MOV	EBX,EAX
	POP	EBP
	RET

;
;

SKIP_WHITE:
	MOV	AL,[ESI]
	INC	ESI
	CALL	IS_WHITE
	JE	SKIP_WHITE
	DEC	ESI
	RET

IS_WHITE:
	CMP	AL,20H
	JE	IS_WHITE.Y
	CMP	AL,09H
	JE	IS_WHITE.Y

IS_WHITE.Y:
	RET



;
;
;
GETDEC2:
	CMP	BYTE [ESI],'-'
	JNE	GETDEC2.10
	INC	ESI
	CALL	GETDEC
	NEG	EAX
	RET

GETDEC2.10:
	CALL	GETDEC
	RET


;	esi:adrs of decimal string
;	<eax:#
;	<esi:next of decimal char
;
;	?edx
;
GETDEC:
	PUSH	EBX
	XOR	EDX,EDX
	CLD
GETDEC.10:
	XOR	EAX,EAX
	LODSB
	CALL	TOUPPER
	SUB	AL,'0'
	JB	GETDEC.E
	CMP	AL,10
	JNB	GETDEC.E
GETDEC.20:
	MOV	EBX,EDX
	SHL	EDX,2
	ADD	EDX,EBX
	SHL	EDX,1
	ADD	EDX,EAX
	JMP	GETDEC.10

GETDEC.E:
	DEC	ESI
	MOV	EAX,EDX
	POP	EBX
	RET

;	esi:adrs of hex string
;	<eax:#
;	<esi:next of hex char
;
;	?edx
;
GETHEX:
	XOR	EDX,EDX
GETHEX.10:
	XOR	EAX,EAX
	LODSB
	CALL	TOUPPER
	SUB	AL,'0'
	JB	GETHEX.E
	CMP	AL,10
	JB	GETHEX.20
	SUB	AL,7
	CMP	AL,10
	JB	GETHEX.E
	CMP	AL,10H
	JNB	GETHEX.E
GETHEX.20:
	SHL	EDX,4
	ADD	EDX,EAX
	JMP	GETHEX.10

GETHEX.E:
	DEC	ESI
	MOV	EAX,EDX
	RET


;
_RANDOM:

;
;
;
_RAND:
	PUSH	EBP
	CALL	RND
	ROR	EAX,9
	AND	EAX,7FFFFFFFH
	MOV	EBX,EAX
	POP	EBP
	RET

;
;
;

;_RND:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	RND
	MOV	EBX,EAX
	AND	EBX,7FFFFFFFH
	MOV	EAX,[EBP+P1]
	CALL	_IMOD.L

	POP	EBP
	RET

;
_SRANDOMDEV:
	PUSH	EBP

	MOV	AH,2CH
	INT	21H
	MOV	EBP,CX
	SHL	EBP,10H
	MOV	EBP,DX

	MOV	AH,2AH
	INT	21H
	MOVZX	EAX,CX
	SHL	EAX,10H
	MOV	EAX,DX

	MUL	EBP

	PUSH	EAX
	CALL	_SRANDOM
	ADD	ESP,4

	POP	EBP
	RET


;
_SRANDOM:
;
_SRAND:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]
	MOV	[SEED],EBX

	POP	EBP
	RET

;
;
;
RND:	MOV	EAX,[SEED]
	MOV	EBX,17
	MUL	EBX
	ADD	EAX,7
	MOV	[SEED],EAX
	RET

SEED:	DD	12345678H
;


_EXIT:	PUSH	EBP
	MOV	EBP,ESP

_EXIT.L1:
	MOV	ECX,[ATEXIT_CNT]
	JCXZ	_EXIT.50
	DEC	ECX
	MOV	[ATEXIT_CNT],ECX
	SHL	ECX,2
	ADD	ECX,ATEXIT_DATA
	CALL	[ECX]
	JMP	_EXIT.L1

_EXIT.50:
	CALL	END_FILE

	MOV	AL,[EBP+P1]
	MOV	AH,4CH
	INT	21H
	POP	EBP
	RET
;
_ATEXIT:
;	XOR	EBX,EBX

	PUSH	EBP
	MOV	EBP,ESP

	MOV	EAX,[ATEXIT_CNT]
	CMP	EAX,20H
	JNB	_ATEXIT.ERR
	INC	EAX
	MOV	[ATEXIT_CNT],EAX
	DEC	EAX
	SHL	EAX,2
	ADD	EAX,ATEXIT_DATA
	MOV	EBX,[EBP+P1]
	MOV	[EAX],EBX

	XOR	EBX,EBX
	JMP	_ATEXIT.R

_ATEXIT.ERR:
	MOV	EBX,-1
_ATEXIT.R:
	POP	EBP
	RET

ATEXIT_CNT:
	DD	0

ATEXIT_DATA:
	DS	4*20H


;
;
;
	EXTRN	ALLOC

_malloc:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EAX,[EBP+P1]
	CALL	ALLOC

	POP	EBP
	RET

;_SBRK:
;_CALLOC:

_free:

_realloc:
	jmp	0

	;end	;**
;
;
_SBRK:
	PUSH	EBP
	MOV	EBP,ESP

		MOV	EAX,ESP
		SUB	EAX,4000H

	MOV	ESI,[MALLOC_P]
	MOV	ECX,[EBP+P1]
	ADD	ESI,ECX
	JB	_SBRK.ERR
	;CMP	ESI,[MALLOC_MAX]
		CMP	ESI,EAX
	JNB	_SBRK.ERR

	MOV	EBX,[MALLOC_P]
	MOV	[MALLOC_P],ESI
	JMP	_SBRK.R

_SBRK.ERR:
	MOV	EBX,-1	;0
	;	PUSH	[EBP+P1]
	;	CALL	_VSBRK
	;	ADD	ESP,4
_SBRK.R:
	POP	EBP
	RET


;

_CALLOC:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EAX,[EBP+P1]
	MOV	EBX,[EBP+P2]
	MUL	EBX
	MOV	EBX,EAX
	JE	_CALLOC.R

	PUSH	EBX
	;CALL	_MALLOC
	CALL	_malloc
	ADD	ESP,4

;	fill by 0 (already in malloc)

	PUSH	EBX
	MOV	EDI,EBX
	MOV	EAX,[EBP+P1]
	MOV	EBX,[EBP+P2]
	MUL	EBX
	MOV	ECX,EAX
	XOR	EAX,EAX
	CLD
	REP
	STOSB
	POP	EBX

_CALLOC.R:
	POP	EBP
	RET

;#INCLUDE <B:\MALLOC0.CLB>
;#INCLUDE <B:\MALLOC0A.CLB>

;MALLOC_P:DD	BOTTOM	;8000H

;;#INCLUDE <B:\MALLOC2.CLB>

