
	BITS	32

	EXTERN	_malloc
	EXTERN	TOUPPER

	global	_strdup
	global	_strerror
;	global	_strcspn
	global	_strchr
	global	_strrchr
	global	_index
	global	_rindex
	global	_strlen
	global	_strncasecmp
	global	_strncmp
	global	_strcasecmp
	global	_strcmp
	global	_strcat
	global	_strncat
	global	_strncpy
	global	_strcpy
	global	_strstr
	global	_memmove
	global	_memcpy
	global	_memset
	global	_memcmp
	global	_memchr
	global	_bzero
	global	_strcoll

P1	EQU	4*2
P2	EQU	6*2
P3	EQU	8*2
P4	EQU	10*2
P5	EQU	12*2
P6	EQU	14*2


;
_strdup:
	PUSH	EBP
	MOV	EBP,ESP

	PUSH	DWORD [EBP+P1]
	CALL	_strlen
	ADD	ESP,4
	INC	EBX
	MOV	ECX,EBX

	PUSH	ECX
	PUSH	EBX
	;CALL	_MALLOC
	CALL	_malloc
	ADD	ESP,4
	POP	ECX
	OR	EBX,EBX
	JE	_STRDUP.R

	PUSH	ECX
	PUSH	DWORD [EBP+P1]
	PUSH	EBX
	CALL	_strcpy
	ADD	ESP,4*3

_STRDUP.R:
	POP	EBP
	RET

;
_strerror:
	PUSH	EBP
	MOV	EBP,ESP

	;MOV	EBX,ERR_STR0

	;MOV	EAX,[_ERRNO]
	MOV	EBX,[EBP+P1]
	SHL	EBX,2
	ADD	EBX,EMES_TBL
	MOV	EBX,[EBX]

	POP	EBP
	RET

ERR_STR0:
	DB	'[ERROR]',0

;
EMES_TBL:
	DD	EMES0
	DD	EMES1
	DD	EMES2
	DD	EMES3

EMES0:	DB	'no error',0
EMES1:	DB	'open',0
EMES2:	DB	'seek',0
EMES3:	DB	'read',0

;
;_STRCSPN:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]

_STRCSPN.10:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	_STRCSPN.30

	MOV	EDI,[EBP+P2]
_STRCSPN.20:
	MOV	AL,[EDI]
	OR	AL,AL
	JE	_STRCSPN.40

	CMP	AL,[ESI]
	JE	_STRCSPN.30
	INC	EDI
	JMP	_STRCSPN.20

_STRCSPN.30:
	MOV	EBX,ESI
	SUB	EBX,[EBP+P1]
	JMP	_STRCSPN.R

_STRCSPN.40:
	INC	ESI
	JMP	_STRCSPN.10

_STRCSPN.R:
	POP	EBP
	RET

;
_index:
_strchr:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,[EBP+P1]
	MOV	AH,[EBP+P2]
_STRCHR.10:
	MOV	AL,[EBX]
	CMP	AL,AH
	JE	_STRCHR.R
	INC	EBX
	OR	AL,AL
	JNE	_STRCHR.10

	MOV	EBX,0

_STRCHR.R:
	POP	EBP
	RET

;
_rindex:
_strrchr:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EBX,0

	MOV	ESI,[EBP+P1]
	MOV	AH,[EBP+P2]
_STRRCHR.10:
	MOV	AL,[ESI]
	CMP	AL,AH
	JE	_STRRCHR.20
_STRRCHR.15:
	INC	ESI
	OR	AL,AL
	JNE	_STRRCHR.10
	JMP	_STRRCHR.R

_STRRCHR.20:
	MOV	EBX,ESI
	JMP	_STRRCHR.15

_STRRCHR.R:
	POP	EBP
	RET

;
_strlen:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]
	MOV	EDI,ESI
;	MOV	EBX,-1
_STRLEN.10:
;	INC	EBX
	LODSB
	OR	AL,AL
	JNE	SHORT _STRLEN.10

	MOV	EBX,ESI
	SUB	EBX,EDI
	DEC	EBX

	POP	EBP
	RET
;
;
_strncasecmp:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	MOV	ECX,[EBP+P3]

	MOV	EBX,0
	JCXZ	_STRNCASECMP.R

_STRNCASECMP.10:
	MOV	AL,[ESI]
	CALL	TOUPPER
	MOV	AH,[EDI]
	XCHG	AH,AL
	CALL	TOUPPER
	XCHG	AH,AL
	OR	AL,AL
	JE	_STRNCASECMP.20
	OR	AH,AH
	JE	_STRNCASECMP.20
	CMP	AL,AH
	JNE	_STRNCASECMP.NE
	INC	ESI
	INC	EDI
	LOOP	_STRNCASECMP.10

	MOV	EBX,0
	JMP	_STRNCASECMP.R

_STRNCASECMP.20:
	SUB	AL,AH

_STRNCASECMP.NE:
	MOVZX	EBX,AL
	MOVZX	EAX,AH
	SUB	EBX,EAX

_STRNCASECMP.R:
	POP	EBP
	RET

;
_strncmp:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	MOV	ECX,[EBP+P3]

	MOV	EBX,0
	JCXZ	_STRNCMP.R

_STRNCMP.10:
	MOV	AL,[ESI]
	MOV	AH,[EDI]
	OR	AL,AL
	JE	_STRNCMP.20
	OR	AH,AH
	JE	_STRNCMP.20
	CMP	AL,AH
	JNE	_STRNCMP.NE
	INC	ESI
	INC	EDI
	LOOP	_STRNCMP.10

	MOV	EBX,0
	JMP	_STRNCMP.R

_STRNCMP.20:
	SUB	AL,AH

_STRNCMP.NE:
	MOVZX	EBX,AL
	MOVZX	EAX,AH
	SUB	EBX,EAX

_STRNCMP.R:
	POP	EBP
	RET


;
_strcasecmp:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	XOR	EBX,EBX
	CLD
_STRCASECMP.10:
	LODSB
	CALL	TOUPPER
	MOV	AH,[EDI]
	XCHG	AH,AL
	CALL	TOUPPER
	XCHG	AH,AL
	CMP	AL,AH

	;JA	_STRCASECMP.P
	;JB	_STRCASECMP.M
	JNE	SHORT _STRCASECMP.N

	OR	AL,AL
	JE	SHORT _STRCASECMP.Z

	INC	EDI
	JMP	SHORT _STRCASECMP.10

_STRCASECMP.N:
	JA	_STRCASECMP.P
	JMP	_STRCASECMP.M

_STRCASECMP.P:
	MOV	EBX,1
	JMP	_STRCASECMP.R
_STRCASECMP.M:
	MOV	EBX,-1
	JMP	_STRCASECMP.R

_STRCASECMP.Z:
	XOR	EBX,EBX
	JMP	_STRCASECMP.R

_STRCASECMP.R:
	POP	EBP
	RET


;
_strcmp:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	XOR	EBX,EBX
	CLD
_STRCMP.10:
	LODSB
	MOV	AH,[EDI]
	CMP	AL,AH

	;JA	_STRCMP.P
	;JB	_STRCMP.M
	JNE	SHORT _STRCMP.N

	OR	AL,AL
	JE	SHORT _STRCMP.Z

	INC	EDI
	JMP	SHORT _STRCMP.10

_STRCMP.N:
	JA	_STRCMP.P
	JMP	_STRCMP.M

_STRCMP.P:
	MOV	EBX,1
	JMP	_STRCMP.R
_STRCMP.M:
	MOV	EBX,-1
	JMP	_STRCMP.R

_STRCMP.Z:
	XOR	EBX,EBX
	JMP	_STRCMP.R

_STRCMP.R:
	POP	EBP
	RET
;
_strncat:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	MOV	ECX,[EBP+P3]
	CLD
	MOV	AX,DS
	MOV	ES,AX
_STRNCAT.10:
	LODSB
	OR	AL,AL
	JNE	_STRNCAT.10
	DEC	ESI
	XCHG	ESI,EDI
_STRNCAT.20:
	JCXZ	_STRNCAT.30
	DEC	ECX
	LODSB
	STOSB
	OR	AL,AL
	JNE	_STRNCAT.20
	DEC	EDI

_STRNCAT.30:
	MOV	AL,0
	STOSB

	MOV	EBX,[EBP+P1]

	POP	EBP
	RET

;

_strcat:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	CLD
	MOV	AX,DS
	MOV	ES,AX
_STRCAT.10:
	LODSB
	OR	AL,AL
	JNE	_STRCAT.10
	DEC	ESI
	XCHG	ESI,EDI
_STRCAT.20:
	LODSB
	STOSB
	OR	AL,AL
	JNE	_STRCAT.20

	MOV	EBX,[EBP+P1]
	POP	EBP
	RET
;
;
;
_strncpy:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EDI,[EBP+P1]
	MOV	ESI,[EBP+P2]
	MOV	ECX,[EBP+P3]
	JCXZ	_STRNCPY.E
	CLD
	MOV	AX,DS
	MOV	ES,AX

_STRNCPY.10:
	LODSB
	OR	AL,AL
	JE	_STRNCPY.20
	STOSB
	LOOP	_STRNCPY.10
	JMP	_STRNCPY.E

_STRNCPY.20:
	STOSB
	LOOP	_STRNCPY.20

_STRNCPY.E:
	MOV	EBX,[EBP+P1]

	POP	EBP
	RET

;
;
;
_strcpy:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDI,[EBP+P1]
	MOV	ESI,[EBP+P2]
	CLD
	MOV	AX,DS
	MOV	ES,AX
_STRCPY.10:
	LODSB
	STOSB
	OR	AL,AL
	JNE	SHORT _STRCPY.10

	MOV	EBX,[EBP+P1]
	POP	EBP
	RET

;
_strstr:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,4*2

	PUSH	DWORD [EBP+P1]
	CALL	_strlen
	ADD	ESP,4
	MOV	[EBP-4],EBX

	PUSH	DWORD [EBP+P2]
	CALL	_strlen
	ADD	ESP,4
	MOV	[EBP-8],EBX
	OR	EBX,EBX
	MOV	EBX,[EBP+P1]
	JE	_STRSTR.R

	MOV	ECX,[EBP-4]
	SUB	ECX,[EBP-8]
	JB	_STRSTR.N

	MOV	ESI,[EBP+P1]
_STRSTR.L1:
	PUSH	ECX
	PUSH	ESI

	PUSH	DWORD [EBP-8]
	PUSH	DWORD [EBP+P2]
	PUSH	ESI
	CALL	_strncmp
	ADD	ESP,4*3

	POP	ESI
	POP	ECX
	OR	EBX,EBX		;#
	MOV	EBX,ESI
	JE	_STRSTR.R

	INC	ESI
	JCXZ	_STRSTR.N
	DEC	ECX
	JMP	_STRSTR.L1

_STRSTR.N:
	XOR	EBX,EBX


_STRSTR.R:
	MOV	ESP,EBP
	POP	EBP
	RET
;
_strcoll:
	JMP	_strcmp

;
_memmove:
	PUSH	EBP
	MOV	EBP,ESP

	PUSH	DS
	POP	ES

	MOV	EDI,[EBP+P1]
	MOV	ESI,[EBP+P2]
	MOV	ECX,[EBP+P3]
	JCXZ	_MEMMOVE.R

	CMP	ESI,EDI
	JB	_MEMMOVE.2

	CLD
	REP
	MOVSB
	JMP	_MEMMOVE.R

_MEMMOVE.2:
	ADD	ESI,ECX
	ADD	EDI,ECX
	DEC	ESI
	DEC	EDI

	STD
	REP
	MOVSB
	CLD


_MEMMOVE.R:
	MOV	EBX,[EBP+P1]

	POP	EBP
	RET

;
_memcpy:
	PUSH	EBP
	MOV	EBP,ESP

	;PUSH	DS
	;POP	ES
	MOV	EAX,DS
	MOV	ES,EAX

	MOV	EDI,[EBP+P1]
	MOV	ESI,[EBP+P2]
	MOV	ECX,[EBP+P3]

	MOV	EAX,ECX
	SHR	ECX,2
	CLD
	JCXZ	_MEMCPY.10
	REP
	MOVSD

_MEMCPY.10:
	MOV	ECX,EAX
	AND	ECX,3
	JE	_MEMCPY.R
	REP
	MOVSB
_MEMCPY.R:
	MOV	EBX,[EBP+P1]

	POP	EBP
	RET

;
;
;
_bzero:
	PUSH	EBP
	MOV	EBP,ESP

	PUSH	DWORD 0
	PUSH	DWORD [EBP+P2]
	PUSH	DWORD [EBP+P1]
	CALL	_memset
	ADD	ESP,4*3

	POP	EBP
	RET

;

_memset:
	PUSH	EBP
	MOV	EBP,ESP

	;PUSH	DS
	;POP	ES
	MOV	EAX,DS
	MOV	ES,EAX

	MOV	EDI,[EBP+P1]
	MOV	EBX,EDI
	MOV	AL,[EBP+P2]

	MOV	AH,AL
	MOV	EDX,EAX
	SHL	EDX,10H
	MOV	DX,AX

	MOV	ECX,[EBP+P3]
	JCXZ	_MEMSET.R

	;	CLD
	;	REP
	;	STOSB
	;	JMP	_MEMSET.R

	CLD
	MOV	EDX,ECX
	SHR	ECX,2
	JCXZ	_MEMSET.10

	REP
	STOSD

_MEMSET.10:
	MOV	ECX,EDX
	AND	ECX,3
	JCXZ	_MEMSET.R

	REP
	STOSB

_MEMSET.R:
	POP	EBP
	RET

;
_memcmp:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]
	MOV	EDI,[EBP+P2]
	MOV	ECX,[EBP+P3]

	MOV	EBX,0
	JCXZ	_MEMCMP.R

_MEMCMP.10:
	MOV	AL,[ESI]
	MOV	AH,[EDI]
	CMP	AL,AH
	JNE	_MEMCMP.NE
	INC	ESI
	INC	EDI
	LOOP	_MEMCMP.10

	MOV	EBX,0
	JMP	_MEMCMP.R

_MEMCMP.NE:
	MOVZX	EBX,AL
	MOVZX	EAX,AH
	SUB	EBX,EAX

_MEMCMP.R:
	POP	EBP
	RET

;
_memchr:
	PUSH	EBP
	MOV	EBP,ESP

	MOV	ESI,[EBP+P1]
	MOV	EAX,[EBP+P2]
	MOV	ECX,[EBP+P3]
	XOR	EBX,EBX
	CMP	EAX,100H
	JNB	_MEMCHR.R
_MEMCHR.10:
	JCXZ	_MEMCHR.R
	DEC	ECX

	CMP	AL,[ESI]
	JE	_MEMCHR.20
	INC	ESI
	JMP	_MEMCHR.10

_MEMCHR.20:
	MOV	EBX,ESI

_MEMCHR.R:
	POP	EBP
	RET


	;ALIGN	1000h
