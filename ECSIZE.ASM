;
;sizeof
;	object
;
;for ds
;for adj
;for ptr+-
;for sizeof()
;
;int *i;
;	sizeof object i
;	sizeof ptr to i
;

SIZEOF_DS:
	JMP	SIZEOF

	CMP	ESI,100H
	JB	SIZEOF

	MOV	EAX,[ESI+NODE1]
	MOV	AX,[EAX]
	CMP	AX,'['
	JE	SIZEOF_DS_ARY
	JMP	SIZEOF

SIZEOF_DS_ARY:
	PUSH	ESI
	CALL	SIZEOF
	POP	ESI
	MOV	EAX,[ESI+NODE3]
	MOV	EAX,[EAX+NODE4]
	MUL	EDX
	MOV	EDX,EAX
	RET

;
;	SI:node
;	>DX:size
;

SIZEOF:
	;	PUSHAD
	;	CALL	DISP
	;	DB	'<sizeof$'
	;	POPAD

	;	PUSHAD
	;	MOV	EAX,ESI
	;	CALL	DISP_AX
	;	POPAD

	MOV	EDX,1
SIZEOF.10:
		OR	ESI,ESI
		JE	SIZEOF.VOID
	MOV	EBX,ESI
	AND	EBX,0FH	;7FH
	CMP	ESI,100H
	JB	SIZEOF.E2

	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'{'
	JE	SIZEOF.STRUCT
	;CMP	AX,'&'
	;JE	SIZEOF.PNT
	CMP	AX,'['
	JE	SIZEOF.A
	CMP	AX,'*'
	JE	SIZEOF.PNT
	CMP	AX,'('
	;JE	ERR_SIZEOF	;ERR_TYPE	;SIZEOF.FNC
	JE	SIZEOF.FNC

	CALL	IS_CCHR_F
	JE	SIZEOF.N
	JMP	ERR_SIZEOF

;for class member func
SIZEOF.FNC:
	MOV	EDX,4
	JMP	SIZEOF.E

SIZEOF.A:
	;	PUSHAD
	;	CALL	DISP
	;	DB	'sizeof.a$'
	;	POPAD
	;	MOV	EAX,ESI
	;	CALL	DISP_AX

	;MOV	EAX,[ESI+NODE3]
	;MOV	EAX,[EAX+NODE4]
	;MUL	EDX
	;MOV	EDX,EAX

	PUSH	ESI
	MOV	ESI,[ESI+NODE2]
	CALL	SIZEOF
	POP	ESI
	MOV	EAX,[ESI+NODE3]
	MOV	EAX,[EAX+NODE4]
	MUL	EDX
	MOV	EDX,EAX
	RET

	MOV	ESI,[ESI+NODE2]
SIZEOF.A.10:
	CMP	ESI,100H
	JB	SIZEOF.A.50
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'*'
	JE	SIZEOF.A.P
	CMP	AX,'{'
	JE	SIZEOF.A.S

	MOV	EBX,[ESI+NODE3]
		cmp	ebx,-1
		je	err_sizeof
	MOV	EAX,[EBX+NODE4]
		cmp	eax,-1
		je	err_sizeof
	MUL	EDX
	MOV	EDX,EAX
	JMP	SIZEOF.A

SIZEOF.A.P:
	SHL	EDX,1
	CALL	IS_L
	JNE	SIZEOF.A.P.10
	SHL	EDX,1
SIZEOF.A.P.10:
	JMP	SIZEOF.A.END

SIZEOF.A.S:
	PUSH	EDX
	CALL	SIZEOF
	MOV	EAX,EDX
	POP	EDX
	MUL	EDX
	MOV	EDX,EAX
	JMP	SIZEOF.A.END

SIZEOF.A.50:
	MOV	EAX,ESI
	AND	EAX,0FH	;7FH
	MUL	EDX
	MOV	EDX,EAX
	JMP	SIZEOF.A.END

SIZEOF.A.END:
	MOV	EAX,EDX
	CALL	DISP_AX
	JMP	SIZEOF.E
	RET

SIZEOF.N:
	;	PUSHAD
	;	CALL	DISP
	;	DB	'sizeof.n$'
	;	POPAD

	MOV	ESI,[ESI+NODE2]

		CALL	SIZEOF
		RET

	cmp	esi,100h
	jb	sizeof.n.10

	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]

	CMP	AX,'['
	JE	SIZEOF.N.A
	CMP	AX,'*'
	JE	SIZEOF.N.P
sizeof.n.10:
	CALL	SIZEOF
	JMP	SIZEOF.E

SIZEOF.N.A:
	PUSH	ESI
	CALL	SIZEOF
	POP	ESI
	MOV	EBX,[ESI+NODE3]
		cmp	ebx,-1
		je	err_sizeof
	MOV	EAX,[EBX+NODE4]
		cmp	eax,-1
		je	err_sizeof
	MUL	EDX
	MOV	EDX,EAX
	RET

SIZEOF.N.P:
	MOV	EDX,4
	CALL	IS_L
	JE	SIZEOF.N.P.10
	MOV	EDX,2
SIZEOF.N.P.10:
	JMP	SIZEOF.E
	RET

;

SIZEOF.STRUCT:
		MOV	EDX,[ESI+NODE5]	;size	;&&&
		JMP	SIZEOF.E

	MOV	ECX,0
	MOV	EAX,[ESI+NODE4]
	CMP	EAX,0
	JNE	SIZEOF.UNION

	JMP	SIZEOF.STRUCT.20
SIZEOF.STRUCT.10:
	PUSH	ECX
	PUSH	ESI
;	MOV	ESI,[ESI+NODE2]
	CALL	SIZEOF
	POP	ESI
	POP	ECX
	ADD	ECX,EDX
SIZEOF.STRUCT.20:
	MOV	ESI,[ESI+NODE3]
	OR	ESI,ESI
	JNE	SIZEOF.STRUCT.10

SIZEOF.STRUCT.50:
	MOV	EDX,ECX
	JMP	SIZEOF.E

;
SIZEOF.UNION:
	JMP	SIZEOF.UNION.20
SIZEOF.UNION.10:
	PUSH	ECX
	PUSH	ESI
	CALL	SIZEOF
	POP	ESI
	POP	ECX
	CMP	ECX,EDX
	JNB	SIZEOF.UNION.20
	MOV	ECX,EDX
SIZEOF.UNION.20:
	MOV	ESI,[ESI+NODE3]
	OR	ESI,ESI
	JNE	SIZEOF.UNION.10
SIZEOF.UNION.50:
	MOV	EDX,ECX
	JMP	SIZEOF.E


SIZEOF.PNT:
		JMP	SIZEOF.PNT.10 ;#####

;	MOV	EDX,2
	MOV	ESI,[ESI+NODE2]
	cmp	esi,100h
	jb	sizeof.pnt.05
	MOV	EBX,[ESI+NODE1]
	MOV	AX,[EBX]
	CMP	AX,'*'
	JE	SIZEOF.PNT.10
sizeof.pnt.05:
	CALL	SIZEOF
	JMP	SIZEOF.E
	RET

SIZEOF.PNT.10:
	MOV	EDX,4
	CALL	IS_L
	JE	SIZEOF.PNT.12
	MOV	EDX,2
SIZEOF.PNT.12:
	JMP	SIZEOF.E
	RET

;SIZEOF.FNC:
	MOV	EDX,0
	JMP	SIZEOF.E
	RET


SIZEOF.E2:
	MOV	EDX,EBX

SIZEOF.E:
	;	PUSHAD
	;	CALL	DISP
	;	DB	'sizeof>$'
	;	POPAD
	RET
;
SIZEOF.VOID:
	MOV	EDX,1	;for (void*)p+?
	RET

SIZEOF.MUL:
	MOV	EAX,EDX
	MUL	EBX
	MOV	EDX,EAX
	JMP	SIZEOF.E
	RET

ERR_SIZEOF:
	CALL	DISP_CON
	DB	'err_sizeof$'
	JMP	ERR_TYPE
